package com.fakhruddin.wavegram.tl;

import com.fakhruddin.mtproto.tl.core.*;

/**
 * Created by Fakhruddin Fahim on 22/07/2022
 * <p>
 * Auto-generated
 */

public class ApiScheme {
    public static final int LAYER_NUM = 144;

    public static class True extends TLObject {
        public static final int ID = 0x3fedd339;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "true";

        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "True{}";
        }
    }

    public static abstract class Bool extends TLObject {
        public static Bool readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Bool a = null;
            if (id == BoolFalse.ID) {
                a = new BoolFalse();
            } else if (id == BoolTrue.ID) {
                a = new BoolTrue();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Error extends TLObject {
        public static Error readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Error a = null;
            if (id == Error2.ID) {
                a = new Error2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Null extends TLObject {
        public static Null readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Null a = null;
            if (id == Null2.ID) {
                a = new Null2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPeer extends TLObject {
        public static InputPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPeer a = null;
            if (id == InputPeerEmpty.ID) {
                a = new InputPeerEmpty();
            } else if (id == InputPeerSelf.ID) {
                a = new InputPeerSelf();
            } else if (id == InputPeerChat.ID) {
                a = new InputPeerChat();
            } else if (id == InputPeerUser.ID) {
                a = new InputPeerUser();
            } else if (id == InputPeerChannel.ID) {
                a = new InputPeerChannel();
            } else if (id == InputPeerUserFromMessage.ID) {
                a = new InputPeerUserFromMessage();
            } else if (id == InputPeerChannelFromMessage.ID) {
                a = new InputPeerChannelFromMessage();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputUser extends TLObject {
        public static InputUser readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputUser a = null;
            if (id == InputUserEmpty.ID) {
                a = new InputUserEmpty();
            } else if (id == InputUserSelf.ID) {
                a = new InputUserSelf();
            } else if (id == InputUser2.ID) {
                a = new InputUser2();
            } else if (id == InputUserFromMessage.ID) {
                a = new InputUserFromMessage();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputContact extends TLObject {
        public static InputContact readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputContact a = null;
            if (id == InputPhoneContact.ID) {
                a = new InputPhoneContact();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputFile extends TLObject {
        public static InputFile readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputFile a = null;
            if (id == InputFile2.ID) {
                a = new InputFile2();
            } else if (id == InputFileBig.ID) {
                a = new InputFileBig();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputMedia extends TLObject {
        public static InputMedia readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputMedia a = null;
            if (id == InputMediaEmpty.ID) {
                a = new InputMediaEmpty();
            } else if (id == InputMediaUploadedPhoto.ID) {
                a = new InputMediaUploadedPhoto();
            } else if (id == InputMediaPhoto.ID) {
                a = new InputMediaPhoto();
            } else if (id == InputMediaGeoPoint.ID) {
                a = new InputMediaGeoPoint();
            } else if (id == InputMediaContact.ID) {
                a = new InputMediaContact();
            } else if (id == InputMediaUploadedDocument.ID) {
                a = new InputMediaUploadedDocument();
            } else if (id == InputMediaDocument.ID) {
                a = new InputMediaDocument();
            } else if (id == InputMediaVenue.ID) {
                a = new InputMediaVenue();
            } else if (id == InputMediaPhotoExternal.ID) {
                a = new InputMediaPhotoExternal();
            } else if (id == InputMediaDocumentExternal.ID) {
                a = new InputMediaDocumentExternal();
            } else if (id == InputMediaGame.ID) {
                a = new InputMediaGame();
            } else if (id == InputMediaInvoice.ID) {
                a = new InputMediaInvoice();
            } else if (id == InputMediaGeoLive.ID) {
                a = new InputMediaGeoLive();
            } else if (id == InputMediaPoll.ID) {
                a = new InputMediaPoll();
            } else if (id == InputMediaDice.ID) {
                a = new InputMediaDice();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputChatPhoto extends TLObject {
        public static InputChatPhoto readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputChatPhoto a = null;
            if (id == InputChatPhotoEmpty.ID) {
                a = new InputChatPhotoEmpty();
            } else if (id == InputChatUploadedPhoto.ID) {
                a = new InputChatUploadedPhoto();
            } else if (id == InputChatPhoto2.ID) {
                a = new InputChatPhoto2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputGeoPoint extends TLObject {
        public static InputGeoPoint readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputGeoPoint a = null;
            if (id == InputGeoPointEmpty.ID) {
                a = new InputGeoPointEmpty();
            } else if (id == InputGeoPoint2.ID) {
                a = new InputGeoPoint2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPhoto extends TLObject {
        public static InputPhoto readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPhoto a = null;
            if (id == InputPhotoEmpty.ID) {
                a = new InputPhotoEmpty();
            } else if (id == InputPhoto2.ID) {
                a = new InputPhoto2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputFileLocation extends TLObject {
        public static InputFileLocation readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputFileLocation a = null;
            if (id == InputFileLocation2.ID) {
                a = new InputFileLocation2();
            } else if (id == InputEncryptedFileLocation.ID) {
                a = new InputEncryptedFileLocation();
            } else if (id == InputDocumentFileLocation.ID) {
                a = new InputDocumentFileLocation();
            } else if (id == InputSecureFileLocation.ID) {
                a = new InputSecureFileLocation();
            } else if (id == InputTakeoutFileLocation.ID) {
                a = new InputTakeoutFileLocation();
            } else if (id == InputPhotoFileLocation.ID) {
                a = new InputPhotoFileLocation();
            } else if (id == InputPhotoLegacyFileLocation.ID) {
                a = new InputPhotoLegacyFileLocation();
            } else if (id == InputPeerPhotoFileLocation.ID) {
                a = new InputPeerPhotoFileLocation();
            } else if (id == InputStickerSetThumb.ID) {
                a = new InputStickerSetThumb();
            } else if (id == InputGroupCallStream.ID) {
                a = new InputGroupCallStream();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Peer extends TLObject {
        public static Peer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Peer a = null;
            if (id == PeerUser.ID) {
                a = new PeerUser();
            } else if (id == PeerChat.ID) {
                a = new PeerChat();
            } else if (id == PeerChannel.ID) {
                a = new PeerChannel();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class User extends TLObject {
        public static User readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            User a = null;
            if (id == UserEmpty.ID) {
                a = new UserEmpty();
            } else if (id == User2.ID) {
                a = new User2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class UserProfilePhoto extends TLObject {
        public static UserProfilePhoto readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            UserProfilePhoto a = null;
            if (id == UserProfilePhotoEmpty.ID) {
                a = new UserProfilePhotoEmpty();
            } else if (id == UserProfilePhoto2.ID) {
                a = new UserProfilePhoto2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class UserStatus extends TLObject {
        public static UserStatus readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            UserStatus a = null;
            if (id == UserStatusEmpty.ID) {
                a = new UserStatusEmpty();
            } else if (id == UserStatusOnline.ID) {
                a = new UserStatusOnline();
            } else if (id == UserStatusOffline.ID) {
                a = new UserStatusOffline();
            } else if (id == UserStatusRecently.ID) {
                a = new UserStatusRecently();
            } else if (id == UserStatusLastWeek.ID) {
                a = new UserStatusLastWeek();
            } else if (id == UserStatusLastMonth.ID) {
                a = new UserStatusLastMonth();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Chat extends TLObject {
        public static Chat readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Chat a = null;
            if (id == ChatEmpty.ID) {
                a = new ChatEmpty();
            } else if (id == Chat2.ID) {
                a = new Chat2();
            } else if (id == ChatForbidden.ID) {
                a = new ChatForbidden();
            } else if (id == Channel.ID) {
                a = new Channel();
            } else if (id == ChannelForbidden.ID) {
                a = new ChannelForbidden();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatFull extends TLObject {
        public static ChatFull readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatFull a = null;
            if (id == ChatFull2.ID) {
                a = new ChatFull2();
            } else if (id == ChannelFull.ID) {
                a = new ChannelFull();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatParticipant extends TLObject {
        public static ChatParticipant readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatParticipant a = null;
            if (id == ChatParticipant2.ID) {
                a = new ChatParticipant2();
            } else if (id == ChatParticipantCreator.ID) {
                a = new ChatParticipantCreator();
            } else if (id == ChatParticipantAdmin.ID) {
                a = new ChatParticipantAdmin();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatParticipants extends TLObject {
        public static ChatParticipants readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatParticipants a = null;
            if (id == ChatParticipantsForbidden.ID) {
                a = new ChatParticipantsForbidden();
            } else if (id == ChatParticipants2.ID) {
                a = new ChatParticipants2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatPhoto extends TLObject {
        public static ChatPhoto readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatPhoto a = null;
            if (id == ChatPhotoEmpty.ID) {
                a = new ChatPhotoEmpty();
            } else if (id == ChatPhoto2.ID) {
                a = new ChatPhoto2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Message extends TLObject {
        public static Message readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Message a = null;
            if (id == MessageEmpty.ID) {
                a = new MessageEmpty();
            } else if (id == Message2.ID) {
                a = new Message2();
            } else if (id == MessageService.ID) {
                a = new MessageService();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageMedia extends TLObject {
        public static MessageMedia readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageMedia a = null;
            if (id == MessageMediaEmpty.ID) {
                a = new MessageMediaEmpty();
            } else if (id == MessageMediaPhoto.ID) {
                a = new MessageMediaPhoto();
            } else if (id == MessageMediaGeo.ID) {
                a = new MessageMediaGeo();
            } else if (id == MessageMediaContact.ID) {
                a = new MessageMediaContact();
            } else if (id == MessageMediaUnsupported.ID) {
                a = new MessageMediaUnsupported();
            } else if (id == MessageMediaDocument.ID) {
                a = new MessageMediaDocument();
            } else if (id == MessageMediaWebPage.ID) {
                a = new MessageMediaWebPage();
            } else if (id == MessageMediaVenue.ID) {
                a = new MessageMediaVenue();
            } else if (id == MessageMediaGame.ID) {
                a = new MessageMediaGame();
            } else if (id == MessageMediaInvoice.ID) {
                a = new MessageMediaInvoice();
            } else if (id == MessageMediaGeoLive.ID) {
                a = new MessageMediaGeoLive();
            } else if (id == MessageMediaPoll.ID) {
                a = new MessageMediaPoll();
            } else if (id == MessageMediaDice.ID) {
                a = new MessageMediaDice();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageAction extends TLObject {
        public static MessageAction readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageAction a = null;
            if (id == MessageActionEmpty.ID) {
                a = new MessageActionEmpty();
            } else if (id == MessageActionChatCreate.ID) {
                a = new MessageActionChatCreate();
            } else if (id == MessageActionChatEditTitle.ID) {
                a = new MessageActionChatEditTitle();
            } else if (id == MessageActionChatEditPhoto.ID) {
                a = new MessageActionChatEditPhoto();
            } else if (id == MessageActionChatDeletePhoto.ID) {
                a = new MessageActionChatDeletePhoto();
            } else if (id == MessageActionChatAddUser.ID) {
                a = new MessageActionChatAddUser();
            } else if (id == MessageActionChatDeleteUser.ID) {
                a = new MessageActionChatDeleteUser();
            } else if (id == MessageActionChatJoinedByLink.ID) {
                a = new MessageActionChatJoinedByLink();
            } else if (id == MessageActionChannelCreate.ID) {
                a = new MessageActionChannelCreate();
            } else if (id == MessageActionChatMigrateTo.ID) {
                a = new MessageActionChatMigrateTo();
            } else if (id == MessageActionChannelMigrateFrom.ID) {
                a = new MessageActionChannelMigrateFrom();
            } else if (id == MessageActionPinMessage.ID) {
                a = new MessageActionPinMessage();
            } else if (id == MessageActionHistoryClear.ID) {
                a = new MessageActionHistoryClear();
            } else if (id == MessageActionGameScore.ID) {
                a = new MessageActionGameScore();
            } else if (id == MessageActionPaymentSentMe.ID) {
                a = new MessageActionPaymentSentMe();
            } else if (id == MessageActionPaymentSent.ID) {
                a = new MessageActionPaymentSent();
            } else if (id == MessageActionPhoneCall.ID) {
                a = new MessageActionPhoneCall();
            } else if (id == MessageActionScreenshotTaken.ID) {
                a = new MessageActionScreenshotTaken();
            } else if (id == MessageActionCustomAction.ID) {
                a = new MessageActionCustomAction();
            } else if (id == MessageActionBotAllowed.ID) {
                a = new MessageActionBotAllowed();
            } else if (id == MessageActionSecureValuesSentMe.ID) {
                a = new MessageActionSecureValuesSentMe();
            } else if (id == MessageActionSecureValuesSent.ID) {
                a = new MessageActionSecureValuesSent();
            } else if (id == MessageActionContactSignUp.ID) {
                a = new MessageActionContactSignUp();
            } else if (id == MessageActionGeoProximityReached.ID) {
                a = new MessageActionGeoProximityReached();
            } else if (id == MessageActionGroupCall.ID) {
                a = new MessageActionGroupCall();
            } else if (id == MessageActionInviteToGroupCall.ID) {
                a = new MessageActionInviteToGroupCall();
            } else if (id == MessageActionSetMessagesTTL.ID) {
                a = new MessageActionSetMessagesTTL();
            } else if (id == MessageActionGroupCallScheduled.ID) {
                a = new MessageActionGroupCallScheduled();
            } else if (id == MessageActionSetChatTheme.ID) {
                a = new MessageActionSetChatTheme();
            } else if (id == MessageActionChatJoinedByRequest.ID) {
                a = new MessageActionChatJoinedByRequest();
            } else if (id == MessageActionWebViewDataSentMe.ID) {
                a = new MessageActionWebViewDataSentMe();
            } else if (id == MessageActionWebViewDataSent.ID) {
                a = new MessageActionWebViewDataSent();
            } else if (id == MessageActionGiftPremium.ID) {
                a = new MessageActionGiftPremium();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Dialog extends TLObject {
        public static Dialog readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Dialog a = null;
            if (id == Dialog2.ID) {
                a = new Dialog2();
            } else if (id == DialogFolder.ID) {
                a = new DialogFolder();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Photo extends TLObject {
        public static Photo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Photo a = null;
            if (id == PhotoEmpty.ID) {
                a = new PhotoEmpty();
            } else if (id == Photo2.ID) {
                a = new Photo2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PhotoSize extends TLObject {
        public static PhotoSize readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PhotoSize a = null;
            if (id == PhotoSizeEmpty.ID) {
                a = new PhotoSizeEmpty();
            } else if (id == PhotoSize2.ID) {
                a = new PhotoSize2();
            } else if (id == PhotoCachedSize.ID) {
                a = new PhotoCachedSize();
            } else if (id == PhotoStrippedSize.ID) {
                a = new PhotoStrippedSize();
            } else if (id == PhotoSizeProgressive.ID) {
                a = new PhotoSizeProgressive();
            } else if (id == PhotoPathSize.ID) {
                a = new PhotoPathSize();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GeoPoint extends TLObject {
        public static GeoPoint readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GeoPoint a = null;
            if (id == GeoPointEmpty.ID) {
                a = new GeoPointEmpty();
            } else if (id == GeoPoint2.ID) {
                a = new GeoPoint2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputNotifyPeer extends TLObject {
        public static InputNotifyPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputNotifyPeer a = null;
            if (id == InputNotifyPeer2.ID) {
                a = new InputNotifyPeer2();
            } else if (id == InputNotifyUsers.ID) {
                a = new InputNotifyUsers();
            } else if (id == InputNotifyChats.ID) {
                a = new InputNotifyChats();
            } else if (id == InputNotifyBroadcasts.ID) {
                a = new InputNotifyBroadcasts();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPeerNotifySettings extends TLObject {
        public static InputPeerNotifySettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPeerNotifySettings a = null;
            if (id == InputPeerNotifySettings2.ID) {
                a = new InputPeerNotifySettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PeerNotifySettings extends TLObject {
        public static PeerNotifySettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PeerNotifySettings a = null;
            if (id == PeerNotifySettings2.ID) {
                a = new PeerNotifySettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PeerSettings extends TLObject {
        public static PeerSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PeerSettings a = null;
            if (id == PeerSettings2.ID) {
                a = new PeerSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WallPaper extends TLObject {
        public static WallPaper readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WallPaper a = null;
            if (id == WallPaper2.ID) {
                a = new WallPaper2();
            } else if (id == WallPaperNoFile.ID) {
                a = new WallPaperNoFile();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ReportReason extends TLObject {
        public static ReportReason readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ReportReason a = null;
            if (id == InputReportReasonSpam.ID) {
                a = new InputReportReasonSpam();
            } else if (id == InputReportReasonViolence.ID) {
                a = new InputReportReasonViolence();
            } else if (id == InputReportReasonPornography.ID) {
                a = new InputReportReasonPornography();
            } else if (id == InputReportReasonChildAbuse.ID) {
                a = new InputReportReasonChildAbuse();
            } else if (id == InputReportReasonOther.ID) {
                a = new InputReportReasonOther();
            } else if (id == InputReportReasonCopyright.ID) {
                a = new InputReportReasonCopyright();
            } else if (id == InputReportReasonGeoIrrelevant.ID) {
                a = new InputReportReasonGeoIrrelevant();
            } else if (id == InputReportReasonFake.ID) {
                a = new InputReportReasonFake();
            } else if (id == InputReportReasonIllegalDrugs.ID) {
                a = new InputReportReasonIllegalDrugs();
            } else if (id == InputReportReasonPersonalDetails.ID) {
                a = new InputReportReasonPersonalDetails();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class UserFull extends TLObject {
        public static UserFull readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            UserFull a = null;
            if (id == UserFull2.ID) {
                a = new UserFull2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Contact extends TLObject {
        public static Contact readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Contact a = null;
            if (id == Contact2.ID) {
                a = new Contact2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ImportedContact extends TLObject {
        public static ImportedContact readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ImportedContact a = null;
            if (id == ImportedContact2.ID) {
                a = new ImportedContact2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ContactStatus extends TLObject {
        public static ContactStatus readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ContactStatus a = null;
            if (id == ContactStatus2.ID) {
                a = new ContactStatus2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessagesFilter extends TLObject {
        public static MessagesFilter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessagesFilter a = null;
            if (id == InputMessagesFilterEmpty.ID) {
                a = new InputMessagesFilterEmpty();
            } else if (id == InputMessagesFilterPhotos.ID) {
                a = new InputMessagesFilterPhotos();
            } else if (id == InputMessagesFilterVideo.ID) {
                a = new InputMessagesFilterVideo();
            } else if (id == InputMessagesFilterPhotoVideo.ID) {
                a = new InputMessagesFilterPhotoVideo();
            } else if (id == InputMessagesFilterDocument.ID) {
                a = new InputMessagesFilterDocument();
            } else if (id == InputMessagesFilterUrl.ID) {
                a = new InputMessagesFilterUrl();
            } else if (id == InputMessagesFilterGif.ID) {
                a = new InputMessagesFilterGif();
            } else if (id == InputMessagesFilterVoice.ID) {
                a = new InputMessagesFilterVoice();
            } else if (id == InputMessagesFilterMusic.ID) {
                a = new InputMessagesFilterMusic();
            } else if (id == InputMessagesFilterChatPhotos.ID) {
                a = new InputMessagesFilterChatPhotos();
            } else if (id == InputMessagesFilterPhoneCalls.ID) {
                a = new InputMessagesFilterPhoneCalls();
            } else if (id == InputMessagesFilterRoundVoice.ID) {
                a = new InputMessagesFilterRoundVoice();
            } else if (id == InputMessagesFilterRoundVideo.ID) {
                a = new InputMessagesFilterRoundVideo();
            } else if (id == InputMessagesFilterMyMentions.ID) {
                a = new InputMessagesFilterMyMentions();
            } else if (id == InputMessagesFilterGeo.ID) {
                a = new InputMessagesFilterGeo();
            } else if (id == InputMessagesFilterContacts.ID) {
                a = new InputMessagesFilterContacts();
            } else if (id == InputMessagesFilterPinned.ID) {
                a = new InputMessagesFilterPinned();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Update extends TLObject {
        public static Update readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Update a = null;
            if (id == UpdateNewMessage.ID) {
                a = new UpdateNewMessage();
            } else if (id == UpdateMessageID.ID) {
                a = new UpdateMessageID();
            } else if (id == UpdateDeleteMessages.ID) {
                a = new UpdateDeleteMessages();
            } else if (id == UpdateUserTyping.ID) {
                a = new UpdateUserTyping();
            } else if (id == UpdateChatUserTyping.ID) {
                a = new UpdateChatUserTyping();
            } else if (id == UpdateChatParticipants.ID) {
                a = new UpdateChatParticipants();
            } else if (id == UpdateUserStatus.ID) {
                a = new UpdateUserStatus();
            } else if (id == UpdateUserName.ID) {
                a = new UpdateUserName();
            } else if (id == UpdateUserPhoto.ID) {
                a = new UpdateUserPhoto();
            } else if (id == UpdateNewEncryptedMessage.ID) {
                a = new UpdateNewEncryptedMessage();
            } else if (id == UpdateEncryptedChatTyping.ID) {
                a = new UpdateEncryptedChatTyping();
            } else if (id == UpdateEncryption.ID) {
                a = new UpdateEncryption();
            } else if (id == UpdateEncryptedMessagesRead.ID) {
                a = new UpdateEncryptedMessagesRead();
            } else if (id == UpdateChatParticipantAdd.ID) {
                a = new UpdateChatParticipantAdd();
            } else if (id == UpdateChatParticipantDelete.ID) {
                a = new UpdateChatParticipantDelete();
            } else if (id == UpdateDcOptions.ID) {
                a = new UpdateDcOptions();
            } else if (id == UpdateNotifySettings.ID) {
                a = new UpdateNotifySettings();
            } else if (id == UpdateServiceNotification.ID) {
                a = new UpdateServiceNotification();
            } else if (id == UpdatePrivacy.ID) {
                a = new UpdatePrivacy();
            } else if (id == UpdateUserPhone.ID) {
                a = new UpdateUserPhone();
            } else if (id == UpdateReadHistoryInbox.ID) {
                a = new UpdateReadHistoryInbox();
            } else if (id == UpdateReadHistoryOutbox.ID) {
                a = new UpdateReadHistoryOutbox();
            } else if (id == UpdateWebPage.ID) {
                a = new UpdateWebPage();
            } else if (id == UpdateReadMessagesContents.ID) {
                a = new UpdateReadMessagesContents();
            } else if (id == UpdateChannelTooLong.ID) {
                a = new UpdateChannelTooLong();
            } else if (id == UpdateChannel.ID) {
                a = new UpdateChannel();
            } else if (id == UpdateNewChannelMessage.ID) {
                a = new UpdateNewChannelMessage();
            } else if (id == UpdateReadChannelInbox.ID) {
                a = new UpdateReadChannelInbox();
            } else if (id == UpdateDeleteChannelMessages.ID) {
                a = new UpdateDeleteChannelMessages();
            } else if (id == UpdateChannelMessageViews.ID) {
                a = new UpdateChannelMessageViews();
            } else if (id == UpdateChatParticipantAdmin.ID) {
                a = new UpdateChatParticipantAdmin();
            } else if (id == UpdateNewStickerSet.ID) {
                a = new UpdateNewStickerSet();
            } else if (id == UpdateStickerSetsOrder.ID) {
                a = new UpdateStickerSetsOrder();
            } else if (id == UpdateStickerSets.ID) {
                a = new UpdateStickerSets();
            } else if (id == UpdateSavedGifs.ID) {
                a = new UpdateSavedGifs();
            } else if (id == UpdateBotInlineQuery.ID) {
                a = new UpdateBotInlineQuery();
            } else if (id == UpdateBotInlineSend.ID) {
                a = new UpdateBotInlineSend();
            } else if (id == UpdateEditChannelMessage.ID) {
                a = new UpdateEditChannelMessage();
            } else if (id == UpdateBotCallbackQuery.ID) {
                a = new UpdateBotCallbackQuery();
            } else if (id == UpdateEditMessage.ID) {
                a = new UpdateEditMessage();
            } else if (id == UpdateInlineBotCallbackQuery.ID) {
                a = new UpdateInlineBotCallbackQuery();
            } else if (id == UpdateReadChannelOutbox.ID) {
                a = new UpdateReadChannelOutbox();
            } else if (id == UpdateDraftMessage.ID) {
                a = new UpdateDraftMessage();
            } else if (id == UpdateReadFeaturedStickers.ID) {
                a = new UpdateReadFeaturedStickers();
            } else if (id == UpdateRecentStickers.ID) {
                a = new UpdateRecentStickers();
            } else if (id == UpdateConfig.ID) {
                a = new UpdateConfig();
            } else if (id == UpdatePtsChanged.ID) {
                a = new UpdatePtsChanged();
            } else if (id == UpdateChannelWebPage.ID) {
                a = new UpdateChannelWebPage();
            } else if (id == UpdateDialogPinned.ID) {
                a = new UpdateDialogPinned();
            } else if (id == UpdatePinnedDialogs.ID) {
                a = new UpdatePinnedDialogs();
            } else if (id == UpdateBotWebhookJSON.ID) {
                a = new UpdateBotWebhookJSON();
            } else if (id == UpdateBotWebhookJSONQuery.ID) {
                a = new UpdateBotWebhookJSONQuery();
            } else if (id == UpdateBotShippingQuery.ID) {
                a = new UpdateBotShippingQuery();
            } else if (id == UpdateBotPrecheckoutQuery.ID) {
                a = new UpdateBotPrecheckoutQuery();
            } else if (id == UpdatePhoneCall.ID) {
                a = new UpdatePhoneCall();
            } else if (id == UpdateLangPackTooLong.ID) {
                a = new UpdateLangPackTooLong();
            } else if (id == UpdateLangPack.ID) {
                a = new UpdateLangPack();
            } else if (id == UpdateFavedStickers.ID) {
                a = new UpdateFavedStickers();
            } else if (id == UpdateChannelReadMessagesContents.ID) {
                a = new UpdateChannelReadMessagesContents();
            } else if (id == UpdateContactsReset.ID) {
                a = new UpdateContactsReset();
            } else if (id == UpdateChannelAvailableMessages.ID) {
                a = new UpdateChannelAvailableMessages();
            } else if (id == UpdateDialogUnreadMark.ID) {
                a = new UpdateDialogUnreadMark();
            } else if (id == UpdateMessagePoll.ID) {
                a = new UpdateMessagePoll();
            } else if (id == UpdateChatDefaultBannedRights.ID) {
                a = new UpdateChatDefaultBannedRights();
            } else if (id == UpdateFolderPeers.ID) {
                a = new UpdateFolderPeers();
            } else if (id == UpdatePeerSettings.ID) {
                a = new UpdatePeerSettings();
            } else if (id == UpdatePeerLocated.ID) {
                a = new UpdatePeerLocated();
            } else if (id == UpdateNewScheduledMessage.ID) {
                a = new UpdateNewScheduledMessage();
            } else if (id == UpdateDeleteScheduledMessages.ID) {
                a = new UpdateDeleteScheduledMessages();
            } else if (id == UpdateTheme.ID) {
                a = new UpdateTheme();
            } else if (id == UpdateGeoLiveViewed.ID) {
                a = new UpdateGeoLiveViewed();
            } else if (id == UpdateLoginToken.ID) {
                a = new UpdateLoginToken();
            } else if (id == UpdateMessagePollVote.ID) {
                a = new UpdateMessagePollVote();
            } else if (id == UpdateDialogFilter.ID) {
                a = new UpdateDialogFilter();
            } else if (id == UpdateDialogFilterOrder.ID) {
                a = new UpdateDialogFilterOrder();
            } else if (id == UpdateDialogFilters.ID) {
                a = new UpdateDialogFilters();
            } else if (id == UpdatePhoneCallSignalingData.ID) {
                a = new UpdatePhoneCallSignalingData();
            } else if (id == UpdateChannelMessageForwards.ID) {
                a = new UpdateChannelMessageForwards();
            } else if (id == UpdateReadChannelDiscussionInbox.ID) {
                a = new UpdateReadChannelDiscussionInbox();
            } else if (id == UpdateReadChannelDiscussionOutbox.ID) {
                a = new UpdateReadChannelDiscussionOutbox();
            } else if (id == UpdatePeerBlocked.ID) {
                a = new UpdatePeerBlocked();
            } else if (id == UpdateChannelUserTyping.ID) {
                a = new UpdateChannelUserTyping();
            } else if (id == UpdatePinnedMessages.ID) {
                a = new UpdatePinnedMessages();
            } else if (id == UpdatePinnedChannelMessages.ID) {
                a = new UpdatePinnedChannelMessages();
            } else if (id == UpdateChat.ID) {
                a = new UpdateChat();
            } else if (id == UpdateGroupCallParticipants.ID) {
                a = new UpdateGroupCallParticipants();
            } else if (id == UpdateGroupCall.ID) {
                a = new UpdateGroupCall();
            } else if (id == UpdatePeerHistoryTTL.ID) {
                a = new UpdatePeerHistoryTTL();
            } else if (id == UpdateChatParticipant.ID) {
                a = new UpdateChatParticipant();
            } else if (id == UpdateChannelParticipant.ID) {
                a = new UpdateChannelParticipant();
            } else if (id == UpdateBotStopped.ID) {
                a = new UpdateBotStopped();
            } else if (id == UpdateGroupCallConnection.ID) {
                a = new UpdateGroupCallConnection();
            } else if (id == UpdateBotCommands.ID) {
                a = new UpdateBotCommands();
            } else if (id == UpdatePendingJoinRequests.ID) {
                a = new UpdatePendingJoinRequests();
            } else if (id == UpdateBotChatInviteRequester.ID) {
                a = new UpdateBotChatInviteRequester();
            } else if (id == UpdateMessageReactions.ID) {
                a = new UpdateMessageReactions();
            } else if (id == UpdateAttachMenuBots.ID) {
                a = new UpdateAttachMenuBots();
            } else if (id == UpdateWebViewResultSent.ID) {
                a = new UpdateWebViewResultSent();
            } else if (id == UpdateBotMenuButton.ID) {
                a = new UpdateBotMenuButton();
            } else if (id == UpdateSavedRingtones.ID) {
                a = new UpdateSavedRingtones();
            } else if (id == UpdateTranscribedAudio.ID) {
                a = new UpdateTranscribedAudio();
            } else if (id == UpdateReadFeaturedEmojiStickers.ID) {
                a = new UpdateReadFeaturedEmojiStickers();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Updates extends TLObject {
        public static Updates readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Updates a = null;
            if (id == UpdatesTooLong.ID) {
                a = new UpdatesTooLong();
            } else if (id == UpdateShortMessage.ID) {
                a = new UpdateShortMessage();
            } else if (id == UpdateShortChatMessage.ID) {
                a = new UpdateShortChatMessage();
            } else if (id == UpdateShort.ID) {
                a = new UpdateShort();
            } else if (id == UpdatesCombined.ID) {
                a = new UpdatesCombined();
            } else if (id == Updates2.ID) {
                a = new Updates2();
            } else if (id == UpdateShortSentMessage.ID) {
                a = new UpdateShortSentMessage();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DcOption extends TLObject {
        public static DcOption readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DcOption a = null;
            if (id == DcOption2.ID) {
                a = new DcOption2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Config extends TLObject {
        public static Config readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Config a = null;
            if (id == Config2.ID) {
                a = new Config2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class NearestDc extends TLObject {
        public static NearestDc readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            NearestDc a = null;
            if (id == NearestDc2.ID) {
                a = new NearestDc2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EncryptedChat extends TLObject {
        public static EncryptedChat readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EncryptedChat a = null;
            if (id == EncryptedChatEmpty.ID) {
                a = new EncryptedChatEmpty();
            } else if (id == EncryptedChatWaiting.ID) {
                a = new EncryptedChatWaiting();
            } else if (id == EncryptedChatRequested.ID) {
                a = new EncryptedChatRequested();
            } else if (id == EncryptedChat2.ID) {
                a = new EncryptedChat2();
            } else if (id == EncryptedChatDiscarded.ID) {
                a = new EncryptedChatDiscarded();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputEncryptedChat extends TLObject {
        public static InputEncryptedChat readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputEncryptedChat a = null;
            if (id == InputEncryptedChat2.ID) {
                a = new InputEncryptedChat2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EncryptedFile extends TLObject {
        public static EncryptedFile readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EncryptedFile a = null;
            if (id == EncryptedFileEmpty.ID) {
                a = new EncryptedFileEmpty();
            } else if (id == EncryptedFile2.ID) {
                a = new EncryptedFile2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputEncryptedFile extends TLObject {
        public static InputEncryptedFile readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputEncryptedFile a = null;
            if (id == InputEncryptedFileEmpty.ID) {
                a = new InputEncryptedFileEmpty();
            } else if (id == InputEncryptedFileUploaded.ID) {
                a = new InputEncryptedFileUploaded();
            } else if (id == InputEncryptedFile2.ID) {
                a = new InputEncryptedFile2();
            } else if (id == InputEncryptedFileBigUploaded.ID) {
                a = new InputEncryptedFileBigUploaded();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EncryptedMessage extends TLObject {
        public static EncryptedMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EncryptedMessage a = null;
            if (id == EncryptedMessage2.ID) {
                a = new EncryptedMessage2();
            } else if (id == EncryptedMessageService.ID) {
                a = new EncryptedMessageService();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputDocument extends TLObject {
        public static InputDocument readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputDocument a = null;
            if (id == InputDocumentEmpty.ID) {
                a = new InputDocumentEmpty();
            } else if (id == InputDocument2.ID) {
                a = new InputDocument2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Document extends TLObject {
        public static Document readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Document a = null;
            if (id == DocumentEmpty.ID) {
                a = new DocumentEmpty();
            } else if (id == Document2.ID) {
                a = new Document2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class NotifyPeer extends TLObject {
        public static NotifyPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            NotifyPeer a = null;
            if (id == NotifyPeer2.ID) {
                a = new NotifyPeer2();
            } else if (id == NotifyUsers.ID) {
                a = new NotifyUsers();
            } else if (id == NotifyChats.ID) {
                a = new NotifyChats();
            } else if (id == NotifyBroadcasts.ID) {
                a = new NotifyBroadcasts();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SendMessageAction extends TLObject {
        public static SendMessageAction readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SendMessageAction a = null;
            if (id == SendMessageTypingAction.ID) {
                a = new SendMessageTypingAction();
            } else if (id == SendMessageCancelAction.ID) {
                a = new SendMessageCancelAction();
            } else if (id == SendMessageRecordVideoAction.ID) {
                a = new SendMessageRecordVideoAction();
            } else if (id == SendMessageUploadVideoAction.ID) {
                a = new SendMessageUploadVideoAction();
            } else if (id == SendMessageRecordAudioAction.ID) {
                a = new SendMessageRecordAudioAction();
            } else if (id == SendMessageUploadAudioAction.ID) {
                a = new SendMessageUploadAudioAction();
            } else if (id == SendMessageUploadPhotoAction.ID) {
                a = new SendMessageUploadPhotoAction();
            } else if (id == SendMessageUploadDocumentAction.ID) {
                a = new SendMessageUploadDocumentAction();
            } else if (id == SendMessageGeoLocationAction.ID) {
                a = new SendMessageGeoLocationAction();
            } else if (id == SendMessageChooseContactAction.ID) {
                a = new SendMessageChooseContactAction();
            } else if (id == SendMessageGamePlayAction.ID) {
                a = new SendMessageGamePlayAction();
            } else if (id == SendMessageRecordRoundAction.ID) {
                a = new SendMessageRecordRoundAction();
            } else if (id == SendMessageUploadRoundAction.ID) {
                a = new SendMessageUploadRoundAction();
            } else if (id == SpeakingInGroupCallAction.ID) {
                a = new SpeakingInGroupCallAction();
            } else if (id == SendMessageHistoryImportAction.ID) {
                a = new SendMessageHistoryImportAction();
            } else if (id == SendMessageChooseStickerAction.ID) {
                a = new SendMessageChooseStickerAction();
            } else if (id == SendMessageEmojiInteraction.ID) {
                a = new SendMessageEmojiInteraction();
            } else if (id == SendMessageEmojiInteractionSeen.ID) {
                a = new SendMessageEmojiInteractionSeen();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPrivacyKey extends TLObject {
        public static InputPrivacyKey readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPrivacyKey a = null;
            if (id == InputPrivacyKeyStatusTimestamp.ID) {
                a = new InputPrivacyKeyStatusTimestamp();
            } else if (id == InputPrivacyKeyChatInvite.ID) {
                a = new InputPrivacyKeyChatInvite();
            } else if (id == InputPrivacyKeyPhoneCall.ID) {
                a = new InputPrivacyKeyPhoneCall();
            } else if (id == InputPrivacyKeyPhoneP2P.ID) {
                a = new InputPrivacyKeyPhoneP2P();
            } else if (id == InputPrivacyKeyForwards.ID) {
                a = new InputPrivacyKeyForwards();
            } else if (id == InputPrivacyKeyProfilePhoto.ID) {
                a = new InputPrivacyKeyProfilePhoto();
            } else if (id == InputPrivacyKeyPhoneNumber.ID) {
                a = new InputPrivacyKeyPhoneNumber();
            } else if (id == InputPrivacyKeyAddedByPhone.ID) {
                a = new InputPrivacyKeyAddedByPhone();
            } else if (id == InputPrivacyKeyVoiceMessages.ID) {
                a = new InputPrivacyKeyVoiceMessages();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PrivacyKey extends TLObject {
        public static PrivacyKey readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PrivacyKey a = null;
            if (id == PrivacyKeyStatusTimestamp.ID) {
                a = new PrivacyKeyStatusTimestamp();
            } else if (id == PrivacyKeyChatInvite.ID) {
                a = new PrivacyKeyChatInvite();
            } else if (id == PrivacyKeyPhoneCall.ID) {
                a = new PrivacyKeyPhoneCall();
            } else if (id == PrivacyKeyPhoneP2P.ID) {
                a = new PrivacyKeyPhoneP2P();
            } else if (id == PrivacyKeyForwards.ID) {
                a = new PrivacyKeyForwards();
            } else if (id == PrivacyKeyProfilePhoto.ID) {
                a = new PrivacyKeyProfilePhoto();
            } else if (id == PrivacyKeyPhoneNumber.ID) {
                a = new PrivacyKeyPhoneNumber();
            } else if (id == PrivacyKeyAddedByPhone.ID) {
                a = new PrivacyKeyAddedByPhone();
            } else if (id == PrivacyKeyVoiceMessages.ID) {
                a = new PrivacyKeyVoiceMessages();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPrivacyRule extends TLObject {
        public static InputPrivacyRule readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPrivacyRule a = null;
            if (id == InputPrivacyValueAllowContacts.ID) {
                a = new InputPrivacyValueAllowContacts();
            } else if (id == InputPrivacyValueAllowAll.ID) {
                a = new InputPrivacyValueAllowAll();
            } else if (id == InputPrivacyValueAllowUsers.ID) {
                a = new InputPrivacyValueAllowUsers();
            } else if (id == InputPrivacyValueDisallowContacts.ID) {
                a = new InputPrivacyValueDisallowContacts();
            } else if (id == InputPrivacyValueDisallowAll.ID) {
                a = new InputPrivacyValueDisallowAll();
            } else if (id == InputPrivacyValueDisallowUsers.ID) {
                a = new InputPrivacyValueDisallowUsers();
            } else if (id == InputPrivacyValueAllowChatParticipants.ID) {
                a = new InputPrivacyValueAllowChatParticipants();
            } else if (id == InputPrivacyValueDisallowChatParticipants.ID) {
                a = new InputPrivacyValueDisallowChatParticipants();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PrivacyRule extends TLObject {
        public static PrivacyRule readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PrivacyRule a = null;
            if (id == PrivacyValueAllowContacts.ID) {
                a = new PrivacyValueAllowContacts();
            } else if (id == PrivacyValueAllowAll.ID) {
                a = new PrivacyValueAllowAll();
            } else if (id == PrivacyValueAllowUsers.ID) {
                a = new PrivacyValueAllowUsers();
            } else if (id == PrivacyValueDisallowContacts.ID) {
                a = new PrivacyValueDisallowContacts();
            } else if (id == PrivacyValueDisallowAll.ID) {
                a = new PrivacyValueDisallowAll();
            } else if (id == PrivacyValueDisallowUsers.ID) {
                a = new PrivacyValueDisallowUsers();
            } else if (id == PrivacyValueAllowChatParticipants.ID) {
                a = new PrivacyValueAllowChatParticipants();
            } else if (id == PrivacyValueDisallowChatParticipants.ID) {
                a = new PrivacyValueDisallowChatParticipants();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AccountDaysTTL extends TLObject {
        public static AccountDaysTTL readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AccountDaysTTL a = null;
            if (id == AccountDaysTTL2.ID) {
                a = new AccountDaysTTL2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DocumentAttribute extends TLObject {
        public static DocumentAttribute readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DocumentAttribute a = null;
            if (id == DocumentAttributeImageSize.ID) {
                a = new DocumentAttributeImageSize();
            } else if (id == DocumentAttributeAnimated.ID) {
                a = new DocumentAttributeAnimated();
            } else if (id == DocumentAttributeSticker.ID) {
                a = new DocumentAttributeSticker();
            } else if (id == DocumentAttributeVideo.ID) {
                a = new DocumentAttributeVideo();
            } else if (id == DocumentAttributeAudio.ID) {
                a = new DocumentAttributeAudio();
            } else if (id == DocumentAttributeFilename.ID) {
                a = new DocumentAttributeFilename();
            } else if (id == DocumentAttributeHasStickers.ID) {
                a = new DocumentAttributeHasStickers();
            } else if (id == DocumentAttributeCustomEmoji.ID) {
                a = new DocumentAttributeCustomEmoji();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StickerPack extends TLObject {
        public static StickerPack readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StickerPack a = null;
            if (id == StickerPack2.ID) {
                a = new StickerPack2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebPage extends TLObject {
        public static WebPage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebPage a = null;
            if (id == WebPageEmpty.ID) {
                a = new WebPageEmpty();
            } else if (id == WebPagePending.ID) {
                a = new WebPagePending();
            } else if (id == WebPage2.ID) {
                a = new WebPage2();
            } else if (id == WebPageNotModified.ID) {
                a = new WebPageNotModified();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Authorization extends TLObject {
        public static Authorization readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Authorization a = null;
            if (id == Authorization2.ID) {
                a = new Authorization2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ReceivedNotifyMessage extends TLObject {
        public static ReceivedNotifyMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ReceivedNotifyMessage a = null;
            if (id == ReceivedNotifyMessage2.ID) {
                a = new ReceivedNotifyMessage2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ExportedChatInvite extends TLObject {
        public static ExportedChatInvite readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ExportedChatInvite a = null;
            if (id == ChatInviteExported.ID) {
                a = new ChatInviteExported();
            } else if (id == ChatInvitePublicJoinRequests.ID) {
                a = new ChatInvitePublicJoinRequests();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatInvite extends TLObject {
        public static ChatInvite readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatInvite a = null;
            if (id == ChatInviteAlready.ID) {
                a = new ChatInviteAlready();
            } else if (id == ChatInvite2.ID) {
                a = new ChatInvite2();
            } else if (id == ChatInvitePeek.ID) {
                a = new ChatInvitePeek();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputStickerSet extends TLObject {
        public static InputStickerSet readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputStickerSet a = null;
            if (id == InputStickerSetEmpty.ID) {
                a = new InputStickerSetEmpty();
            } else if (id == InputStickerSetID.ID) {
                a = new InputStickerSetID();
            } else if (id == InputStickerSetShortName.ID) {
                a = new InputStickerSetShortName();
            } else if (id == InputStickerSetAnimatedEmoji.ID) {
                a = new InputStickerSetAnimatedEmoji();
            } else if (id == InputStickerSetDice.ID) {
                a = new InputStickerSetDice();
            } else if (id == InputStickerSetAnimatedEmojiAnimations.ID) {
                a = new InputStickerSetAnimatedEmojiAnimations();
            } else if (id == InputStickerSetPremiumGifts.ID) {
                a = new InputStickerSetPremiumGifts();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StickerSet extends TLObject {
        public static StickerSet readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StickerSet a = null;
            if (id == StickerSet2.ID) {
                a = new StickerSet2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotCommand extends TLObject {
        public static BotCommand readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotCommand a = null;
            if (id == BotCommand2.ID) {
                a = new BotCommand2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotInfo extends TLObject {
        public static BotInfo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotInfo a = null;
            if (id == BotInfo2.ID) {
                a = new BotInfo2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class KeyboardButton extends TLObject {
        public static KeyboardButton readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            KeyboardButton a = null;
            if (id == KeyboardButton2.ID) {
                a = new KeyboardButton2();
            } else if (id == KeyboardButtonUrl.ID) {
                a = new KeyboardButtonUrl();
            } else if (id == KeyboardButtonCallback.ID) {
                a = new KeyboardButtonCallback();
            } else if (id == KeyboardButtonRequestPhone.ID) {
                a = new KeyboardButtonRequestPhone();
            } else if (id == KeyboardButtonRequestGeoLocation.ID) {
                a = new KeyboardButtonRequestGeoLocation();
            } else if (id == KeyboardButtonSwitchInline.ID) {
                a = new KeyboardButtonSwitchInline();
            } else if (id == KeyboardButtonGame.ID) {
                a = new KeyboardButtonGame();
            } else if (id == KeyboardButtonBuy.ID) {
                a = new KeyboardButtonBuy();
            } else if (id == KeyboardButtonUrlAuth.ID) {
                a = new KeyboardButtonUrlAuth();
            } else if (id == InputKeyboardButtonUrlAuth.ID) {
                a = new InputKeyboardButtonUrlAuth();
            } else if (id == KeyboardButtonRequestPoll.ID) {
                a = new KeyboardButtonRequestPoll();
            } else if (id == InputKeyboardButtonUserProfile.ID) {
                a = new InputKeyboardButtonUserProfile();
            } else if (id == KeyboardButtonUserProfile.ID) {
                a = new KeyboardButtonUserProfile();
            } else if (id == KeyboardButtonWebView.ID) {
                a = new KeyboardButtonWebView();
            } else if (id == KeyboardButtonSimpleWebView.ID) {
                a = new KeyboardButtonSimpleWebView();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class KeyboardButtonRow extends TLObject {
        public static KeyboardButtonRow readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            KeyboardButtonRow a = null;
            if (id == KeyboardButtonRow2.ID) {
                a = new KeyboardButtonRow2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ReplyMarkup extends TLObject {
        public static ReplyMarkup readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ReplyMarkup a = null;
            if (id == ReplyKeyboardHide.ID) {
                a = new ReplyKeyboardHide();
            } else if (id == ReplyKeyboardForceReply.ID) {
                a = new ReplyKeyboardForceReply();
            } else if (id == ReplyKeyboardMarkup.ID) {
                a = new ReplyKeyboardMarkup();
            } else if (id == ReplyInlineMarkup.ID) {
                a = new ReplyInlineMarkup();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageEntity extends TLObject {
        public static MessageEntity readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageEntity a = null;
            if (id == MessageEntityUnknown.ID) {
                a = new MessageEntityUnknown();
            } else if (id == MessageEntityMention.ID) {
                a = new MessageEntityMention();
            } else if (id == MessageEntityHashtag.ID) {
                a = new MessageEntityHashtag();
            } else if (id == MessageEntityBotCommand.ID) {
                a = new MessageEntityBotCommand();
            } else if (id == MessageEntityUrl.ID) {
                a = new MessageEntityUrl();
            } else if (id == MessageEntityEmail.ID) {
                a = new MessageEntityEmail();
            } else if (id == MessageEntityBold.ID) {
                a = new MessageEntityBold();
            } else if (id == MessageEntityItalic.ID) {
                a = new MessageEntityItalic();
            } else if (id == MessageEntityCode.ID) {
                a = new MessageEntityCode();
            } else if (id == MessageEntityPre.ID) {
                a = new MessageEntityPre();
            } else if (id == MessageEntityTextUrl.ID) {
                a = new MessageEntityTextUrl();
            } else if (id == MessageEntityMentionName.ID) {
                a = new MessageEntityMentionName();
            } else if (id == InputMessageEntityMentionName.ID) {
                a = new InputMessageEntityMentionName();
            } else if (id == MessageEntityPhone.ID) {
                a = new MessageEntityPhone();
            } else if (id == MessageEntityCashtag.ID) {
                a = new MessageEntityCashtag();
            } else if (id == MessageEntityUnderline.ID) {
                a = new MessageEntityUnderline();
            } else if (id == MessageEntityStrike.ID) {
                a = new MessageEntityStrike();
            } else if (id == MessageEntityBlockquote.ID) {
                a = new MessageEntityBlockquote();
            } else if (id == MessageEntityBankCard.ID) {
                a = new MessageEntityBankCard();
            } else if (id == MessageEntitySpoiler.ID) {
                a = new MessageEntitySpoiler();
            } else if (id == MessageEntityCustomEmoji.ID) {
                a = new MessageEntityCustomEmoji();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputChannel extends TLObject {
        public static InputChannel readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputChannel a = null;
            if (id == InputChannelEmpty.ID) {
                a = new InputChannelEmpty();
            } else if (id == InputChannel2.ID) {
                a = new InputChannel2();
            } else if (id == InputChannelFromMessage.ID) {
                a = new InputChannelFromMessage();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageRange extends TLObject {
        public static MessageRange readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageRange a = null;
            if (id == MessageRange2.ID) {
                a = new MessageRange2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelMessagesFilter extends TLObject {
        public static ChannelMessagesFilter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelMessagesFilter a = null;
            if (id == ChannelMessagesFilterEmpty.ID) {
                a = new ChannelMessagesFilterEmpty();
            } else if (id == ChannelMessagesFilter2.ID) {
                a = new ChannelMessagesFilter2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelParticipant extends TLObject {
        public static ChannelParticipant readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelParticipant a = null;
            if (id == ChannelParticipant2.ID) {
                a = new ChannelParticipant2();
            } else if (id == ChannelParticipantSelf.ID) {
                a = new ChannelParticipantSelf();
            } else if (id == ChannelParticipantCreator.ID) {
                a = new ChannelParticipantCreator();
            } else if (id == ChannelParticipantAdmin.ID) {
                a = new ChannelParticipantAdmin();
            } else if (id == ChannelParticipantBanned.ID) {
                a = new ChannelParticipantBanned();
            } else if (id == ChannelParticipantLeft.ID) {
                a = new ChannelParticipantLeft();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelParticipantsFilter extends TLObject {
        public static ChannelParticipantsFilter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelParticipantsFilter a = null;
            if (id == ChannelParticipantsRecent.ID) {
                a = new ChannelParticipantsRecent();
            } else if (id == ChannelParticipantsAdmins.ID) {
                a = new ChannelParticipantsAdmins();
            } else if (id == ChannelParticipantsKicked.ID) {
                a = new ChannelParticipantsKicked();
            } else if (id == ChannelParticipantsBots.ID) {
                a = new ChannelParticipantsBots();
            } else if (id == ChannelParticipantsBanned.ID) {
                a = new ChannelParticipantsBanned();
            } else if (id == ChannelParticipantsSearch.ID) {
                a = new ChannelParticipantsSearch();
            } else if (id == ChannelParticipantsContacts.ID) {
                a = new ChannelParticipantsContacts();
            } else if (id == ChannelParticipantsMentions.ID) {
                a = new ChannelParticipantsMentions();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputBotInlineMessage extends TLObject {
        public static InputBotInlineMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputBotInlineMessage a = null;
            if (id == InputBotInlineMessageMediaAuto.ID) {
                a = new InputBotInlineMessageMediaAuto();
            } else if (id == InputBotInlineMessageText.ID) {
                a = new InputBotInlineMessageText();
            } else if (id == InputBotInlineMessageMediaGeo.ID) {
                a = new InputBotInlineMessageMediaGeo();
            } else if (id == InputBotInlineMessageMediaVenue.ID) {
                a = new InputBotInlineMessageMediaVenue();
            } else if (id == InputBotInlineMessageMediaContact.ID) {
                a = new InputBotInlineMessageMediaContact();
            } else if (id == InputBotInlineMessageGame.ID) {
                a = new InputBotInlineMessageGame();
            } else if (id == InputBotInlineMessageMediaInvoice.ID) {
                a = new InputBotInlineMessageMediaInvoice();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputBotInlineResult extends TLObject {
        public static InputBotInlineResult readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputBotInlineResult a = null;
            if (id == InputBotInlineResult2.ID) {
                a = new InputBotInlineResult2();
            } else if (id == InputBotInlineResultPhoto.ID) {
                a = new InputBotInlineResultPhoto();
            } else if (id == InputBotInlineResultDocument.ID) {
                a = new InputBotInlineResultDocument();
            } else if (id == InputBotInlineResultGame.ID) {
                a = new InputBotInlineResultGame();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotInlineMessage extends TLObject {
        public static BotInlineMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotInlineMessage a = null;
            if (id == BotInlineMessageMediaAuto.ID) {
                a = new BotInlineMessageMediaAuto();
            } else if (id == BotInlineMessageText.ID) {
                a = new BotInlineMessageText();
            } else if (id == BotInlineMessageMediaGeo.ID) {
                a = new BotInlineMessageMediaGeo();
            } else if (id == BotInlineMessageMediaVenue.ID) {
                a = new BotInlineMessageMediaVenue();
            } else if (id == BotInlineMessageMediaContact.ID) {
                a = new BotInlineMessageMediaContact();
            } else if (id == BotInlineMessageMediaInvoice.ID) {
                a = new BotInlineMessageMediaInvoice();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotInlineResult extends TLObject {
        public static BotInlineResult readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotInlineResult a = null;
            if (id == BotInlineResult2.ID) {
                a = new BotInlineResult2();
            } else if (id == BotInlineMediaResult.ID) {
                a = new BotInlineMediaResult();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ExportedMessageLink extends TLObject {
        public static ExportedMessageLink readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ExportedMessageLink a = null;
            if (id == ExportedMessageLink2.ID) {
                a = new ExportedMessageLink2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageFwdHeader extends TLObject {
        public static MessageFwdHeader readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageFwdHeader a = null;
            if (id == MessageFwdHeader2.ID) {
                a = new MessageFwdHeader2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputBotInlineMessageID extends TLObject {
        public static InputBotInlineMessageID readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputBotInlineMessageID a = null;
            if (id == InputBotInlineMessageID2.ID) {
                a = new InputBotInlineMessageID2();
            } else if (id == InputBotInlineMessageID64.ID) {
                a = new InputBotInlineMessageID64();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InlineBotSwitchPM extends TLObject {
        public static InlineBotSwitchPM readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InlineBotSwitchPM a = null;
            if (id == InlineBotSwitchPM2.ID) {
                a = new InlineBotSwitchPM2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class TopPeer extends TLObject {
        public static TopPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            TopPeer a = null;
            if (id == TopPeer2.ID) {
                a = new TopPeer2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class TopPeerCategory extends TLObject {
        public static TopPeerCategory readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            TopPeerCategory a = null;
            if (id == TopPeerCategoryBotsPM.ID) {
                a = new TopPeerCategoryBotsPM();
            } else if (id == TopPeerCategoryBotsInline.ID) {
                a = new TopPeerCategoryBotsInline();
            } else if (id == TopPeerCategoryCorrespondents.ID) {
                a = new TopPeerCategoryCorrespondents();
            } else if (id == TopPeerCategoryGroups.ID) {
                a = new TopPeerCategoryGroups();
            } else if (id == TopPeerCategoryChannels.ID) {
                a = new TopPeerCategoryChannels();
            } else if (id == TopPeerCategoryPhoneCalls.ID) {
                a = new TopPeerCategoryPhoneCalls();
            } else if (id == TopPeerCategoryForwardUsers.ID) {
                a = new TopPeerCategoryForwardUsers();
            } else if (id == TopPeerCategoryForwardChats.ID) {
                a = new TopPeerCategoryForwardChats();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class TopPeerCategoryPeers extends TLObject {
        public static TopPeerCategoryPeers readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            TopPeerCategoryPeers a = null;
            if (id == TopPeerCategoryPeers2.ID) {
                a = new TopPeerCategoryPeers2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DraftMessage extends TLObject {
        public static DraftMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DraftMessage a = null;
            if (id == DraftMessageEmpty.ID) {
                a = new DraftMessageEmpty();
            } else if (id == DraftMessage2.ID) {
                a = new DraftMessage2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StickerSetCovered extends TLObject {
        public static StickerSetCovered readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StickerSetCovered a = null;
            if (id == StickerSetCovered2.ID) {
                a = new StickerSetCovered2();
            } else if (id == StickerSetMultiCovered.ID) {
                a = new StickerSetMultiCovered();
            } else if (id == StickerSetFullCovered.ID) {
                a = new StickerSetFullCovered();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MaskCoords extends TLObject {
        public static MaskCoords readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MaskCoords a = null;
            if (id == MaskCoords2.ID) {
                a = new MaskCoords2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputStickeredMedia extends TLObject {
        public static InputStickeredMedia readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputStickeredMedia a = null;
            if (id == InputStickeredMediaPhoto.ID) {
                a = new InputStickeredMediaPhoto();
            } else if (id == InputStickeredMediaDocument.ID) {
                a = new InputStickeredMediaDocument();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Game extends TLObject {
        public static Game readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Game a = null;
            if (id == Game2.ID) {
                a = new Game2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputGame extends TLObject {
        public static InputGame readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputGame a = null;
            if (id == InputGameID.ID) {
                a = new InputGameID();
            } else if (id == InputGameShortName.ID) {
                a = new InputGameShortName();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class HighScore extends TLObject {
        public static HighScore readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            HighScore a = null;
            if (id == HighScore2.ID) {
                a = new HighScore2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class RichText extends TLObject {
        public static RichText readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            RichText a = null;
            if (id == TextEmpty.ID) {
                a = new TextEmpty();
            } else if (id == TextPlain.ID) {
                a = new TextPlain();
            } else if (id == TextBold.ID) {
                a = new TextBold();
            } else if (id == TextItalic.ID) {
                a = new TextItalic();
            } else if (id == TextUnderline.ID) {
                a = new TextUnderline();
            } else if (id == TextStrike.ID) {
                a = new TextStrike();
            } else if (id == TextFixed.ID) {
                a = new TextFixed();
            } else if (id == TextUrl.ID) {
                a = new TextUrl();
            } else if (id == TextEmail.ID) {
                a = new TextEmail();
            } else if (id == TextConcat.ID) {
                a = new TextConcat();
            } else if (id == TextSubscript.ID) {
                a = new TextSubscript();
            } else if (id == TextSuperscript.ID) {
                a = new TextSuperscript();
            } else if (id == TextMarked.ID) {
                a = new TextMarked();
            } else if (id == TextPhone.ID) {
                a = new TextPhone();
            } else if (id == TextImage.ID) {
                a = new TextImage();
            } else if (id == TextAnchor.ID) {
                a = new TextAnchor();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageBlock extends TLObject {
        public static PageBlock readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageBlock a = null;
            if (id == PageBlockUnsupported.ID) {
                a = new PageBlockUnsupported();
            } else if (id == PageBlockTitle.ID) {
                a = new PageBlockTitle();
            } else if (id == PageBlockSubtitle.ID) {
                a = new PageBlockSubtitle();
            } else if (id == PageBlockAuthorDate.ID) {
                a = new PageBlockAuthorDate();
            } else if (id == PageBlockHeader.ID) {
                a = new PageBlockHeader();
            } else if (id == PageBlockSubheader.ID) {
                a = new PageBlockSubheader();
            } else if (id == PageBlockParagraph.ID) {
                a = new PageBlockParagraph();
            } else if (id == PageBlockPreformatted.ID) {
                a = new PageBlockPreformatted();
            } else if (id == PageBlockFooter.ID) {
                a = new PageBlockFooter();
            } else if (id == PageBlockDivider.ID) {
                a = new PageBlockDivider();
            } else if (id == PageBlockAnchor.ID) {
                a = new PageBlockAnchor();
            } else if (id == PageBlockList.ID) {
                a = new PageBlockList();
            } else if (id == PageBlockBlockquote.ID) {
                a = new PageBlockBlockquote();
            } else if (id == PageBlockPullquote.ID) {
                a = new PageBlockPullquote();
            } else if (id == PageBlockPhoto.ID) {
                a = new PageBlockPhoto();
            } else if (id == PageBlockVideo.ID) {
                a = new PageBlockVideo();
            } else if (id == PageBlockCover.ID) {
                a = new PageBlockCover();
            } else if (id == PageBlockEmbed.ID) {
                a = new PageBlockEmbed();
            } else if (id == PageBlockEmbedPost.ID) {
                a = new PageBlockEmbedPost();
            } else if (id == PageBlockCollage.ID) {
                a = new PageBlockCollage();
            } else if (id == PageBlockSlideshow.ID) {
                a = new PageBlockSlideshow();
            } else if (id == PageBlockChannel.ID) {
                a = new PageBlockChannel();
            } else if (id == PageBlockAudio.ID) {
                a = new PageBlockAudio();
            } else if (id == PageBlockKicker.ID) {
                a = new PageBlockKicker();
            } else if (id == PageBlockTable.ID) {
                a = new PageBlockTable();
            } else if (id == PageBlockOrderedList.ID) {
                a = new PageBlockOrderedList();
            } else if (id == PageBlockDetails.ID) {
                a = new PageBlockDetails();
            } else if (id == PageBlockRelatedArticles.ID) {
                a = new PageBlockRelatedArticles();
            } else if (id == PageBlockMap.ID) {
                a = new PageBlockMap();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PhoneCallDiscardReason extends TLObject {
        public static PhoneCallDiscardReason readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PhoneCallDiscardReason a = null;
            if (id == PhoneCallDiscardReasonMissed.ID) {
                a = new PhoneCallDiscardReasonMissed();
            } else if (id == PhoneCallDiscardReasonDisconnect.ID) {
                a = new PhoneCallDiscardReasonDisconnect();
            } else if (id == PhoneCallDiscardReasonHangup.ID) {
                a = new PhoneCallDiscardReasonHangup();
            } else if (id == PhoneCallDiscardReasonBusy.ID) {
                a = new PhoneCallDiscardReasonBusy();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DataJSON extends TLObject {
        public static DataJSON readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DataJSON a = null;
            if (id == DataJSON2.ID) {
                a = new DataJSON2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class LabeledPrice extends TLObject {
        public static LabeledPrice readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            LabeledPrice a = null;
            if (id == LabeledPrice2.ID) {
                a = new LabeledPrice2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Invoice extends TLObject {
        public static Invoice readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Invoice a = null;
            if (id == Invoice2.ID) {
                a = new Invoice2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PaymentCharge extends TLObject {
        public static PaymentCharge readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PaymentCharge a = null;
            if (id == PaymentCharge2.ID) {
                a = new PaymentCharge2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PostAddress extends TLObject {
        public static PostAddress readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PostAddress a = null;
            if (id == PostAddress2.ID) {
                a = new PostAddress2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PaymentRequestedInfo extends TLObject {
        public static PaymentRequestedInfo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PaymentRequestedInfo a = null;
            if (id == PaymentRequestedInfo2.ID) {
                a = new PaymentRequestedInfo2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PaymentSavedCredentials extends TLObject {
        public static PaymentSavedCredentials readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PaymentSavedCredentials a = null;
            if (id == PaymentSavedCredentialsCard.ID) {
                a = new PaymentSavedCredentialsCard();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebDocument extends TLObject {
        public static WebDocument readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebDocument a = null;
            if (id == WebDocument2.ID) {
                a = new WebDocument2();
            } else if (id == WebDocumentNoProxy.ID) {
                a = new WebDocumentNoProxy();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputWebDocument extends TLObject {
        public static InputWebDocument readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputWebDocument a = null;
            if (id == InputWebDocument2.ID) {
                a = new InputWebDocument2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputWebFileLocation extends TLObject {
        public static InputWebFileLocation readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputWebFileLocation a = null;
            if (id == InputWebFileLocation2.ID) {
                a = new InputWebFileLocation2();
            } else if (id == InputWebFileGeoPointLocation.ID) {
                a = new InputWebFileGeoPointLocation();
            } else if (id == InputWebFileAudioAlbumThumbLocation.ID) {
                a = new InputWebFileAudioAlbumThumbLocation();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPaymentCredentials extends TLObject {
        public static InputPaymentCredentials readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPaymentCredentials a = null;
            if (id == InputPaymentCredentialsSaved.ID) {
                a = new InputPaymentCredentialsSaved();
            } else if (id == InputPaymentCredentials2.ID) {
                a = new InputPaymentCredentials2();
            } else if (id == InputPaymentCredentialsApplePay.ID) {
                a = new InputPaymentCredentialsApplePay();
            } else if (id == InputPaymentCredentialsGooglePay.ID) {
                a = new InputPaymentCredentialsGooglePay();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ShippingOption extends TLObject {
        public static ShippingOption readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ShippingOption a = null;
            if (id == ShippingOption2.ID) {
                a = new ShippingOption2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputStickerSetItem extends TLObject {
        public static InputStickerSetItem readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputStickerSetItem a = null;
            if (id == InputStickerSetItem2.ID) {
                a = new InputStickerSetItem2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputPhoneCall extends TLObject {
        public static InputPhoneCall readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputPhoneCall a = null;
            if (id == InputPhoneCall2.ID) {
                a = new InputPhoneCall2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PhoneCall extends TLObject {
        public static PhoneCall readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PhoneCall a = null;
            if (id == PhoneCallEmpty.ID) {
                a = new PhoneCallEmpty();
            } else if (id == PhoneCallWaiting.ID) {
                a = new PhoneCallWaiting();
            } else if (id == PhoneCallRequested.ID) {
                a = new PhoneCallRequested();
            } else if (id == PhoneCallAccepted.ID) {
                a = new PhoneCallAccepted();
            } else if (id == PhoneCall2.ID) {
                a = new PhoneCall2();
            } else if (id == PhoneCallDiscarded.ID) {
                a = new PhoneCallDiscarded();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PhoneConnection extends TLObject {
        public static PhoneConnection readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PhoneConnection a = null;
            if (id == PhoneConnection2.ID) {
                a = new PhoneConnection2();
            } else if (id == PhoneConnectionWebrtc.ID) {
                a = new PhoneConnectionWebrtc();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PhoneCallProtocol extends TLObject {
        public static PhoneCallProtocol readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PhoneCallProtocol a = null;
            if (id == PhoneCallProtocol2.ID) {
                a = new PhoneCallProtocol2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class CdnPublicKey extends TLObject {
        public static CdnPublicKey readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            CdnPublicKey a = null;
            if (id == CdnPublicKey2.ID) {
                a = new CdnPublicKey2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class CdnConfig extends TLObject {
        public static CdnConfig readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            CdnConfig a = null;
            if (id == CdnConfig2.ID) {
                a = new CdnConfig2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class LangPackString extends TLObject {
        public static LangPackString readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            LangPackString a = null;
            if (id == LangPackString2.ID) {
                a = new LangPackString2();
            } else if (id == LangPackStringPluralized.ID) {
                a = new LangPackStringPluralized();
            } else if (id == LangPackStringDeleted.ID) {
                a = new LangPackStringDeleted();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class LangPackDifference extends TLObject {
        public static LangPackDifference readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            LangPackDifference a = null;
            if (id == LangPackDifference2.ID) {
                a = new LangPackDifference2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class LangPackLanguage extends TLObject {
        public static LangPackLanguage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            LangPackLanguage a = null;
            if (id == LangPackLanguage2.ID) {
                a = new LangPackLanguage2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelAdminLogEventAction extends TLObject {
        public static ChannelAdminLogEventAction readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelAdminLogEventAction a = null;
            if (id == ChannelAdminLogEventActionChangeTitle.ID) {
                a = new ChannelAdminLogEventActionChangeTitle();
            } else if (id == ChannelAdminLogEventActionChangeAbout.ID) {
                a = new ChannelAdminLogEventActionChangeAbout();
            } else if (id == ChannelAdminLogEventActionChangeUsername.ID) {
                a = new ChannelAdminLogEventActionChangeUsername();
            } else if (id == ChannelAdminLogEventActionChangePhoto.ID) {
                a = new ChannelAdminLogEventActionChangePhoto();
            } else if (id == ChannelAdminLogEventActionToggleInvites.ID) {
                a = new ChannelAdminLogEventActionToggleInvites();
            } else if (id == ChannelAdminLogEventActionToggleSignatures.ID) {
                a = new ChannelAdminLogEventActionToggleSignatures();
            } else if (id == ChannelAdminLogEventActionUpdatePinned.ID) {
                a = new ChannelAdminLogEventActionUpdatePinned();
            } else if (id == ChannelAdminLogEventActionEditMessage.ID) {
                a = new ChannelAdminLogEventActionEditMessage();
            } else if (id == ChannelAdminLogEventActionDeleteMessage.ID) {
                a = new ChannelAdminLogEventActionDeleteMessage();
            } else if (id == ChannelAdminLogEventActionParticipantJoin.ID) {
                a = new ChannelAdminLogEventActionParticipantJoin();
            } else if (id == ChannelAdminLogEventActionParticipantLeave.ID) {
                a = new ChannelAdminLogEventActionParticipantLeave();
            } else if (id == ChannelAdminLogEventActionParticipantInvite.ID) {
                a = new ChannelAdminLogEventActionParticipantInvite();
            } else if (id == ChannelAdminLogEventActionParticipantToggleBan.ID) {
                a = new ChannelAdminLogEventActionParticipantToggleBan();
            } else if (id == ChannelAdminLogEventActionParticipantToggleAdmin.ID) {
                a = new ChannelAdminLogEventActionParticipantToggleAdmin();
            } else if (id == ChannelAdminLogEventActionChangeStickerSet.ID) {
                a = new ChannelAdminLogEventActionChangeStickerSet();
            } else if (id == ChannelAdminLogEventActionTogglePreHistoryHidden.ID) {
                a = new ChannelAdminLogEventActionTogglePreHistoryHidden();
            } else if (id == ChannelAdminLogEventActionDefaultBannedRights.ID) {
                a = new ChannelAdminLogEventActionDefaultBannedRights();
            } else if (id == ChannelAdminLogEventActionStopPoll.ID) {
                a = new ChannelAdminLogEventActionStopPoll();
            } else if (id == ChannelAdminLogEventActionChangeLinkedChat.ID) {
                a = new ChannelAdminLogEventActionChangeLinkedChat();
            } else if (id == ChannelAdminLogEventActionChangeLocation.ID) {
                a = new ChannelAdminLogEventActionChangeLocation();
            } else if (id == ChannelAdminLogEventActionToggleSlowMode.ID) {
                a = new ChannelAdminLogEventActionToggleSlowMode();
            } else if (id == ChannelAdminLogEventActionStartGroupCall.ID) {
                a = new ChannelAdminLogEventActionStartGroupCall();
            } else if (id == ChannelAdminLogEventActionDiscardGroupCall.ID) {
                a = new ChannelAdminLogEventActionDiscardGroupCall();
            } else if (id == ChannelAdminLogEventActionParticipantMute.ID) {
                a = new ChannelAdminLogEventActionParticipantMute();
            } else if (id == ChannelAdminLogEventActionParticipantUnmute.ID) {
                a = new ChannelAdminLogEventActionParticipantUnmute();
            } else if (id == ChannelAdminLogEventActionToggleGroupCallSetting.ID) {
                a = new ChannelAdminLogEventActionToggleGroupCallSetting();
            } else if (id == ChannelAdminLogEventActionParticipantJoinByInvite.ID) {
                a = new ChannelAdminLogEventActionParticipantJoinByInvite();
            } else if (id == ChannelAdminLogEventActionExportedInviteDelete.ID) {
                a = new ChannelAdminLogEventActionExportedInviteDelete();
            } else if (id == ChannelAdminLogEventActionExportedInviteRevoke.ID) {
                a = new ChannelAdminLogEventActionExportedInviteRevoke();
            } else if (id == ChannelAdminLogEventActionExportedInviteEdit.ID) {
                a = new ChannelAdminLogEventActionExportedInviteEdit();
            } else if (id == ChannelAdminLogEventActionParticipantVolume.ID) {
                a = new ChannelAdminLogEventActionParticipantVolume();
            } else if (id == ChannelAdminLogEventActionChangeHistoryTTL.ID) {
                a = new ChannelAdminLogEventActionChangeHistoryTTL();
            } else if (id == ChannelAdminLogEventActionParticipantJoinByRequest.ID) {
                a = new ChannelAdminLogEventActionParticipantJoinByRequest();
            } else if (id == ChannelAdminLogEventActionToggleNoForwards.ID) {
                a = new ChannelAdminLogEventActionToggleNoForwards();
            } else if (id == ChannelAdminLogEventActionSendMessage.ID) {
                a = new ChannelAdminLogEventActionSendMessage();
            } else if (id == ChannelAdminLogEventActionChangeAvailableReactions.ID) {
                a = new ChannelAdminLogEventActionChangeAvailableReactions();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelAdminLogEvent extends TLObject {
        public static ChannelAdminLogEvent readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelAdminLogEvent a = null;
            if (id == ChannelAdminLogEvent2.ID) {
                a = new ChannelAdminLogEvent2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelAdminLogEventsFilter extends TLObject {
        public static ChannelAdminLogEventsFilter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelAdminLogEventsFilter a = null;
            if (id == ChannelAdminLogEventsFilter2.ID) {
                a = new ChannelAdminLogEventsFilter2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PopularContact extends TLObject {
        public static PopularContact readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PopularContact a = null;
            if (id == PopularContact2.ID) {
                a = new PopularContact2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class RecentMeUrl extends TLObject {
        public static RecentMeUrl readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            RecentMeUrl a = null;
            if (id == RecentMeUrlUnknown.ID) {
                a = new RecentMeUrlUnknown();
            } else if (id == RecentMeUrlUser.ID) {
                a = new RecentMeUrlUser();
            } else if (id == RecentMeUrlChat.ID) {
                a = new RecentMeUrlChat();
            } else if (id == RecentMeUrlChatInvite.ID) {
                a = new RecentMeUrlChatInvite();
            } else if (id == RecentMeUrlStickerSet.ID) {
                a = new RecentMeUrlStickerSet();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputSingleMedia extends TLObject {
        public static InputSingleMedia readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputSingleMedia a = null;
            if (id == InputSingleMedia2.ID) {
                a = new InputSingleMedia2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebAuthorization extends TLObject {
        public static WebAuthorization readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebAuthorization a = null;
            if (id == WebAuthorization2.ID) {
                a = new WebAuthorization2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputMessage extends TLObject {
        public static InputMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputMessage a = null;
            if (id == InputMessageID.ID) {
                a = new InputMessageID();
            } else if (id == InputMessageReplyTo.ID) {
                a = new InputMessageReplyTo();
            } else if (id == InputMessagePinned.ID) {
                a = new InputMessagePinned();
            } else if (id == InputMessageCallbackQuery.ID) {
                a = new InputMessageCallbackQuery();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputDialogPeer extends TLObject {
        public static InputDialogPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputDialogPeer a = null;
            if (id == InputDialogPeer2.ID) {
                a = new InputDialogPeer2();
            } else if (id == InputDialogPeerFolder.ID) {
                a = new InputDialogPeerFolder();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DialogPeer extends TLObject {
        public static DialogPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DialogPeer a = null;
            if (id == DialogPeer2.ID) {
                a = new DialogPeer2();
            } else if (id == DialogPeerFolder.ID) {
                a = new DialogPeerFolder();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class FileHash extends TLObject {
        public static FileHash readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            FileHash a = null;
            if (id == FileHash2.ID) {
                a = new FileHash2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputClientProxy extends TLObject {
        public static InputClientProxy readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputClientProxy a = null;
            if (id == InputClientProxy2.ID) {
                a = new InputClientProxy2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputSecureFile extends TLObject {
        public static InputSecureFile readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputSecureFile a = null;
            if (id == InputSecureFileUploaded.ID) {
                a = new InputSecureFileUploaded();
            } else if (id == InputSecureFile2.ID) {
                a = new InputSecureFile2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureFile extends TLObject {
        public static SecureFile readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureFile a = null;
            if (id == SecureFileEmpty.ID) {
                a = new SecureFileEmpty();
            } else if (id == SecureFile2.ID) {
                a = new SecureFile2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureData extends TLObject {
        public static SecureData readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureData a = null;
            if (id == SecureData2.ID) {
                a = new SecureData2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecurePlainData extends TLObject {
        public static SecurePlainData readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecurePlainData a = null;
            if (id == SecurePlainPhone.ID) {
                a = new SecurePlainPhone();
            } else if (id == SecurePlainEmail.ID) {
                a = new SecurePlainEmail();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureValueType extends TLObject {
        public static SecureValueType readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureValueType a = null;
            if (id == SecureValueTypePersonalDetails.ID) {
                a = new SecureValueTypePersonalDetails();
            } else if (id == SecureValueTypePassport.ID) {
                a = new SecureValueTypePassport();
            } else if (id == SecureValueTypeDriverLicense.ID) {
                a = new SecureValueTypeDriverLicense();
            } else if (id == SecureValueTypeIdentityCard.ID) {
                a = new SecureValueTypeIdentityCard();
            } else if (id == SecureValueTypeInternalPassport.ID) {
                a = new SecureValueTypeInternalPassport();
            } else if (id == SecureValueTypeAddress.ID) {
                a = new SecureValueTypeAddress();
            } else if (id == SecureValueTypeUtilityBill.ID) {
                a = new SecureValueTypeUtilityBill();
            } else if (id == SecureValueTypeBankStatement.ID) {
                a = new SecureValueTypeBankStatement();
            } else if (id == SecureValueTypeRentalAgreement.ID) {
                a = new SecureValueTypeRentalAgreement();
            } else if (id == SecureValueTypePassportRegistration.ID) {
                a = new SecureValueTypePassportRegistration();
            } else if (id == SecureValueTypeTemporaryRegistration.ID) {
                a = new SecureValueTypeTemporaryRegistration();
            } else if (id == SecureValueTypePhone.ID) {
                a = new SecureValueTypePhone();
            } else if (id == SecureValueTypeEmail.ID) {
                a = new SecureValueTypeEmail();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureValue extends TLObject {
        public static SecureValue readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureValue a = null;
            if (id == SecureValue2.ID) {
                a = new SecureValue2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputSecureValue extends TLObject {
        public static InputSecureValue readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputSecureValue a = null;
            if (id == InputSecureValue2.ID) {
                a = new InputSecureValue2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureValueHash extends TLObject {
        public static SecureValueHash readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureValueHash a = null;
            if (id == SecureValueHash2.ID) {
                a = new SecureValueHash2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureValueError extends TLObject {
        public static SecureValueError readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureValueError a = null;
            if (id == SecureValueErrorData.ID) {
                a = new SecureValueErrorData();
            } else if (id == SecureValueErrorFrontSide.ID) {
                a = new SecureValueErrorFrontSide();
            } else if (id == SecureValueErrorReverseSide.ID) {
                a = new SecureValueErrorReverseSide();
            } else if (id == SecureValueErrorSelfie.ID) {
                a = new SecureValueErrorSelfie();
            } else if (id == SecureValueErrorFile.ID) {
                a = new SecureValueErrorFile();
            } else if (id == SecureValueErrorFiles.ID) {
                a = new SecureValueErrorFiles();
            } else if (id == SecureValueError2.ID) {
                a = new SecureValueError2();
            } else if (id == SecureValueErrorTranslationFile.ID) {
                a = new SecureValueErrorTranslationFile();
            } else if (id == SecureValueErrorTranslationFiles.ID) {
                a = new SecureValueErrorTranslationFiles();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureCredentialsEncrypted extends TLObject {
        public static SecureCredentialsEncrypted readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureCredentialsEncrypted a = null;
            if (id == SecureCredentialsEncrypted2.ID) {
                a = new SecureCredentialsEncrypted2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SavedContact extends TLObject {
        public static SavedContact readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SavedContact a = null;
            if (id == SavedPhoneContact.ID) {
                a = new SavedPhoneContact();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PasswordKdfAlgo extends TLObject {
        public static PasswordKdfAlgo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PasswordKdfAlgo a = null;
            if (id == PasswordKdfAlgoUnknown.ID) {
                a = new PasswordKdfAlgoUnknown();
            } else if (id == PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow.ID) {
                a = new PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecurePasswordKdfAlgo extends TLObject {
        public static SecurePasswordKdfAlgo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecurePasswordKdfAlgo a = null;
            if (id == SecurePasswordKdfAlgoUnknown.ID) {
                a = new SecurePasswordKdfAlgoUnknown();
            } else if (id == SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000.ID) {
                a = new SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000();
            } else if (id == SecurePasswordKdfAlgoSHA512.ID) {
                a = new SecurePasswordKdfAlgoSHA512();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureSecretSettings extends TLObject {
        public static SecureSecretSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureSecretSettings a = null;
            if (id == SecureSecretSettings2.ID) {
                a = new SecureSecretSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputCheckPasswordSRP extends TLObject {
        public static InputCheckPasswordSRP readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputCheckPasswordSRP a = null;
            if (id == InputCheckPasswordEmpty.ID) {
                a = new InputCheckPasswordEmpty();
            } else if (id == InputCheckPasswordSRP2.ID) {
                a = new InputCheckPasswordSRP2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SecureRequiredType extends TLObject {
        public static SecureRequiredType readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SecureRequiredType a = null;
            if (id == SecureRequiredType2.ID) {
                a = new SecureRequiredType2();
            } else if (id == SecureRequiredTypeOneOf.ID) {
                a = new SecureRequiredTypeOneOf();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputAppEvent extends TLObject {
        public static InputAppEvent readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputAppEvent a = null;
            if (id == InputAppEvent2.ID) {
                a = new InputAppEvent2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class JSONObjectValue extends TLObject {
        public static JSONObjectValue readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            JSONObjectValue a = null;
            if (id == JsonObjectValue2.ID) {
                a = new JsonObjectValue2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class JSONValue extends TLObject {
        public static JSONValue readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            JSONValue a = null;
            if (id == JsonNull.ID) {
                a = new JsonNull();
            } else if (id == JsonBool.ID) {
                a = new JsonBool();
            } else if (id == JsonNumber.ID) {
                a = new JsonNumber();
            } else if (id == JsonString.ID) {
                a = new JsonString();
            } else if (id == JsonArray.ID) {
                a = new JsonArray();
            } else if (id == JsonObject.ID) {
                a = new JsonObject();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageTableCell extends TLObject {
        public static PageTableCell readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageTableCell a = null;
            if (id == PageTableCell2.ID) {
                a = new PageTableCell2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageTableRow extends TLObject {
        public static PageTableRow readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageTableRow a = null;
            if (id == PageTableRow2.ID) {
                a = new PageTableRow2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageCaption extends TLObject {
        public static PageCaption readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageCaption a = null;
            if (id == PageCaption2.ID) {
                a = new PageCaption2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageListItem extends TLObject {
        public static PageListItem readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageListItem a = null;
            if (id == PageListItemText.ID) {
                a = new PageListItemText();
            } else if (id == PageListItemBlocks.ID) {
                a = new PageListItemBlocks();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageListOrderedItem extends TLObject {
        public static PageListOrderedItem readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageListOrderedItem a = null;
            if (id == PageListOrderedItemText.ID) {
                a = new PageListOrderedItemText();
            } else if (id == PageListOrderedItemBlocks.ID) {
                a = new PageListOrderedItemBlocks();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PageRelatedArticle extends TLObject {
        public static PageRelatedArticle readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PageRelatedArticle a = null;
            if (id == PageRelatedArticle2.ID) {
                a = new PageRelatedArticle2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Page extends TLObject {
        public static Page readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Page a = null;
            if (id == Page2.ID) {
                a = new Page2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PollAnswer extends TLObject {
        public static PollAnswer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PollAnswer a = null;
            if (id == PollAnswer2.ID) {
                a = new PollAnswer2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Poll extends TLObject {
        public static Poll readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Poll a = null;
            if (id == Poll2.ID) {
                a = new Poll2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PollAnswerVoters extends TLObject {
        public static PollAnswerVoters readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PollAnswerVoters a = null;
            if (id == PollAnswerVoters2.ID) {
                a = new PollAnswerVoters2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PollResults extends TLObject {
        public static PollResults readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PollResults a = null;
            if (id == PollResults2.ID) {
                a = new PollResults2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatOnlines extends TLObject {
        public static ChatOnlines readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatOnlines a = null;
            if (id == ChatOnlines2.ID) {
                a = new ChatOnlines2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsURL extends TLObject {
        public static StatsURL readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsURL a = null;
            if (id == StatsURL2.ID) {
                a = new StatsURL2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatAdminRights extends TLObject {
        public static ChatAdminRights readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatAdminRights a = null;
            if (id == ChatAdminRights2.ID) {
                a = new ChatAdminRights2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatBannedRights extends TLObject {
        public static ChatBannedRights readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatBannedRights a = null;
            if (id == ChatBannedRights2.ID) {
                a = new ChatBannedRights2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputWallPaper extends TLObject {
        public static InputWallPaper readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputWallPaper a = null;
            if (id == InputWallPaper2.ID) {
                a = new InputWallPaper2();
            } else if (id == InputWallPaperSlug.ID) {
                a = new InputWallPaperSlug();
            } else if (id == InputWallPaperNoFile.ID) {
                a = new InputWallPaperNoFile();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class CodeSettings extends TLObject {
        public static CodeSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            CodeSettings a = null;
            if (id == CodeSettings2.ID) {
                a = new CodeSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WallPaperSettings extends TLObject {
        public static WallPaperSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WallPaperSettings a = null;
            if (id == WallPaperSettings2.ID) {
                a = new WallPaperSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AutoDownloadSettings extends TLObject {
        public static AutoDownloadSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AutoDownloadSettings a = null;
            if (id == AutoDownloadSettings2.ID) {
                a = new AutoDownloadSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EmojiKeyword extends TLObject {
        public static EmojiKeyword readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EmojiKeyword a = null;
            if (id == EmojiKeyword2.ID) {
                a = new EmojiKeyword2();
            } else if (id == EmojiKeywordDeleted.ID) {
                a = new EmojiKeywordDeleted();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EmojiKeywordsDifference extends TLObject {
        public static EmojiKeywordsDifference readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EmojiKeywordsDifference a = null;
            if (id == EmojiKeywordsDifference2.ID) {
                a = new EmojiKeywordsDifference2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EmojiURL extends TLObject {
        public static EmojiURL readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EmojiURL a = null;
            if (id == EmojiURL2.ID) {
                a = new EmojiURL2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class EmojiLanguage extends TLObject {
        public static EmojiLanguage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            EmojiLanguage a = null;
            if (id == EmojiLanguage2.ID) {
                a = new EmojiLanguage2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Folder extends TLObject {
        public static Folder readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Folder a = null;
            if (id == Folder2.ID) {
                a = new Folder2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputFolderPeer extends TLObject {
        public static InputFolderPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputFolderPeer a = null;
            if (id == InputFolderPeer2.ID) {
                a = new InputFolderPeer2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class FolderPeer extends TLObject {
        public static FolderPeer readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            FolderPeer a = null;
            if (id == FolderPeer2.ID) {
                a = new FolderPeer2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class UrlAuthResult extends TLObject {
        public static UrlAuthResult readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            UrlAuthResult a = null;
            if (id == UrlAuthResultRequest.ID) {
                a = new UrlAuthResultRequest();
            } else if (id == UrlAuthResultAccepted.ID) {
                a = new UrlAuthResultAccepted();
            } else if (id == UrlAuthResultDefault.ID) {
                a = new UrlAuthResultDefault();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChannelLocation extends TLObject {
        public static ChannelLocation readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChannelLocation a = null;
            if (id == ChannelLocationEmpty.ID) {
                a = new ChannelLocationEmpty();
            } else if (id == ChannelLocation2.ID) {
                a = new ChannelLocation2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PeerLocated extends TLObject {
        public static PeerLocated readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PeerLocated a = null;
            if (id == PeerLocated2.ID) {
                a = new PeerLocated2();
            } else if (id == PeerSelfLocated.ID) {
                a = new PeerSelfLocated();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class RestrictionReason extends TLObject {
        public static RestrictionReason readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            RestrictionReason a = null;
            if (id == RestrictionReason2.ID) {
                a = new RestrictionReason2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputTheme extends TLObject {
        public static InputTheme readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputTheme a = null;
            if (id == InputTheme2.ID) {
                a = new InputTheme2();
            } else if (id == InputThemeSlug.ID) {
                a = new InputThemeSlug();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class Theme extends TLObject {
        public static Theme readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            Theme a = null;
            if (id == Theme2.ID) {
                a = new Theme2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BaseTheme extends TLObject {
        public static BaseTheme readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BaseTheme a = null;
            if (id == BaseThemeClassic.ID) {
                a = new BaseThemeClassic();
            } else if (id == BaseThemeDay.ID) {
                a = new BaseThemeDay();
            } else if (id == BaseThemeNight.ID) {
                a = new BaseThemeNight();
            } else if (id == BaseThemeTinted.ID) {
                a = new BaseThemeTinted();
            } else if (id == BaseThemeArctic.ID) {
                a = new BaseThemeArctic();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputThemeSettings extends TLObject {
        public static InputThemeSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputThemeSettings a = null;
            if (id == InputThemeSettings2.ID) {
                a = new InputThemeSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ThemeSettings extends TLObject {
        public static ThemeSettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ThemeSettings a = null;
            if (id == ThemeSettings2.ID) {
                a = new ThemeSettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebPageAttribute extends TLObject {
        public static WebPageAttribute readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebPageAttribute a = null;
            if (id == WebPageAttributeTheme.ID) {
                a = new WebPageAttributeTheme();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageUserVote extends TLObject {
        public static MessageUserVote readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageUserVote a = null;
            if (id == MessageUserVote2.ID) {
                a = new MessageUserVote2();
            } else if (id == MessageUserVoteInputOption.ID) {
                a = new MessageUserVoteInputOption();
            } else if (id == MessageUserVoteMultiple.ID) {
                a = new MessageUserVoteMultiple();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BankCardOpenUrl extends TLObject {
        public static BankCardOpenUrl readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BankCardOpenUrl a = null;
            if (id == BankCardOpenUrl2.ID) {
                a = new BankCardOpenUrl2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DialogFilter extends TLObject {
        public static DialogFilter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DialogFilter a = null;
            if (id == DialogFilter2.ID) {
                a = new DialogFilter2();
            } else if (id == DialogFilterDefault.ID) {
                a = new DialogFilterDefault();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class DialogFilterSuggested extends TLObject {
        public static DialogFilterSuggested readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            DialogFilterSuggested a = null;
            if (id == DialogFilterSuggested2.ID) {
                a = new DialogFilterSuggested2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsDateRangeDays extends TLObject {
        public static StatsDateRangeDays readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsDateRangeDays a = null;
            if (id == StatsDateRangeDays2.ID) {
                a = new StatsDateRangeDays2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsAbsValueAndPrev extends TLObject {
        public static StatsAbsValueAndPrev readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsAbsValueAndPrev a = null;
            if (id == StatsAbsValueAndPrev2.ID) {
                a = new StatsAbsValueAndPrev2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsPercentValue extends TLObject {
        public static StatsPercentValue readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsPercentValue a = null;
            if (id == StatsPercentValue2.ID) {
                a = new StatsPercentValue2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsGraph extends TLObject {
        public static StatsGraph readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsGraph a = null;
            if (id == StatsGraphAsync.ID) {
                a = new StatsGraphAsync();
            } else if (id == StatsGraphError.ID) {
                a = new StatsGraphError();
            } else if (id == StatsGraph2.ID) {
                a = new StatsGraph2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageInteractionCounters extends TLObject {
        public static MessageInteractionCounters readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageInteractionCounters a = null;
            if (id == MessageInteractionCounters2.ID) {
                a = new MessageInteractionCounters2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class VideoSize extends TLObject {
        public static VideoSize readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            VideoSize a = null;
            if (id == VideoSize2.ID) {
                a = new VideoSize2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsGroupTopPoster extends TLObject {
        public static StatsGroupTopPoster readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsGroupTopPoster a = null;
            if (id == StatsGroupTopPoster2.ID) {
                a = new StatsGroupTopPoster2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsGroupTopAdmin extends TLObject {
        public static StatsGroupTopAdmin readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsGroupTopAdmin a = null;
            if (id == StatsGroupTopAdmin2.ID) {
                a = new StatsGroupTopAdmin2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class StatsGroupTopInviter extends TLObject {
        public static StatsGroupTopInviter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            StatsGroupTopInviter a = null;
            if (id == StatsGroupTopInviter2.ID) {
                a = new StatsGroupTopInviter2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GlobalPrivacySettings extends TLObject {
        public static GlobalPrivacySettings readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GlobalPrivacySettings a = null;
            if (id == GlobalPrivacySettings2.ID) {
                a = new GlobalPrivacySettings2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageViews extends TLObject {
        public static MessageViews readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageViews a = null;
            if (id == MessageViews2.ID) {
                a = new MessageViews2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageReplyHeader extends TLObject {
        public static MessageReplyHeader readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageReplyHeader a = null;
            if (id == MessageReplyHeader2.ID) {
                a = new MessageReplyHeader2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageReplies extends TLObject {
        public static MessageReplies readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageReplies a = null;
            if (id == MessageReplies2.ID) {
                a = new MessageReplies2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PeerBlocked extends TLObject {
        public static PeerBlocked readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PeerBlocked a = null;
            if (id == PeerBlocked2.ID) {
                a = new PeerBlocked2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GroupCall extends TLObject {
        public static GroupCall readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GroupCall a = null;
            if (id == GroupCallDiscarded.ID) {
                a = new GroupCallDiscarded();
            } else if (id == GroupCall2.ID) {
                a = new GroupCall2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputGroupCall extends TLObject {
        public static InputGroupCall readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputGroupCall a = null;
            if (id == InputGroupCall2.ID) {
                a = new InputGroupCall2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GroupCallParticipant extends TLObject {
        public static GroupCallParticipant readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GroupCallParticipant a = null;
            if (id == GroupCallParticipant2.ID) {
                a = new GroupCallParticipant2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InlineQueryPeerType extends TLObject {
        public static InlineQueryPeerType readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InlineQueryPeerType a = null;
            if (id == InlineQueryPeerTypeSameBotPM.ID) {
                a = new InlineQueryPeerTypeSameBotPM();
            } else if (id == InlineQueryPeerTypePM.ID) {
                a = new InlineQueryPeerTypePM();
            } else if (id == InlineQueryPeerTypeChat.ID) {
                a = new InlineQueryPeerTypeChat();
            } else if (id == InlineQueryPeerTypeMegagroup.ID) {
                a = new InlineQueryPeerTypeMegagroup();
            } else if (id == InlineQueryPeerTypeBroadcast.ID) {
                a = new InlineQueryPeerTypeBroadcast();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatInviteImporter extends TLObject {
        public static ChatInviteImporter readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatInviteImporter a = null;
            if (id == ChatInviteImporter2.ID) {
                a = new ChatInviteImporter2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ChatAdminWithInvites extends TLObject {
        public static ChatAdminWithInvites readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ChatAdminWithInvites a = null;
            if (id == ChatAdminWithInvites2.ID) {
                a = new ChatAdminWithInvites2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GroupCallParticipantVideoSourceGroup extends TLObject {
        public static GroupCallParticipantVideoSourceGroup readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GroupCallParticipantVideoSourceGroup a = null;
            if (id == GroupCallParticipantVideoSourceGroup2.ID) {
                a = new GroupCallParticipantVideoSourceGroup2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GroupCallParticipantVideo extends TLObject {
        public static GroupCallParticipantVideo readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GroupCallParticipantVideo a = null;
            if (id == GroupCallParticipantVideo2.ID) {
                a = new GroupCallParticipantVideo2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotCommandScope extends TLObject {
        public static BotCommandScope readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotCommandScope a = null;
            if (id == BotCommandScopeDefault.ID) {
                a = new BotCommandScopeDefault();
            } else if (id == BotCommandScopeUsers.ID) {
                a = new BotCommandScopeUsers();
            } else if (id == BotCommandScopeChats.ID) {
                a = new BotCommandScopeChats();
            } else if (id == BotCommandScopeChatAdmins.ID) {
                a = new BotCommandScopeChatAdmins();
            } else if (id == BotCommandScopePeer.ID) {
                a = new BotCommandScopePeer();
            } else if (id == BotCommandScopePeerAdmins.ID) {
                a = new BotCommandScopePeerAdmins();
            } else if (id == BotCommandScopePeerUser.ID) {
                a = new BotCommandScopePeerUser();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SponsoredMessage extends TLObject {
        public static SponsoredMessage readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SponsoredMessage a = null;
            if (id == SponsoredMessage2.ID) {
                a = new SponsoredMessage2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SearchResultsCalendarPeriod extends TLObject {
        public static SearchResultsCalendarPeriod readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SearchResultsCalendarPeriod a = null;
            if (id == SearchResultsCalendarPeriod2.ID) {
                a = new SearchResultsCalendarPeriod2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SearchResultsPosition extends TLObject {
        public static SearchResultsPosition readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SearchResultsPosition a = null;
            if (id == SearchResultPosition.ID) {
                a = new SearchResultPosition();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class ReactionCount extends TLObject {
        public static ReactionCount readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            ReactionCount a = null;
            if (id == ReactionCount2.ID) {
                a = new ReactionCount2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessageReactions extends TLObject {
        public static MessageReactions readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessageReactions a = null;
            if (id == MessageReactions2.ID) {
                a = new MessageReactions2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AvailableReaction extends TLObject {
        public static AvailableReaction readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AvailableReaction a = null;
            if (id == AvailableReaction2.ID) {
                a = new AvailableReaction2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class MessagePeerReaction extends TLObject {
        public static MessagePeerReaction readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            MessagePeerReaction a = null;
            if (id == MessagePeerReaction2.ID) {
                a = new MessagePeerReaction2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class GroupCallStreamChannel extends TLObject {
        public static GroupCallStreamChannel readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            GroupCallStreamChannel a = null;
            if (id == GroupCallStreamChannel2.ID) {
                a = new GroupCallStreamChannel2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuBotIconColor extends TLObject {
        public static AttachMenuBotIconColor readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuBotIconColor a = null;
            if (id == AttachMenuBotIconColor2.ID) {
                a = new AttachMenuBotIconColor2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuBotIcon extends TLObject {
        public static AttachMenuBotIcon readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuBotIcon a = null;
            if (id == AttachMenuBotIcon2.ID) {
                a = new AttachMenuBotIcon2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuBot extends TLObject {
        public static AttachMenuBot readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuBot a = null;
            if (id == AttachMenuBot2.ID) {
                a = new AttachMenuBot2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuBots extends TLObject {
        public static AttachMenuBots readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuBots a = null;
            if (id == AttachMenuBotsNotModified.ID) {
                a = new AttachMenuBotsNotModified();
            } else if (id == AttachMenuBots2.ID) {
                a = new AttachMenuBots2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuBotsBot extends TLObject {
        public static AttachMenuBotsBot readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuBotsBot a = null;
            if (id == AttachMenuBotsBot2.ID) {
                a = new AttachMenuBotsBot2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebViewResult extends TLObject {
        public static WebViewResult readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebViewResult a = null;
            if (id == WebViewResultUrl.ID) {
                a = new WebViewResultUrl();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class SimpleWebViewResult extends TLObject {
        public static SimpleWebViewResult readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            SimpleWebViewResult a = null;
            if (id == SimpleWebViewResultUrl.ID) {
                a = new SimpleWebViewResultUrl();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class WebViewMessageSent extends TLObject {
        public static WebViewMessageSent readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            WebViewMessageSent a = null;
            if (id == WebViewMessageSent2.ID) {
                a = new WebViewMessageSent2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class BotMenuButton extends TLObject {
        public static BotMenuButton readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            BotMenuButton a = null;
            if (id == BotMenuButtonDefault.ID) {
                a = new BotMenuButtonDefault();
            } else if (id == BotMenuButtonCommands.ID) {
                a = new BotMenuButtonCommands();
            } else if (id == BotMenuButton2.ID) {
                a = new BotMenuButton2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class NotificationSound extends TLObject {
        public static NotificationSound readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            NotificationSound a = null;
            if (id == NotificationSoundDefault.ID) {
                a = new NotificationSoundDefault();
            } else if (id == NotificationSoundNone.ID) {
                a = new NotificationSoundNone();
            } else if (id == NotificationSoundLocal.ID) {
                a = new NotificationSoundLocal();
            } else if (id == NotificationSoundRingtone.ID) {
                a = new NotificationSoundRingtone();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class AttachMenuPeerType extends TLObject {
        public static AttachMenuPeerType readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            AttachMenuPeerType a = null;
            if (id == AttachMenuPeerTypeSameBotPM.ID) {
                a = new AttachMenuPeerTypeSameBotPM();
            } else if (id == AttachMenuPeerTypeBotPM.ID) {
                a = new AttachMenuPeerTypeBotPM();
            } else if (id == AttachMenuPeerTypePM.ID) {
                a = new AttachMenuPeerTypePM();
            } else if (id == AttachMenuPeerTypeChat.ID) {
                a = new AttachMenuPeerTypeChat();
            } else if (id == AttachMenuPeerTypeBroadcast.ID) {
                a = new AttachMenuPeerTypeBroadcast();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputInvoice extends TLObject {
        public static InputInvoice readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputInvoice a = null;
            if (id == InputInvoiceMessage.ID) {
                a = new InputInvoiceMessage();
            } else if (id == InputInvoiceSlug.ID) {
                a = new InputInvoiceSlug();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class InputStorePaymentPurpose extends TLObject {
        public static InputStorePaymentPurpose readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            InputStorePaymentPurpose a = null;
            if (id == InputStorePaymentPremiumSubscription.ID) {
                a = new InputStorePaymentPremiumSubscription();
            } else if (id == InputStorePaymentGiftPremium.ID) {
                a = new InputStorePaymentGiftPremium();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PremiumGiftOption extends TLObject {
        public static PremiumGiftOption readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PremiumGiftOption a = null;
            if (id == PremiumGiftOption2.ID) {
                a = new PremiumGiftOption2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static abstract class PaymentFormMethod extends TLObject {
        public static PaymentFormMethod readObject(TLInputStream inputStream) throws Exception {
            int id = inputStream.readInt();
            inputStream.position(inputStream.position() - 4);
            PaymentFormMethod a = null;
            if (id == PaymentFormMethod2.ID) {
                a = new PaymentFormMethod2();
            }
            if (a != null) {
                a.read(inputStream);
            }
            return a;
        }
    }

    public static class BoolFalse extends ApiScheme.Bool {
        public static final int ID = 0xbc799737;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "boolFalse";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BoolFalse{" +
                    '}';

        }
    }


    public static class BoolTrue extends ApiScheme.Bool {
        public static final int ID = 0x997275b5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "boolTrue";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BoolTrue{" +
                    '}';

        }
    }


    public static class Error2 extends ApiScheme.Error {
        public static final int ID = 0xc4b9f9bb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "error";
        public int code;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(code);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            code = inputStream.readInt();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "Error{" +
                    "code=" + code +
                    ", text=" + text +
                    '}';

        }
    }


    public static class Null2 extends ApiScheme.Null {
        public static final int ID = 0x56730bcc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "null";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "Null{" +
                    '}';

        }
    }


    public static class InputPeerEmpty extends ApiScheme.InputPeer {
        public static final int ID = 0x7f3b18ea;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPeerEmpty{" +
                    '}';

        }
    }


    public static class InputPeerSelf extends ApiScheme.InputPeer {
        public static final int ID = 0x7da07ec9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerSelf";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPeerSelf{" +
                    '}';

        }
    }


    public static class InputPeerChat extends ApiScheme.InputPeer {
        public static final int ID = 0x35a95cb9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerChat";
        public long chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerChat{" +
                    "chatId=" + chatId +
                    '}';

        }
    }


    public static class InputPeerUser extends ApiScheme.InputPeer {
        public static final int ID = 0xdde8a54c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerUser";
        public long userId;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerUser{" +
                    "userId=" + userId +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputPeerChannel extends ApiScheme.InputPeer {
        public static final int ID = 0x27bcbbfc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerChannel";
        public long channelId;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerChannel{" +
                    "channelId=" + channelId +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputPeerUserFromMessage extends ApiScheme.InputPeer {
        public static final int ID = 0xa87b0a1c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerUserFromMessage";
        public ApiScheme.InputPeer peer;
        public int msgId;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            msgId = inputStream.readInt();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerUserFromMessage{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class InputPeerChannelFromMessage extends ApiScheme.InputPeer {
        public static final int ID = 0xbd2a0840;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerChannelFromMessage";
        public ApiScheme.InputPeer peer;
        public int msgId;
        public long channelId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(channelId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            msgId = inputStream.readInt();
            channelId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerChannelFromMessage{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    ", channelId=" + channelId +
                    '}';

        }
    }


    public static class InputUserEmpty extends ApiScheme.InputUser {
        public static final int ID = 0xb98886cf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputUserEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputUserEmpty{" +
                    '}';

        }
    }


    public static class InputUserSelf extends ApiScheme.InputUser {
        public static final int ID = 0xf7c1b13f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputUserSelf";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputUserSelf{" +
                    '}';

        }
    }


    public static class InputUser2 extends ApiScheme.InputUser {
        public static final int ID = 0xf21158c6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputUser";
        public long userId;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputUser{" +
                    "userId=" + userId +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputUserFromMessage extends ApiScheme.InputUser {
        public static final int ID = 0x1da448e2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputUserFromMessage";
        public ApiScheme.InputPeer peer;
        public int msgId;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            msgId = inputStream.readInt();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputUserFromMessage{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class InputPhoneContact extends ApiScheme.InputContact {
        public static final int ID = 0xf392b7f4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhoneContact";
        public long clientId;
        public String phone;
        public String firstName;
        public String lastName;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(clientId);
            outputStream.writeTLString(phone);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            clientId = inputStream.readLong();
            phone = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputPhoneContact{" +
                    "clientId=" + clientId +
                    ", phone=" + phone +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    '}';

        }
    }


    public static class InputFile2 extends ApiScheme.InputFile {
        public static final int ID = 0xf52ff27f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputFile";
        public long id;
        public int parts;
        public String name;
        public String md5Checksum;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(parts);
            outputStream.writeTLString(name);
            outputStream.writeTLString(md5Checksum);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            parts = inputStream.readInt();
            name = inputStream.readTLString();
            md5Checksum = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputFile{" +
                    "id=" + id +
                    ", parts=" + parts +
                    ", name=" + name +
                    ", md5Checksum=" + md5Checksum +
                    '}';

        }
    }


    public static class InputFileBig extends ApiScheme.InputFile {
        public static final int ID = 0xfa4f0bb5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputFileBig";
        public long id;
        public int parts;
        public String name;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(parts);
            outputStream.writeTLString(name);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            parts = inputStream.readInt();
            name = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputFileBig{" +
                    "id=" + id +
                    ", parts=" + parts +
                    ", name=" + name +
                    '}';

        }
    }


    public static class InputMediaEmpty extends ApiScheme.InputMedia {
        public static final int ID = 0x9664f57f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMediaEmpty{" +
                    '}';

        }
    }


    public static class InputMediaUploadedPhoto extends ApiScheme.InputMedia {
        public static final int ID = 0x1e287d04;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaUploadedPhoto";
        public int flags;
        public ApiScheme.InputFile file;
        public TLVector<ApiScheme.InputDocument> stickers = null;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = stickers != null ? (flags | 1) : (flags & ~1);
            flags = ttlSeconds != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            file.write(outputStream);

            if ((flags & 1) != 0 && stickers != null) {
                stickers.write(outputStream);
            }

            if ((flags & 2) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            file = ApiScheme.InputFile.readObject(inputStream);
            if ((flags & 1) != 0) {
                stickers = new TLVector<ApiScheme.InputDocument>(ApiScheme.InputDocument.class);
                stickers.read(inputStream);
            }

            if ((flags & 2) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaUploadedPhoto{" +
                    "flags=" + flags +
                    ", file=" + file +
                    ", stickers=" + stickers +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class InputMediaPhoto extends ApiScheme.InputMedia {
        public static final int ID = 0xb3ba0635;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaPhoto";
        public int flags;
        public ApiScheme.InputPhoto id;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ttlSeconds != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            id.write(outputStream);

            if ((flags & 1) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = ApiScheme.InputPhoto.readObject(inputStream);
            if ((flags & 1) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaPhoto{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class InputMediaGeoPoint extends ApiScheme.InputMedia {
        public static final int ID = 0xf9c44144;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaGeoPoint";
        public ApiScheme.InputGeoPoint geoPoint;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geoPoint.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputMediaGeoPoint{" +
                    "geoPoint=" + geoPoint +
                    '}';

        }
    }


    public static class InputMediaContact extends ApiScheme.InputMedia {
        public static final int ID = 0xf8ab7dfb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaContact";
        public String phoneNumber;
        public String firstName;
        public String lastName;
        public String vcard;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(phoneNumber);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeTLString(vcard);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phoneNumber = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            vcard = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputMediaContact{" +
                    "phoneNumber=" + phoneNumber +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", vcard=" + vcard +
                    '}';

        }
    }


    public static class InputMediaUploadedDocument extends ApiScheme.InputMedia {
        public static final int ID = 0x5b38c6c1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaUploadedDocument";
        public int flags;
        public True nosoundVideo = null;
        public True forceFile = null;
        public ApiScheme.InputFile file;
        public ApiScheme.InputFile thumb = null;
        public String mimeType;
        public TLVector<ApiScheme.DocumentAttribute> attributes;
        public TLVector<ApiScheme.InputDocument> stickers = null;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = nosoundVideo != null ? (flags | 8) : (flags & ~8);
            flags = forceFile != null ? (flags | 16) : (flags & ~16);
            flags = thumb != null ? (flags | 4) : (flags & ~4);
            flags = stickers != null ? (flags | 1) : (flags & ~1);
            flags = ttlSeconds != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 8) != 0 && nosoundVideo != null) {
                nosoundVideo.isBareType = true;
                nosoundVideo.write(outputStream);
            }

            if ((flags & 16) != 0 && forceFile != null) {
                forceFile.isBareType = true;
                forceFile.write(outputStream);
            }

            file.write(outputStream);

            if ((flags & 4) != 0 && thumb != null) {
                thumb.write(outputStream);
            }

            outputStream.writeTLString(mimeType);
            attributes.write(outputStream);

            if ((flags & 1) != 0 && stickers != null) {
                stickers.write(outputStream);
            }

            if ((flags & 2) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 8) != 0) {
                nosoundVideo = new True();
                nosoundVideo.isBareType = true;
                nosoundVideo.read(inputStream);
            }

            if ((flags & 16) != 0) {
                forceFile = new True();
                forceFile.isBareType = true;
                forceFile.read(inputStream);
            }

            file = ApiScheme.InputFile.readObject(inputStream);
            if ((flags & 4) != 0) {
                thumb = ApiScheme.InputFile.readObject(inputStream);
            }

            mimeType = inputStream.readTLString();
            attributes = new TLVector<ApiScheme.DocumentAttribute>(ApiScheme.DocumentAttribute.class);
            attributes.read(inputStream);

            if ((flags & 1) != 0) {
                stickers = new TLVector<ApiScheme.InputDocument>(ApiScheme.InputDocument.class);
                stickers.read(inputStream);
            }

            if ((flags & 2) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaUploadedDocument{" +
                    "flags=" + flags +
                    ", nosoundVideo=" + nosoundVideo +
                    ", forceFile=" + forceFile +
                    ", file=" + file +
                    ", thumb=" + thumb +
                    ", mimeType=" + mimeType +
                    ", attributes=" + attributes +
                    ", stickers=" + stickers +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class InputMediaDocument extends ApiScheme.InputMedia {
        public static final int ID = 0x33473058;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaDocument";
        public int flags;
        public ApiScheme.InputDocument id;
        public Integer ttlSeconds = null;
        public String query = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ttlSeconds != null ? (flags | 1) : (flags & ~1);
            flags = query != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            id.write(outputStream);

            if ((flags & 1) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }

            if ((flags & 2) != 0 && query != null) {
                outputStream.writeTLString(query);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = ApiScheme.InputDocument.readObject(inputStream);
            if ((flags & 1) != 0) {
                ttlSeconds = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                query = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "InputMediaDocument{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", ttlSeconds=" + ttlSeconds +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InputMediaVenue extends ApiScheme.InputMedia {
        public static final int ID = 0xc13d1c11;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaVenue";
        public ApiScheme.InputGeoPoint geoPoint;
        public String title;
        public String address;
        public String provider;
        public String venueId;
        public String venueType;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geoPoint.write(outputStream);

            outputStream.writeTLString(title);
            outputStream.writeTLString(address);
            outputStream.writeTLString(provider);
            outputStream.writeTLString(venueId);
            outputStream.writeTLString(venueType);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
            title = inputStream.readTLString();
            address = inputStream.readTLString();
            provider = inputStream.readTLString();
            venueId = inputStream.readTLString();
            venueType = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputMediaVenue{" +
                    "geoPoint=" + geoPoint +
                    ", title=" + title +
                    ", address=" + address +
                    ", provider=" + provider +
                    ", venueId=" + venueId +
                    ", venueType=" + venueType +
                    '}';

        }
    }


    public static class InputMediaPhotoExternal extends ApiScheme.InputMedia {
        public static final int ID = 0xe5bbfe1a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaPhotoExternal";
        public int flags;
        public String url;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ttlSeconds != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeTLString(url);
            if ((flags & 1) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            url = inputStream.readTLString();
            if ((flags & 1) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaPhotoExternal{" +
                    "flags=" + flags +
                    ", url=" + url +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class InputMediaDocumentExternal extends ApiScheme.InputMedia {
        public static final int ID = 0xfb52dc99;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaDocumentExternal";
        public int flags;
        public String url;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ttlSeconds != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeTLString(url);
            if ((flags & 1) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            url = inputStream.readTLString();
            if ((flags & 1) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaDocumentExternal{" +
                    "flags=" + flags +
                    ", url=" + url +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class InputMediaGame extends ApiScheme.InputMedia {
        public static final int ID = 0xd33f43f3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaGame";
        public ApiScheme.InputGame id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            id.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = ApiScheme.InputGame.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputMediaGame{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class InputMediaInvoice extends ApiScheme.InputMedia {
        public static final int ID = 0xd9799874;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaInvoice";
        public int flags;
        public String title;
        public String description;
        public ApiScheme.InputWebDocument photo = null;
        public ApiScheme.Invoice invoice;
        public byte[] payload;
        public String provider;
        public ApiScheme.DataJSON providerData;
        public String startParam = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = startParam != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeTLString(title);
            outputStream.writeTLString(description);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            invoice.write(outputStream);

            outputStream.writeTLBytes(payload);
            outputStream.writeTLString(provider);
            providerData.write(outputStream);

            if ((flags & 2) != 0 && startParam != null) {
                outputStream.writeTLString(startParam);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            title = inputStream.readTLString();
            description = inputStream.readTLString();
            if ((flags & 1) != 0) {
                photo = ApiScheme.InputWebDocument.readObject(inputStream);
            }

            invoice = ApiScheme.Invoice.readObject(inputStream);
            payload = inputStream.readTLBytes();
            provider = inputStream.readTLString();
            providerData = ApiScheme.DataJSON.readObject(inputStream);
            if ((flags & 2) != 0) {
                startParam = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "InputMediaInvoice{" +
                    "flags=" + flags +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", invoice=" + invoice +
                    ", payload=" + payload +
                    ", provider=" + provider +
                    ", providerData=" + providerData +
                    ", startParam=" + startParam +
                    '}';

        }
    }


    public static class InputMediaGeoLive extends ApiScheme.InputMedia {
        public static final int ID = 0x971fa843;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaGeoLive";
        public int flags;
        public True stopped = null;
        public ApiScheme.InputGeoPoint geoPoint;
        public Integer heading = null;
        public Integer period = null;
        public Integer proximityNotificationRadius = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = stopped != null ? (flags | 1) : (flags & ~1);
            flags = heading != null ? (flags | 4) : (flags & ~4);
            flags = period != null ? (flags | 2) : (flags & ~2);
            flags = proximityNotificationRadius != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && stopped != null) {
                stopped.isBareType = true;
                stopped.write(outputStream);
            }

            geoPoint.write(outputStream);

            if ((flags & 4) != 0 && heading != null) {
                outputStream.writeInt(heading);
            }

            if ((flags & 2) != 0 && period != null) {
                outputStream.writeInt(period);
            }

            if ((flags & 8) != 0 && proximityNotificationRadius != null) {
                outputStream.writeInt(proximityNotificationRadius);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                stopped = new True();
                stopped.isBareType = true;
                stopped.read(inputStream);
            }

            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
            if ((flags & 4) != 0) {
                heading = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                period = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                proximityNotificationRadius = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputMediaGeoLive{" +
                    "flags=" + flags +
                    ", stopped=" + stopped +
                    ", geoPoint=" + geoPoint +
                    ", heading=" + heading +
                    ", period=" + period +
                    ", proximityNotificationRadius=" + proximityNotificationRadius +
                    '}';

        }
    }


    public static class InputMediaPoll extends ApiScheme.InputMedia {
        public static final int ID = 0xf94e5f1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaPoll";
        public int flags;
        public ApiScheme.Poll poll;
        public TLVector<TLBytes> correctAnswers = null;
        public String solution = null;
        public TLVector<ApiScheme.MessageEntity> solutionEntities = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = correctAnswers != null ? (flags | 1) : (flags & ~1);
            flags = solution != null ? (flags | 2) : (flags & ~2);
            flags = solutionEntities != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            poll.write(outputStream);

            if ((flags & 1) != 0 && correctAnswers != null) {
                correctAnswers.isBareTypeItem = true;
                correctAnswers.write(outputStream);
            }

            if ((flags & 2) != 0 && solution != null) {
                outputStream.writeTLString(solution);
            }

            if ((flags & 2) != 0 && solutionEntities != null) {
                solutionEntities.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            poll = ApiScheme.Poll.readObject(inputStream);
            if ((flags & 1) != 0) {
                correctAnswers = new TLVector<TLBytes>(TLBytes.class);
                correctAnswers.isBareTypeItem = true;
                correctAnswers.read(inputStream);
            }

            if ((flags & 2) != 0) {
                solution = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                solutionEntities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                solutionEntities.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputMediaPoll{" +
                    "flags=" + flags +
                    ", poll=" + poll +
                    ", correctAnswers=" + correctAnswers +
                    ", solution=" + solution +
                    ", solutionEntities=" + solutionEntities +
                    '}';

        }
    }


    public static class InputMediaDice extends ApiScheme.InputMedia {
        public static final int ID = 0xe66fbf7b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMediaDice";
        public String emoticon;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputMediaDice{" +
                    "emoticon=" + emoticon +
                    '}';

        }
    }


    public static class InputChatPhotoEmpty extends ApiScheme.InputChatPhoto {
        public static final int ID = 0x1ca48f57;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChatPhotoEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputChatPhotoEmpty{" +
                    '}';

        }
    }


    public static class InputChatUploadedPhoto extends ApiScheme.InputChatPhoto {
        public static final int ID = 0xc642724e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChatUploadedPhoto";
        public int flags;
        public ApiScheme.InputFile file = null;
        public ApiScheme.InputFile video = null;
        public Double videoStartTs = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = file != null ? (flags | 1) : (flags & ~1);
            flags = video != null ? (flags | 2) : (flags & ~2);
            flags = videoStartTs != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && file != null) {
                file.write(outputStream);
            }

            if ((flags & 2) != 0 && video != null) {
                video.write(outputStream);
            }

            if ((flags & 4) != 0 && videoStartTs != null) {
                outputStream.writeDouble(videoStartTs);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                file = ApiScheme.InputFile.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                video = ApiScheme.InputFile.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                videoStartTs = inputStream.readDouble();
            }


        }

        @Override
        public String toString() {
            return "InputChatUploadedPhoto{" +
                    "flags=" + flags +
                    ", file=" + file +
                    ", video=" + video +
                    ", videoStartTs=" + videoStartTs +
                    '}';

        }
    }


    public static class InputChatPhoto2 extends ApiScheme.InputChatPhoto {
        public static final int ID = 0x8953ad37;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChatPhoto";
        public ApiScheme.InputPhoto id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            id.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = ApiScheme.InputPhoto.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputChatPhoto{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class InputGeoPointEmpty extends ApiScheme.InputGeoPoint {
        public static final int ID = 0xe4c123d6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGeoPointEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputGeoPointEmpty{" +
                    '}';

        }
    }


    public static class InputGeoPoint2 extends ApiScheme.InputGeoPoint {
        public static final int ID = 0x48222faf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGeoPoint";
        public int flags;
        public double lat;
        public double mLong;
        public Integer accuracyRadius = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = accuracyRadius != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeDouble(lat);
            outputStream.writeDouble(mLong);
            if ((flags & 1) != 0 && accuracyRadius != null) {
                outputStream.writeInt(accuracyRadius);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            lat = inputStream.readDouble();
            mLong = inputStream.readDouble();
            if ((flags & 1) != 0) {
                accuracyRadius = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputGeoPoint{" +
                    "flags=" + flags +
                    ", lat=" + lat +
                    ", mLong=" + mLong +
                    ", accuracyRadius=" + accuracyRadius +
                    '}';

        }
    }


    public static class InputPhotoEmpty extends ApiScheme.InputPhoto {
        public static final int ID = 0x1cd7bf0d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhotoEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPhotoEmpty{" +
                    '}';

        }
    }


    public static class InputPhoto2 extends ApiScheme.InputPhoto {
        public static final int ID = 0x3bb3b94a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhoto";
        public long id;
        public long accessHash;
        public byte[] fileReference;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputPhoto{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    '}';

        }
    }


    public static class InputFileLocation2 extends ApiScheme.InputFileLocation {
        public static final int ID = 0xdfdaabe1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputFileLocation";
        public long volumeId;
        public int localId;
        public long secret;
        public byte[] fileReference;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(volumeId);
            outputStream.writeInt(localId);
            outputStream.writeLong(secret);
            outputStream.writeTLBytes(fileReference);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            volumeId = inputStream.readLong();
            localId = inputStream.readInt();
            secret = inputStream.readLong();
            fileReference = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputFileLocation{" +
                    "volumeId=" + volumeId +
                    ", localId=" + localId +
                    ", secret=" + secret +
                    ", fileReference=" + fileReference +
                    '}';

        }
    }


    public static class InputEncryptedFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0xf5235d55;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedFileLocation";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputEncryptedFileLocation{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputDocumentFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0xbad07584;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputDocumentFileLocation";
        public long id;
        public long accessHash;
        public byte[] fileReference;
        public String thumbSize;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);
            outputStream.writeTLString(thumbSize);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();
            thumbSize = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputDocumentFileLocation{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    ", thumbSize=" + thumbSize +
                    '}';

        }
    }


    public static class InputSecureFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0xcbc7ee28;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputSecureFileLocation";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputSecureFileLocation{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputTakeoutFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0x29be5899;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputTakeoutFileLocation";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputTakeoutFileLocation{" +
                    '}';

        }
    }


    public static class InputPhotoFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0x40181ffe;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhotoFileLocation";
        public long id;
        public long accessHash;
        public byte[] fileReference;
        public String thumbSize;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);
            outputStream.writeTLString(thumbSize);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();
            thumbSize = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputPhotoFileLocation{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    ", thumbSize=" + thumbSize +
                    '}';

        }
    }


    public static class InputPhotoLegacyFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0xd83466f3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhotoLegacyFileLocation";
        public long id;
        public long accessHash;
        public byte[] fileReference;
        public long volumeId;
        public int localId;
        public long secret;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);
            outputStream.writeLong(volumeId);
            outputStream.writeInt(localId);
            outputStream.writeLong(secret);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();
            volumeId = inputStream.readLong();
            localId = inputStream.readInt();
            secret = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPhotoLegacyFileLocation{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    ", volumeId=" + volumeId +
                    ", localId=" + localId +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class InputPeerPhotoFileLocation extends ApiScheme.InputFileLocation {
        public static final int ID = 0x37257e99;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerPhotoFileLocation";
        public int flags;
        public True big = null;
        public ApiScheme.InputPeer peer;
        public long photoId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = big != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && big != null) {
                big.isBareType = true;
                big.write(outputStream);
            }

            peer.write(outputStream);

            outputStream.writeLong(photoId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                big = new True();
                big.isBareType = true;
                big.read(inputStream);
            }

            peer = ApiScheme.InputPeer.readObject(inputStream);
            photoId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPeerPhotoFileLocation{" +
                    "flags=" + flags +
                    ", big=" + big +
                    ", peer=" + peer +
                    ", photoId=" + photoId +
                    '}';

        }
    }


    public static class InputStickerSetThumb extends ApiScheme.InputFileLocation {
        public static final int ID = 0x9d84f3db;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetThumb";
        public ApiScheme.InputStickerSet stickerset;
        public int thumbVersion;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            stickerset.write(outputStream);

            outputStream.writeInt(thumbVersion);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
            thumbVersion = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputStickerSetThumb{" +
                    "stickerset=" + stickerset +
                    ", thumbVersion=" + thumbVersion +
                    '}';

        }
    }


    public static class InputGroupCallStream extends ApiScheme.InputFileLocation {
        public static final int ID = 0x598a92a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGroupCallStream";
        public int flags;
        public ApiScheme.InputGroupCall call;
        public long timeMs;
        public int scale;
        public Integer videoChannel = null;
        public Integer videoQuality = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = videoChannel != null ? (flags | 1) : (flags & ~1);
            flags = videoQuality != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            call.write(outputStream);

            outputStream.writeLong(timeMs);
            outputStream.writeInt(scale);
            if ((flags & 1) != 0 && videoChannel != null) {
                outputStream.writeInt(videoChannel);
            }

            if ((flags & 1) != 0 && videoQuality != null) {
                outputStream.writeInt(videoQuality);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            call = ApiScheme.InputGroupCall.readObject(inputStream);
            timeMs = inputStream.readLong();
            scale = inputStream.readInt();
            if ((flags & 1) != 0) {
                videoChannel = inputStream.readInt();
            }

            if ((flags & 1) != 0) {
                videoQuality = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "InputGroupCallStream{" +
                    "flags=" + flags +
                    ", call=" + call +
                    ", timeMs=" + timeMs +
                    ", scale=" + scale +
                    ", videoChannel=" + videoChannel +
                    ", videoQuality=" + videoQuality +
                    '}';

        }
    }


    public static class PeerUser extends ApiScheme.Peer {
        public static final int ID = 0x59511722;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerUser";
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "PeerUser{" +
                    "userId=" + userId +
                    '}';

        }
    }


    public static class PeerChat extends ApiScheme.Peer {
        public static final int ID = 0x36c6019a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerChat";
        public long chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "PeerChat{" +
                    "chatId=" + chatId +
                    '}';

        }
    }


    public static class PeerChannel extends ApiScheme.Peer {
        public static final int ID = 0xa2a5371e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerChannel";
        public long channelId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "PeerChannel{" +
                    "channelId=" + channelId +
                    '}';

        }
    }


    public static class UserEmpty extends ApiScheme.User {
        public static final int ID = 0xd3bc4b7a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UserEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class User2 extends ApiScheme.User {
        public static final int ID = 0x3ff6ecb0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "user";
        public int flags;
        public True self = null;
        public True contact = null;
        public True mutualContact = null;
        public True deleted = null;
        public True bot = null;
        public True botChatHistory = null;
        public True botNochats = null;
        public True verified = null;
        public True restricted = null;
        public True min = null;
        public True botInlineGeo = null;
        public True support = null;
        public True scam = null;
        public True applyMinPhoto = null;
        public True fake = null;
        public True botAttachMenu = null;
        public True premium = null;
        public True attachMenuEnabled = null;
        public long id;
        public Long accessHash = null;
        public String firstName = null;
        public String lastName = null;
        public String username = null;
        public String phone = null;
        public ApiScheme.UserProfilePhoto photo = null;
        public ApiScheme.UserStatus status = null;
        public Integer botInfoVersion = null;
        public TLVector<ApiScheme.RestrictionReason> restrictionReason = null;
        public String botInlinePlaceholder = null;
        public String langCode = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = self != null ? (flags | 1024) : (flags & ~1024);
            flags = contact != null ? (flags | 2048) : (flags & ~2048);
            flags = mutualContact != null ? (flags | 4096) : (flags & ~4096);
            flags = deleted != null ? (flags | 8192) : (flags & ~8192);
            flags = bot != null ? (flags | 16384) : (flags & ~16384);
            flags = botChatHistory != null ? (flags | 32768) : (flags & ~32768);
            flags = botNochats != null ? (flags | 65536) : (flags & ~65536);
            flags = verified != null ? (flags | 131072) : (flags & ~131072);
            flags = restricted != null ? (flags | 262144) : (flags & ~262144);
            flags = min != null ? (flags | 1048576) : (flags & ~1048576);
            flags = botInlineGeo != null ? (flags | 2097152) : (flags & ~2097152);
            flags = support != null ? (flags | 8388608) : (flags & ~8388608);
            flags = scam != null ? (flags | 16777216) : (flags & ~16777216);
            flags = applyMinPhoto != null ? (flags | 33554432) : (flags & ~33554432);
            flags = fake != null ? (flags | 67108864) : (flags & ~67108864);
            flags = botAttachMenu != null ? (flags | 134217728) : (flags & ~134217728);
            flags = premium != null ? (flags | 268435456) : (flags & ~268435456);
            flags = attachMenuEnabled != null ? (flags | 536870912) : (flags & ~536870912);
            flags = accessHash != null ? (flags | 1) : (flags & ~1);
            flags = firstName != null ? (flags | 2) : (flags & ~2);
            flags = lastName != null ? (flags | 4) : (flags & ~4);
            flags = username != null ? (flags | 8) : (flags & ~8);
            flags = phone != null ? (flags | 16) : (flags & ~16);
            flags = photo != null ? (flags | 32) : (flags & ~32);
            flags = status != null ? (flags | 64) : (flags & ~64);
            flags = botInfoVersion != null ? (flags | 16384) : (flags & ~16384);
            flags = restrictionReason != null ? (flags | 262144) : (flags & ~262144);
            flags = botInlinePlaceholder != null ? (flags | 524288) : (flags & ~524288);
            flags = langCode != null ? (flags | 4194304) : (flags & ~4194304);
            outputStream.writeInt(flags);
            if ((flags & 1024) != 0 && self != null) {
                self.isBareType = true;
                self.write(outputStream);
            }

            if ((flags & 2048) != 0 && contact != null) {
                contact.isBareType = true;
                contact.write(outputStream);
            }

            if ((flags & 4096) != 0 && mutualContact != null) {
                mutualContact.isBareType = true;
                mutualContact.write(outputStream);
            }

            if ((flags & 8192) != 0 && deleted != null) {
                deleted.isBareType = true;
                deleted.write(outputStream);
            }

            if ((flags & 16384) != 0 && bot != null) {
                bot.isBareType = true;
                bot.write(outputStream);
            }

            if ((flags & 32768) != 0 && botChatHistory != null) {
                botChatHistory.isBareType = true;
                botChatHistory.write(outputStream);
            }

            if ((flags & 65536) != 0 && botNochats != null) {
                botNochats.isBareType = true;
                botNochats.write(outputStream);
            }

            if ((flags & 131072) != 0 && verified != null) {
                verified.isBareType = true;
                verified.write(outputStream);
            }

            if ((flags & 262144) != 0 && restricted != null) {
                restricted.isBareType = true;
                restricted.write(outputStream);
            }

            if ((flags & 1048576) != 0 && min != null) {
                min.isBareType = true;
                min.write(outputStream);
            }

            if ((flags & 2097152) != 0 && botInlineGeo != null) {
                botInlineGeo.isBareType = true;
                botInlineGeo.write(outputStream);
            }

            if ((flags & 8388608) != 0 && support != null) {
                support.isBareType = true;
                support.write(outputStream);
            }

            if ((flags & 16777216) != 0 && scam != null) {
                scam.isBareType = true;
                scam.write(outputStream);
            }

            if ((flags & 33554432) != 0 && applyMinPhoto != null) {
                applyMinPhoto.isBareType = true;
                applyMinPhoto.write(outputStream);
            }

            if ((flags & 67108864) != 0 && fake != null) {
                fake.isBareType = true;
                fake.write(outputStream);
            }

            if ((flags & 134217728) != 0 && botAttachMenu != null) {
                botAttachMenu.isBareType = true;
                botAttachMenu.write(outputStream);
            }

            if ((flags & 268435456) != 0 && premium != null) {
                premium.isBareType = true;
                premium.write(outputStream);
            }

            if ((flags & 536870912) != 0 && attachMenuEnabled != null) {
                attachMenuEnabled.isBareType = true;
                attachMenuEnabled.write(outputStream);
            }

            outputStream.writeLong(id);
            if ((flags & 1) != 0 && accessHash != null) {
                outputStream.writeLong(accessHash);
            }

            if ((flags & 2) != 0 && firstName != null) {
                outputStream.writeTLString(firstName);
            }

            if ((flags & 4) != 0 && lastName != null) {
                outputStream.writeTLString(lastName);
            }

            if ((flags & 8) != 0 && username != null) {
                outputStream.writeTLString(username);
            }

            if ((flags & 16) != 0 && phone != null) {
                outputStream.writeTLString(phone);
            }

            if ((flags & 32) != 0 && photo != null) {
                photo.write(outputStream);
            }

            if ((flags & 64) != 0 && status != null) {
                status.write(outputStream);
            }

            if ((flags & 16384) != 0 && botInfoVersion != null) {
                outputStream.writeInt(botInfoVersion);
            }

            if ((flags & 262144) != 0 && restrictionReason != null) {
                restrictionReason.write(outputStream);
            }

            if ((flags & 524288) != 0 && botInlinePlaceholder != null) {
                outputStream.writeTLString(botInlinePlaceholder);
            }

            if ((flags & 4194304) != 0 && langCode != null) {
                outputStream.writeTLString(langCode);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1024) != 0) {
                self = new True();
                self.isBareType = true;
                self.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                contact = new True();
                contact.isBareType = true;
                contact.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                mutualContact = new True();
                mutualContact.isBareType = true;
                mutualContact.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                deleted = new True();
                deleted.isBareType = true;
                deleted.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                bot = new True();
                bot.isBareType = true;
                bot.read(inputStream);
            }

            if ((flags & 32768) != 0) {
                botChatHistory = new True();
                botChatHistory.isBareType = true;
                botChatHistory.read(inputStream);
            }

            if ((flags & 65536) != 0) {
                botNochats = new True();
                botNochats.isBareType = true;
                botNochats.read(inputStream);
            }

            if ((flags & 131072) != 0) {
                verified = new True();
                verified.isBareType = true;
                verified.read(inputStream);
            }

            if ((flags & 262144) != 0) {
                restricted = new True();
                restricted.isBareType = true;
                restricted.read(inputStream);
            }

            if ((flags & 1048576) != 0) {
                min = new True();
                min.isBareType = true;
                min.read(inputStream);
            }

            if ((flags & 2097152) != 0) {
                botInlineGeo = new True();
                botInlineGeo.isBareType = true;
                botInlineGeo.read(inputStream);
            }

            if ((flags & 8388608) != 0) {
                support = new True();
                support.isBareType = true;
                support.read(inputStream);
            }

            if ((flags & 16777216) != 0) {
                scam = new True();
                scam.isBareType = true;
                scam.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                applyMinPhoto = new True();
                applyMinPhoto.isBareType = true;
                applyMinPhoto.read(inputStream);
            }

            if ((flags & 67108864) != 0) {
                fake = new True();
                fake.isBareType = true;
                fake.read(inputStream);
            }

            if ((flags & 134217728) != 0) {
                botAttachMenu = new True();
                botAttachMenu.isBareType = true;
                botAttachMenu.read(inputStream);
            }

            if ((flags & 268435456) != 0) {
                premium = new True();
                premium.isBareType = true;
                premium.read(inputStream);
            }

            if ((flags & 536870912) != 0) {
                attachMenuEnabled = new True();
                attachMenuEnabled.isBareType = true;
                attachMenuEnabled.read(inputStream);
            }

            id = inputStream.readLong();
            if ((flags & 1) != 0) {
                accessHash = inputStream.readLong();
            }

            if ((flags & 2) != 0) {
                firstName = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                lastName = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                username = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                phone = inputStream.readTLString();
            }

            if ((flags & 32) != 0) {
                photo = ApiScheme.UserProfilePhoto.readObject(inputStream);
            }

            if ((flags & 64) != 0) {
                status = ApiScheme.UserStatus.readObject(inputStream);
            }

            if ((flags & 16384) != 0) {
                botInfoVersion = inputStream.readInt();
            }

            if ((flags & 262144) != 0) {
                restrictionReason = new TLVector<ApiScheme.RestrictionReason>(ApiScheme.RestrictionReason.class);
                restrictionReason.read(inputStream);
            }

            if ((flags & 524288) != 0) {
                botInlinePlaceholder = inputStream.readTLString();
            }

            if ((flags & 4194304) != 0) {
                langCode = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "User{" +
                    "flags=" + flags +
                    ", self=" + self +
                    ", contact=" + contact +
                    ", mutualContact=" + mutualContact +
                    ", deleted=" + deleted +
                    ", bot=" + bot +
                    ", botChatHistory=" + botChatHistory +
                    ", botNochats=" + botNochats +
                    ", verified=" + verified +
                    ", restricted=" + restricted +
                    ", min=" + min +
                    ", botInlineGeo=" + botInlineGeo +
                    ", support=" + support +
                    ", scam=" + scam +
                    ", applyMinPhoto=" + applyMinPhoto +
                    ", fake=" + fake +
                    ", botAttachMenu=" + botAttachMenu +
                    ", premium=" + premium +
                    ", attachMenuEnabled=" + attachMenuEnabled +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", username=" + username +
                    ", phone=" + phone +
                    ", photo=" + photo +
                    ", status=" + status +
                    ", botInfoVersion=" + botInfoVersion +
                    ", restrictionReason=" + restrictionReason +
                    ", botInlinePlaceholder=" + botInlinePlaceholder +
                    ", langCode=" + langCode +
                    '}';

        }
    }


    public static class UserProfilePhotoEmpty extends ApiScheme.UserProfilePhoto {
        public static final int ID = 0x4f11bae1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userProfilePhotoEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UserProfilePhotoEmpty{" +
                    '}';

        }
    }


    public static class UserProfilePhoto2 extends ApiScheme.UserProfilePhoto {
        public static final int ID = 0x82d1f706;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userProfilePhoto";
        public int flags;
        public True hasVideo = null;
        public long photoId;
        public byte[] strippedThumb = null;
        public int dcId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = hasVideo != null ? (flags | 1) : (flags & ~1);
            flags = strippedThumb != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && hasVideo != null) {
                hasVideo.isBareType = true;
                hasVideo.write(outputStream);
            }

            outputStream.writeLong(photoId);
            if ((flags & 2) != 0 && strippedThumb != null) {
                outputStream.writeTLBytes(strippedThumb);
            }

            outputStream.writeInt(dcId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                hasVideo = new True();
                hasVideo.isBareType = true;
                hasVideo.read(inputStream);
            }

            photoId = inputStream.readLong();
            if ((flags & 2) != 0) {
                strippedThumb = inputStream.readTLBytes();
            }

            dcId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UserProfilePhoto{" +
                    "flags=" + flags +
                    ", hasVideo=" + hasVideo +
                    ", photoId=" + photoId +
                    ", strippedThumb=" + strippedThumb +
                    ", dcId=" + dcId +
                    '}';

        }
    }


    public static class UserStatusEmpty extends ApiScheme.UserStatus {
        public static final int ID = 0x9d05049;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UserStatusEmpty{" +
                    '}';

        }
    }


    public static class UserStatusOnline extends ApiScheme.UserStatus {
        public static final int ID = 0xedb93949;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusOnline";
        public int expires;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(expires);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            expires = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UserStatusOnline{" +
                    "expires=" + expires +
                    '}';

        }
    }


    public static class UserStatusOffline extends ApiScheme.UserStatus {
        public static final int ID = 0x8c703f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusOffline";
        public int wasOnline;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(wasOnline);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            wasOnline = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UserStatusOffline{" +
                    "wasOnline=" + wasOnline +
                    '}';

        }
    }


    public static class UserStatusRecently extends ApiScheme.UserStatus {
        public static final int ID = 0xe26f42f1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusRecently";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UserStatusRecently{" +
                    '}';

        }
    }


    public static class UserStatusLastWeek extends ApiScheme.UserStatus {
        public static final int ID = 0x7bf09fc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusLastWeek";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UserStatusLastWeek{" +
                    '}';

        }
    }


    public static class UserStatusLastMonth extends ApiScheme.UserStatus {
        public static final int ID = 0x77ebc742;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userStatusLastMonth";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UserStatusLastMonth{" +
                    '}';

        }
    }


    public static class ChatEmpty extends ApiScheme.Chat {
        public static final int ID = 0x29562865;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "ChatEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class Chat2 extends ApiScheme.Chat {
        public static final int ID = 0x41cbf256;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chat";
        public int flags;
        public True creator = null;
        public True left = null;
        public True deactivated = null;
        public True callActive = null;
        public True callNotEmpty = null;
        public True noforwards = null;
        public long id;
        public String title;
        public ApiScheme.ChatPhoto photo;
        public int participantsCount;
        public int date;
        public int version;
        public ApiScheme.InputChannel migratedTo = null;
        public ApiScheme.ChatAdminRights adminRights = null;
        public ApiScheme.ChatBannedRights defaultBannedRights = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = creator != null ? (flags | 1) : (flags & ~1);
            flags = left != null ? (flags | 4) : (flags & ~4);
            flags = deactivated != null ? (flags | 32) : (flags & ~32);
            flags = callActive != null ? (flags | 8388608) : (flags & ~8388608);
            flags = callNotEmpty != null ? (flags | 16777216) : (flags & ~16777216);
            flags = noforwards != null ? (flags | 33554432) : (flags & ~33554432);
            flags = migratedTo != null ? (flags | 64) : (flags & ~64);
            flags = adminRights != null ? (flags | 16384) : (flags & ~16384);
            flags = defaultBannedRights != null ? (flags | 262144) : (flags & ~262144);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && creator != null) {
                creator.isBareType = true;
                creator.write(outputStream);
            }

            if ((flags & 4) != 0 && left != null) {
                left.isBareType = true;
                left.write(outputStream);
            }

            if ((flags & 32) != 0 && deactivated != null) {
                deactivated.isBareType = true;
                deactivated.write(outputStream);
            }

            if ((flags & 8388608) != 0 && callActive != null) {
                callActive.isBareType = true;
                callActive.write(outputStream);
            }

            if ((flags & 16777216) != 0 && callNotEmpty != null) {
                callNotEmpty.isBareType = true;
                callNotEmpty.write(outputStream);
            }

            if ((flags & 33554432) != 0 && noforwards != null) {
                noforwards.isBareType = true;
                noforwards.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeTLString(title);
            photo.write(outputStream);

            outputStream.writeInt(participantsCount);
            outputStream.writeInt(date);
            outputStream.writeInt(version);
            if ((flags & 64) != 0 && migratedTo != null) {
                migratedTo.write(outputStream);
            }

            if ((flags & 16384) != 0 && adminRights != null) {
                adminRights.write(outputStream);
            }

            if ((flags & 262144) != 0 && defaultBannedRights != null) {
                defaultBannedRights.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                creator = new True();
                creator.isBareType = true;
                creator.read(inputStream);
            }

            if ((flags & 4) != 0) {
                left = new True();
                left.isBareType = true;
                left.read(inputStream);
            }

            if ((flags & 32) != 0) {
                deactivated = new True();
                deactivated.isBareType = true;
                deactivated.read(inputStream);
            }

            if ((flags & 8388608) != 0) {
                callActive = new True();
                callActive.isBareType = true;
                callActive.read(inputStream);
            }

            if ((flags & 16777216) != 0) {
                callNotEmpty = new True();
                callNotEmpty.isBareType = true;
                callNotEmpty.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                noforwards = new True();
                noforwards.isBareType = true;
                noforwards.read(inputStream);
            }

            id = inputStream.readLong();
            title = inputStream.readTLString();
            photo = ApiScheme.ChatPhoto.readObject(inputStream);
            participantsCount = inputStream.readInt();
            date = inputStream.readInt();
            version = inputStream.readInt();
            if ((flags & 64) != 0) {
                migratedTo = ApiScheme.InputChannel.readObject(inputStream);
            }

            if ((flags & 16384) != 0) {
                adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            }

            if ((flags & 262144) != 0) {
                defaultBannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "Chat{" +
                    "flags=" + flags +
                    ", creator=" + creator +
                    ", left=" + left +
                    ", deactivated=" + deactivated +
                    ", callActive=" + callActive +
                    ", callNotEmpty=" + callNotEmpty +
                    ", noforwards=" + noforwards +
                    ", id=" + id +
                    ", title=" + title +
                    ", photo=" + photo +
                    ", participantsCount=" + participantsCount +
                    ", date=" + date +
                    ", version=" + version +
                    ", migratedTo=" + migratedTo +
                    ", adminRights=" + adminRights +
                    ", defaultBannedRights=" + defaultBannedRights +
                    '}';

        }
    }


    public static class ChatForbidden extends ApiScheme.Chat {
        public static final int ID = 0x6592a1a7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatForbidden";
        public long id;
        public String title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeTLString(title);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            title = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChatForbidden{" +
                    "id=" + id +
                    ", title=" + title +
                    '}';

        }
    }


    public static class Channel extends ApiScheme.Chat {
        public static final int ID = 0x8261ac61;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channel";
        public int flags;
        public True creator = null;
        public True left = null;
        public True broadcast = null;
        public True verified = null;
        public True megagroup = null;
        public True restricted = null;
        public True signatures = null;
        public True min = null;
        public True scam = null;
        public True hasLink = null;
        public True hasGeo = null;
        public True slowmodeEnabled = null;
        public True callActive = null;
        public True callNotEmpty = null;
        public True fake = null;
        public True gigagroup = null;
        public True noforwards = null;
        public True joinToSend = null;
        public True joinRequest = null;
        public long id;
        public Long accessHash = null;
        public String title;
        public String username = null;
        public ApiScheme.ChatPhoto photo;
        public int date;
        public TLVector<ApiScheme.RestrictionReason> restrictionReason = null;
        public ApiScheme.ChatAdminRights adminRights = null;
        public ApiScheme.ChatBannedRights bannedRights = null;
        public ApiScheme.ChatBannedRights defaultBannedRights = null;
        public Integer participantsCount = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = creator != null ? (flags | 1) : (flags & ~1);
            flags = left != null ? (flags | 4) : (flags & ~4);
            flags = broadcast != null ? (flags | 32) : (flags & ~32);
            flags = verified != null ? (flags | 128) : (flags & ~128);
            flags = megagroup != null ? (flags | 256) : (flags & ~256);
            flags = restricted != null ? (flags | 512) : (flags & ~512);
            flags = signatures != null ? (flags | 2048) : (flags & ~2048);
            flags = min != null ? (flags | 4096) : (flags & ~4096);
            flags = scam != null ? (flags | 524288) : (flags & ~524288);
            flags = hasLink != null ? (flags | 1048576) : (flags & ~1048576);
            flags = hasGeo != null ? (flags | 2097152) : (flags & ~2097152);
            flags = slowmodeEnabled != null ? (flags | 4194304) : (flags & ~4194304);
            flags = callActive != null ? (flags | 8388608) : (flags & ~8388608);
            flags = callNotEmpty != null ? (flags | 16777216) : (flags & ~16777216);
            flags = fake != null ? (flags | 33554432) : (flags & ~33554432);
            flags = gigagroup != null ? (flags | 67108864) : (flags & ~67108864);
            flags = noforwards != null ? (flags | 134217728) : (flags & ~134217728);
            flags = joinToSend != null ? (flags | 268435456) : (flags & ~268435456);
            flags = joinRequest != null ? (flags | 536870912) : (flags & ~536870912);
            flags = accessHash != null ? (flags | 8192) : (flags & ~8192);
            flags = username != null ? (flags | 64) : (flags & ~64);
            flags = restrictionReason != null ? (flags | 512) : (flags & ~512);
            flags = adminRights != null ? (flags | 16384) : (flags & ~16384);
            flags = bannedRights != null ? (flags | 32768) : (flags & ~32768);
            flags = defaultBannedRights != null ? (flags | 262144) : (flags & ~262144);
            flags = participantsCount != null ? (flags | 131072) : (flags & ~131072);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && creator != null) {
                creator.isBareType = true;
                creator.write(outputStream);
            }

            if ((flags & 4) != 0 && left != null) {
                left.isBareType = true;
                left.write(outputStream);
            }

            if ((flags & 32) != 0 && broadcast != null) {
                broadcast.isBareType = true;
                broadcast.write(outputStream);
            }

            if ((flags & 128) != 0 && verified != null) {
                verified.isBareType = true;
                verified.write(outputStream);
            }

            if ((flags & 256) != 0 && megagroup != null) {
                megagroup.isBareType = true;
                megagroup.write(outputStream);
            }

            if ((flags & 512) != 0 && restricted != null) {
                restricted.isBareType = true;
                restricted.write(outputStream);
            }

            if ((flags & 2048) != 0 && signatures != null) {
                signatures.isBareType = true;
                signatures.write(outputStream);
            }

            if ((flags & 4096) != 0 && min != null) {
                min.isBareType = true;
                min.write(outputStream);
            }

            if ((flags & 524288) != 0 && scam != null) {
                scam.isBareType = true;
                scam.write(outputStream);
            }

            if ((flags & 1048576) != 0 && hasLink != null) {
                hasLink.isBareType = true;
                hasLink.write(outputStream);
            }

            if ((flags & 2097152) != 0 && hasGeo != null) {
                hasGeo.isBareType = true;
                hasGeo.write(outputStream);
            }

            if ((flags & 4194304) != 0 && slowmodeEnabled != null) {
                slowmodeEnabled.isBareType = true;
                slowmodeEnabled.write(outputStream);
            }

            if ((flags & 8388608) != 0 && callActive != null) {
                callActive.isBareType = true;
                callActive.write(outputStream);
            }

            if ((flags & 16777216) != 0 && callNotEmpty != null) {
                callNotEmpty.isBareType = true;
                callNotEmpty.write(outputStream);
            }

            if ((flags & 33554432) != 0 && fake != null) {
                fake.isBareType = true;
                fake.write(outputStream);
            }

            if ((flags & 67108864) != 0 && gigagroup != null) {
                gigagroup.isBareType = true;
                gigagroup.write(outputStream);
            }

            if ((flags & 134217728) != 0 && noforwards != null) {
                noforwards.isBareType = true;
                noforwards.write(outputStream);
            }

            if ((flags & 268435456) != 0 && joinToSend != null) {
                joinToSend.isBareType = true;
                joinToSend.write(outputStream);
            }

            if ((flags & 536870912) != 0 && joinRequest != null) {
                joinRequest.isBareType = true;
                joinRequest.write(outputStream);
            }

            outputStream.writeLong(id);
            if ((flags & 8192) != 0 && accessHash != null) {
                outputStream.writeLong(accessHash);
            }

            outputStream.writeTLString(title);
            if ((flags & 64) != 0 && username != null) {
                outputStream.writeTLString(username);
            }

            photo.write(outputStream);

            outputStream.writeInt(date);
            if ((flags & 512) != 0 && restrictionReason != null) {
                restrictionReason.write(outputStream);
            }

            if ((flags & 16384) != 0 && adminRights != null) {
                adminRights.write(outputStream);
            }

            if ((flags & 32768) != 0 && bannedRights != null) {
                bannedRights.write(outputStream);
            }

            if ((flags & 262144) != 0 && defaultBannedRights != null) {
                defaultBannedRights.write(outputStream);
            }

            if ((flags & 131072) != 0 && participantsCount != null) {
                outputStream.writeInt(participantsCount);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                creator = new True();
                creator.isBareType = true;
                creator.read(inputStream);
            }

            if ((flags & 4) != 0) {
                left = new True();
                left.isBareType = true;
                left.read(inputStream);
            }

            if ((flags & 32) != 0) {
                broadcast = new True();
                broadcast.isBareType = true;
                broadcast.read(inputStream);
            }

            if ((flags & 128) != 0) {
                verified = new True();
                verified.isBareType = true;
                verified.read(inputStream);
            }

            if ((flags & 256) != 0) {
                megagroup = new True();
                megagroup.isBareType = true;
                megagroup.read(inputStream);
            }

            if ((flags & 512) != 0) {
                restricted = new True();
                restricted.isBareType = true;
                restricted.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                signatures = new True();
                signatures.isBareType = true;
                signatures.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                min = new True();
                min.isBareType = true;
                min.read(inputStream);
            }

            if ((flags & 524288) != 0) {
                scam = new True();
                scam.isBareType = true;
                scam.read(inputStream);
            }

            if ((flags & 1048576) != 0) {
                hasLink = new True();
                hasLink.isBareType = true;
                hasLink.read(inputStream);
            }

            if ((flags & 2097152) != 0) {
                hasGeo = new True();
                hasGeo.isBareType = true;
                hasGeo.read(inputStream);
            }

            if ((flags & 4194304) != 0) {
                slowmodeEnabled = new True();
                slowmodeEnabled.isBareType = true;
                slowmodeEnabled.read(inputStream);
            }

            if ((flags & 8388608) != 0) {
                callActive = new True();
                callActive.isBareType = true;
                callActive.read(inputStream);
            }

            if ((flags & 16777216) != 0) {
                callNotEmpty = new True();
                callNotEmpty.isBareType = true;
                callNotEmpty.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                fake = new True();
                fake.isBareType = true;
                fake.read(inputStream);
            }

            if ((flags & 67108864) != 0) {
                gigagroup = new True();
                gigagroup.isBareType = true;
                gigagroup.read(inputStream);
            }

            if ((flags & 134217728) != 0) {
                noforwards = new True();
                noforwards.isBareType = true;
                noforwards.read(inputStream);
            }

            if ((flags & 268435456) != 0) {
                joinToSend = new True();
                joinToSend.isBareType = true;
                joinToSend.read(inputStream);
            }

            if ((flags & 536870912) != 0) {
                joinRequest = new True();
                joinRequest.isBareType = true;
                joinRequest.read(inputStream);
            }

            id = inputStream.readLong();
            if ((flags & 8192) != 0) {
                accessHash = inputStream.readLong();
            }

            title = inputStream.readTLString();
            if ((flags & 64) != 0) {
                username = inputStream.readTLString();
            }

            photo = ApiScheme.ChatPhoto.readObject(inputStream);
            date = inputStream.readInt();
            if ((flags & 512) != 0) {
                restrictionReason = new TLVector<ApiScheme.RestrictionReason>(ApiScheme.RestrictionReason.class);
                restrictionReason.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            }

            if ((flags & 32768) != 0) {
                bannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);
            }

            if ((flags & 262144) != 0) {
                defaultBannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);
            }

            if ((flags & 131072) != 0) {
                participantsCount = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Channel{" +
                    "flags=" + flags +
                    ", creator=" + creator +
                    ", left=" + left +
                    ", broadcast=" + broadcast +
                    ", verified=" + verified +
                    ", megagroup=" + megagroup +
                    ", restricted=" + restricted +
                    ", signatures=" + signatures +
                    ", min=" + min +
                    ", scam=" + scam +
                    ", hasLink=" + hasLink +
                    ", hasGeo=" + hasGeo +
                    ", slowmodeEnabled=" + slowmodeEnabled +
                    ", callActive=" + callActive +
                    ", callNotEmpty=" + callNotEmpty +
                    ", fake=" + fake +
                    ", gigagroup=" + gigagroup +
                    ", noforwards=" + noforwards +
                    ", joinToSend=" + joinToSend +
                    ", joinRequest=" + joinRequest +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", title=" + title +
                    ", username=" + username +
                    ", photo=" + photo +
                    ", date=" + date +
                    ", restrictionReason=" + restrictionReason +
                    ", adminRights=" + adminRights +
                    ", bannedRights=" + bannedRights +
                    ", defaultBannedRights=" + defaultBannedRights +
                    ", participantsCount=" + participantsCount +
                    '}';

        }
    }


    public static class ChannelForbidden extends ApiScheme.Chat {
        public static final int ID = 0x17d493d5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelForbidden";
        public int flags;
        public True broadcast = null;
        public True megagroup = null;
        public long id;
        public long accessHash;
        public String title;
        public Integer untilDate = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = broadcast != null ? (flags | 32) : (flags & ~32);
            flags = megagroup != null ? (flags | 256) : (flags & ~256);
            flags = untilDate != null ? (flags | 65536) : (flags & ~65536);
            outputStream.writeInt(flags);
            if ((flags & 32) != 0 && broadcast != null) {
                broadcast.isBareType = true;
                broadcast.write(outputStream);
            }

            if ((flags & 256) != 0 && megagroup != null) {
                megagroup.isBareType = true;
                megagroup.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLString(title);
            if ((flags & 65536) != 0 && untilDate != null) {
                outputStream.writeInt(untilDate);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 32) != 0) {
                broadcast = new True();
                broadcast.isBareType = true;
                broadcast.read(inputStream);
            }

            if ((flags & 256) != 0) {
                megagroup = new True();
                megagroup.isBareType = true;
                megagroup.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            title = inputStream.readTLString();
            if ((flags & 65536) != 0) {
                untilDate = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "ChannelForbidden{" +
                    "flags=" + flags +
                    ", broadcast=" + broadcast +
                    ", megagroup=" + megagroup +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", title=" + title +
                    ", untilDate=" + untilDate +
                    '}';

        }
    }


    public static class ChatFull2 extends ApiScheme.ChatFull {
        public static final int ID = 0xd18ee226;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatFull";
        public int flags;
        public True canSetUsername = null;
        public True hasScheduled = null;
        public long id;
        public String about;
        public ApiScheme.ChatParticipants participants;
        public ApiScheme.Photo chatPhoto = null;
        public ApiScheme.PeerNotifySettings notifySettings;
        public ApiScheme.ExportedChatInvite exportedInvite = null;
        public TLVector<ApiScheme.BotInfo> botInfo = null;
        public Integer pinnedMsgId = null;
        public Integer folderId = null;
        public ApiScheme.InputGroupCall call = null;
        public Integer ttlPeriod = null;
        public ApiScheme.Peer groupcallDefaultJoinAs = null;
        public String themeEmoticon = null;
        public Integer requestsPending = null;
        public TLVector<TLLong> recentRequesters = null;
        public TLVector<TLString> availableReactions = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = canSetUsername != null ? (flags | 128) : (flags & ~128);
            flags = hasScheduled != null ? (flags | 256) : (flags & ~256);
            flags = chatPhoto != null ? (flags | 4) : (flags & ~4);
            flags = exportedInvite != null ? (flags | 8192) : (flags & ~8192);
            flags = botInfo != null ? (flags | 8) : (flags & ~8);
            flags = pinnedMsgId != null ? (flags | 64) : (flags & ~64);
            flags = folderId != null ? (flags | 2048) : (flags & ~2048);
            flags = call != null ? (flags | 4096) : (flags & ~4096);
            flags = ttlPeriod != null ? (flags | 16384) : (flags & ~16384);
            flags = groupcallDefaultJoinAs != null ? (flags | 32768) : (flags & ~32768);
            flags = themeEmoticon != null ? (flags | 65536) : (flags & ~65536);
            flags = requestsPending != null ? (flags | 131072) : (flags & ~131072);
            flags = recentRequesters != null ? (flags | 131072) : (flags & ~131072);
            flags = availableReactions != null ? (flags | 262144) : (flags & ~262144);
            outputStream.writeInt(flags);
            if ((flags & 128) != 0 && canSetUsername != null) {
                canSetUsername.isBareType = true;
                canSetUsername.write(outputStream);
            }

            if ((flags & 256) != 0 && hasScheduled != null) {
                hasScheduled.isBareType = true;
                hasScheduled.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeTLString(about);
            participants.write(outputStream);

            if ((flags & 4) != 0 && chatPhoto != null) {
                chatPhoto.write(outputStream);
            }

            notifySettings.write(outputStream);

            if ((flags & 8192) != 0 && exportedInvite != null) {
                exportedInvite.write(outputStream);
            }

            if ((flags & 8) != 0 && botInfo != null) {
                botInfo.write(outputStream);
            }

            if ((flags & 64) != 0 && pinnedMsgId != null) {
                outputStream.writeInt(pinnedMsgId);
            }

            if ((flags & 2048) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            if ((flags & 4096) != 0 && call != null) {
                call.write(outputStream);
            }

            if ((flags & 16384) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }

            if ((flags & 32768) != 0 && groupcallDefaultJoinAs != null) {
                groupcallDefaultJoinAs.write(outputStream);
            }

            if ((flags & 65536) != 0 && themeEmoticon != null) {
                outputStream.writeTLString(themeEmoticon);
            }

            if ((flags & 131072) != 0 && requestsPending != null) {
                outputStream.writeInt(requestsPending);
            }

            if ((flags & 131072) != 0 && recentRequesters != null) {
                recentRequesters.isBareTypeItem = true;
                recentRequesters.write(outputStream);
            }

            if ((flags & 262144) != 0 && availableReactions != null) {
                availableReactions.isBareTypeItem = true;
                availableReactions.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 128) != 0) {
                canSetUsername = new True();
                canSetUsername.isBareType = true;
                canSetUsername.read(inputStream);
            }

            if ((flags & 256) != 0) {
                hasScheduled = new True();
                hasScheduled.isBareType = true;
                hasScheduled.read(inputStream);
            }

            id = inputStream.readLong();
            about = inputStream.readTLString();
            participants = ApiScheme.ChatParticipants.readObject(inputStream);
            if ((flags & 4) != 0) {
                chatPhoto = ApiScheme.Photo.readObject(inputStream);
            }

            notifySettings = ApiScheme.PeerNotifySettings.readObject(inputStream);
            if ((flags & 8192) != 0) {
                exportedInvite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            }

            if ((flags & 8) != 0) {
                botInfo = new TLVector<ApiScheme.BotInfo>(ApiScheme.BotInfo.class);
                botInfo.read(inputStream);
            }

            if ((flags & 64) != 0) {
                pinnedMsgId = inputStream.readInt();
            }

            if ((flags & 2048) != 0) {
                folderId = inputStream.readInt();
            }

            if ((flags & 4096) != 0) {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
            }

            if ((flags & 16384) != 0) {
                ttlPeriod = inputStream.readInt();
            }

            if ((flags & 32768) != 0) {
                groupcallDefaultJoinAs = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 65536) != 0) {
                themeEmoticon = inputStream.readTLString();
            }

            if ((flags & 131072) != 0) {
                requestsPending = inputStream.readInt();
            }

            if ((flags & 131072) != 0) {
                recentRequesters = new TLVector<TLLong>(TLLong.class);
                recentRequesters.isBareTypeItem = true;
                recentRequesters.read(inputStream);
            }

            if ((flags & 262144) != 0) {
                availableReactions = new TLVector<TLString>(TLString.class);
                availableReactions.isBareTypeItem = true;
                availableReactions.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChatFull{" +
                    "flags=" + flags +
                    ", canSetUsername=" + canSetUsername +
                    ", hasScheduled=" + hasScheduled +
                    ", id=" + id +
                    ", about=" + about +
                    ", participants=" + participants +
                    ", chatPhoto=" + chatPhoto +
                    ", notifySettings=" + notifySettings +
                    ", exportedInvite=" + exportedInvite +
                    ", botInfo=" + botInfo +
                    ", pinnedMsgId=" + pinnedMsgId +
                    ", folderId=" + folderId +
                    ", call=" + call +
                    ", ttlPeriod=" + ttlPeriod +
                    ", groupcallDefaultJoinAs=" + groupcallDefaultJoinAs +
                    ", themeEmoticon=" + themeEmoticon +
                    ", requestsPending=" + requestsPending +
                    ", recentRequesters=" + recentRequesters +
                    ", availableReactions=" + availableReactions +
                    '}';

        }
    }


    public static class ChannelFull extends ApiScheme.ChatFull {
        public static final int ID = 0xea68a619;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelFull";
        public int flags;
        public True canViewParticipants = null;
        public True canSetUsername = null;
        public True canSetStickers = null;
        public True hiddenPrehistory = null;
        public True canSetLocation = null;
        public True hasScheduled = null;
        public True canViewStats = null;
        public True blocked = null;
        public int flags2;
        public True canDeleteChannel = null;
        public long id;
        public String about;
        public Integer participantsCount = null;
        public Integer adminsCount = null;
        public Integer kickedCount = null;
        public Integer bannedCount = null;
        public Integer onlineCount = null;
        public int readInboxMaxId;
        public int readOutboxMaxId;
        public int unreadCount;
        public ApiScheme.Photo chatPhoto;
        public ApiScheme.PeerNotifySettings notifySettings;
        public ApiScheme.ExportedChatInvite exportedInvite = null;
        public TLVector<ApiScheme.BotInfo> botInfo;
        public Long migratedFromChatId = null;
        public Integer migratedFromMaxId = null;
        public Integer pinnedMsgId = null;
        public ApiScheme.StickerSet stickerset = null;
        public Integer availableMinId = null;
        public Integer folderId = null;
        public Long linkedChatId = null;
        public ApiScheme.ChannelLocation location = null;
        public Integer slowmodeSeconds = null;
        public Integer slowmodeNextSendDate = null;
        public Integer statsDc = null;
        public int pts;
        public ApiScheme.InputGroupCall call = null;
        public Integer ttlPeriod = null;
        public TLVector<TLString> pendingSuggestions = null;
        public ApiScheme.Peer groupcallDefaultJoinAs = null;
        public String themeEmoticon = null;
        public Integer requestsPending = null;
        public TLVector<TLLong> recentRequesters = null;
        public ApiScheme.Peer defaultSendAs = null;
        public TLVector<TLString> availableReactions = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = canViewParticipants != null ? (flags | 8) : (flags & ~8);
            flags = canSetUsername != null ? (flags | 64) : (flags & ~64);
            flags = canSetStickers != null ? (flags | 128) : (flags & ~128);
            flags = hiddenPrehistory != null ? (flags | 1024) : (flags & ~1024);
            flags = canSetLocation != null ? (flags | 65536) : (flags & ~65536);
            flags = hasScheduled != null ? (flags | 524288) : (flags & ~524288);
            flags = canViewStats != null ? (flags | 1048576) : (flags & ~1048576);
            flags = blocked != null ? (flags | 4194304) : (flags & ~4194304);
            flags2 = canDeleteChannel != null ? (flags2 | 1) : (flags2 & ~1);
            flags = participantsCount != null ? (flags | 1) : (flags & ~1);
            flags = adminsCount != null ? (flags | 2) : (flags & ~2);
            flags = kickedCount != null ? (flags | 4) : (flags & ~4);
            flags = bannedCount != null ? (flags | 4) : (flags & ~4);
            flags = onlineCount != null ? (flags | 8192) : (flags & ~8192);
            flags = exportedInvite != null ? (flags | 8388608) : (flags & ~8388608);
            flags = migratedFromChatId != null ? (flags | 16) : (flags & ~16);
            flags = migratedFromMaxId != null ? (flags | 16) : (flags & ~16);
            flags = pinnedMsgId != null ? (flags | 32) : (flags & ~32);
            flags = stickerset != null ? (flags | 256) : (flags & ~256);
            flags = availableMinId != null ? (flags | 512) : (flags & ~512);
            flags = folderId != null ? (flags | 2048) : (flags & ~2048);
            flags = linkedChatId != null ? (flags | 16384) : (flags & ~16384);
            flags = location != null ? (flags | 32768) : (flags & ~32768);
            flags = slowmodeSeconds != null ? (flags | 131072) : (flags & ~131072);
            flags = slowmodeNextSendDate != null ? (flags | 262144) : (flags & ~262144);
            flags = statsDc != null ? (flags | 4096) : (flags & ~4096);
            flags = call != null ? (flags | 2097152) : (flags & ~2097152);
            flags = ttlPeriod != null ? (flags | 16777216) : (flags & ~16777216);
            flags = pendingSuggestions != null ? (flags | 33554432) : (flags & ~33554432);
            flags = groupcallDefaultJoinAs != null ? (flags | 67108864) : (flags & ~67108864);
            flags = themeEmoticon != null ? (flags | 134217728) : (flags & ~134217728);
            flags = requestsPending != null ? (flags | 268435456) : (flags & ~268435456);
            flags = recentRequesters != null ? (flags | 268435456) : (flags & ~268435456);
            flags = defaultSendAs != null ? (flags | 536870912) : (flags & ~536870912);
            flags = availableReactions != null ? (flags | 1073741824) : (flags & ~1073741824);
            outputStream.writeInt(flags);
            if ((flags & 8) != 0 && canViewParticipants != null) {
                canViewParticipants.isBareType = true;
                canViewParticipants.write(outputStream);
            }

            if ((flags & 64) != 0 && canSetUsername != null) {
                canSetUsername.isBareType = true;
                canSetUsername.write(outputStream);
            }

            if ((flags & 128) != 0 && canSetStickers != null) {
                canSetStickers.isBareType = true;
                canSetStickers.write(outputStream);
            }

            if ((flags & 1024) != 0 && hiddenPrehistory != null) {
                hiddenPrehistory.isBareType = true;
                hiddenPrehistory.write(outputStream);
            }

            if ((flags & 65536) != 0 && canSetLocation != null) {
                canSetLocation.isBareType = true;
                canSetLocation.write(outputStream);
            }

            if ((flags & 524288) != 0 && hasScheduled != null) {
                hasScheduled.isBareType = true;
                hasScheduled.write(outputStream);
            }

            if ((flags & 1048576) != 0 && canViewStats != null) {
                canViewStats.isBareType = true;
                canViewStats.write(outputStream);
            }

            if ((flags & 4194304) != 0 && blocked != null) {
                blocked.isBareType = true;
                blocked.write(outputStream);
            }

            outputStream.writeInt(flags2);
            if ((flags2 & 1) != 0 && canDeleteChannel != null) {
                canDeleteChannel.isBareType = true;
                canDeleteChannel.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeTLString(about);
            if ((flags & 1) != 0 && participantsCount != null) {
                outputStream.writeInt(participantsCount);
            }

            if ((flags & 2) != 0 && adminsCount != null) {
                outputStream.writeInt(adminsCount);
            }

            if ((flags & 4) != 0 && kickedCount != null) {
                outputStream.writeInt(kickedCount);
            }

            if ((flags & 4) != 0 && bannedCount != null) {
                outputStream.writeInt(bannedCount);
            }

            if ((flags & 8192) != 0 && onlineCount != null) {
                outputStream.writeInt(onlineCount);
            }

            outputStream.writeInt(readInboxMaxId);
            outputStream.writeInt(readOutboxMaxId);
            outputStream.writeInt(unreadCount);
            chatPhoto.write(outputStream);

            notifySettings.write(outputStream);

            if ((flags & 8388608) != 0 && exportedInvite != null) {
                exportedInvite.write(outputStream);
            }

            botInfo.write(outputStream);

            if ((flags & 16) != 0 && migratedFromChatId != null) {
                outputStream.writeLong(migratedFromChatId);
            }

            if ((flags & 16) != 0 && migratedFromMaxId != null) {
                outputStream.writeInt(migratedFromMaxId);
            }

            if ((flags & 32) != 0 && pinnedMsgId != null) {
                outputStream.writeInt(pinnedMsgId);
            }

            if ((flags & 256) != 0 && stickerset != null) {
                stickerset.write(outputStream);
            }

            if ((flags & 512) != 0 && availableMinId != null) {
                outputStream.writeInt(availableMinId);
            }

            if ((flags & 2048) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            if ((flags & 16384) != 0 && linkedChatId != null) {
                outputStream.writeLong(linkedChatId);
            }

            if ((flags & 32768) != 0 && location != null) {
                location.write(outputStream);
            }

            if ((flags & 131072) != 0 && slowmodeSeconds != null) {
                outputStream.writeInt(slowmodeSeconds);
            }

            if ((flags & 262144) != 0 && slowmodeNextSendDate != null) {
                outputStream.writeInt(slowmodeNextSendDate);
            }

            if ((flags & 4096) != 0 && statsDc != null) {
                outputStream.writeInt(statsDc);
            }

            outputStream.writeInt(pts);
            if ((flags & 2097152) != 0 && call != null) {
                call.write(outputStream);
            }

            if ((flags & 16777216) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }

            if ((flags & 33554432) != 0 && pendingSuggestions != null) {
                pendingSuggestions.isBareTypeItem = true;
                pendingSuggestions.write(outputStream);
            }

            if ((flags & 67108864) != 0 && groupcallDefaultJoinAs != null) {
                groupcallDefaultJoinAs.write(outputStream);
            }

            if ((flags & 134217728) != 0 && themeEmoticon != null) {
                outputStream.writeTLString(themeEmoticon);
            }

            if ((flags & 268435456) != 0 && requestsPending != null) {
                outputStream.writeInt(requestsPending);
            }

            if ((flags & 268435456) != 0 && recentRequesters != null) {
                recentRequesters.isBareTypeItem = true;
                recentRequesters.write(outputStream);
            }

            if ((flags & 536870912) != 0 && defaultSendAs != null) {
                defaultSendAs.write(outputStream);
            }

            if ((flags & 1073741824) != 0 && availableReactions != null) {
                availableReactions.isBareTypeItem = true;
                availableReactions.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 8) != 0) {
                canViewParticipants = new True();
                canViewParticipants.isBareType = true;
                canViewParticipants.read(inputStream);
            }

            if ((flags & 64) != 0) {
                canSetUsername = new True();
                canSetUsername.isBareType = true;
                canSetUsername.read(inputStream);
            }

            if ((flags & 128) != 0) {
                canSetStickers = new True();
                canSetStickers.isBareType = true;
                canSetStickers.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                hiddenPrehistory = new True();
                hiddenPrehistory.isBareType = true;
                hiddenPrehistory.read(inputStream);
            }

            if ((flags & 65536) != 0) {
                canSetLocation = new True();
                canSetLocation.isBareType = true;
                canSetLocation.read(inputStream);
            }

            if ((flags & 524288) != 0) {
                hasScheduled = new True();
                hasScheduled.isBareType = true;
                hasScheduled.read(inputStream);
            }

            if ((flags & 1048576) != 0) {
                canViewStats = new True();
                canViewStats.isBareType = true;
                canViewStats.read(inputStream);
            }

            if ((flags & 4194304) != 0) {
                blocked = new True();
                blocked.isBareType = true;
                blocked.read(inputStream);
            }

            flags2 = inputStream.readInt();
            if ((flags2 & 1) != 0) {
                canDeleteChannel = new True();
                canDeleteChannel.isBareType = true;
                canDeleteChannel.read(inputStream);
            }

            id = inputStream.readLong();
            about = inputStream.readTLString();
            if ((flags & 1) != 0) {
                participantsCount = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                adminsCount = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                kickedCount = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                bannedCount = inputStream.readInt();
            }

            if ((flags & 8192) != 0) {
                onlineCount = inputStream.readInt();
            }

            readInboxMaxId = inputStream.readInt();
            readOutboxMaxId = inputStream.readInt();
            unreadCount = inputStream.readInt();
            chatPhoto = ApiScheme.Photo.readObject(inputStream);
            notifySettings = ApiScheme.PeerNotifySettings.readObject(inputStream);
            if ((flags & 8388608) != 0) {
                exportedInvite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            }

            botInfo = new TLVector<ApiScheme.BotInfo>(ApiScheme.BotInfo.class);
            botInfo.read(inputStream);

            if ((flags & 16) != 0) {
                migratedFromChatId = inputStream.readLong();
            }

            if ((flags & 16) != 0) {
                migratedFromMaxId = inputStream.readInt();
            }

            if ((flags & 32) != 0) {
                pinnedMsgId = inputStream.readInt();
            }

            if ((flags & 256) != 0) {
                stickerset = ApiScheme.StickerSet.readObject(inputStream);
            }

            if ((flags & 512) != 0) {
                availableMinId = inputStream.readInt();
            }

            if ((flags & 2048) != 0) {
                folderId = inputStream.readInt();
            }

            if ((flags & 16384) != 0) {
                linkedChatId = inputStream.readLong();
            }

            if ((flags & 32768) != 0) {
                location = ApiScheme.ChannelLocation.readObject(inputStream);
            }

            if ((flags & 131072) != 0) {
                slowmodeSeconds = inputStream.readInt();
            }

            if ((flags & 262144) != 0) {
                slowmodeNextSendDate = inputStream.readInt();
            }

            if ((flags & 4096) != 0) {
                statsDc = inputStream.readInt();
            }

            pts = inputStream.readInt();
            if ((flags & 2097152) != 0) {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
            }

            if ((flags & 16777216) != 0) {
                ttlPeriod = inputStream.readInt();
            }

            if ((flags & 33554432) != 0) {
                pendingSuggestions = new TLVector<TLString>(TLString.class);
                pendingSuggestions.isBareTypeItem = true;
                pendingSuggestions.read(inputStream);
            }

            if ((flags & 67108864) != 0) {
                groupcallDefaultJoinAs = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 134217728) != 0) {
                themeEmoticon = inputStream.readTLString();
            }

            if ((flags & 268435456) != 0) {
                requestsPending = inputStream.readInt();
            }

            if ((flags & 268435456) != 0) {
                recentRequesters = new TLVector<TLLong>(TLLong.class);
                recentRequesters.isBareTypeItem = true;
                recentRequesters.read(inputStream);
            }

            if ((flags & 536870912) != 0) {
                defaultSendAs = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 1073741824) != 0) {
                availableReactions = new TLVector<TLString>(TLString.class);
                availableReactions.isBareTypeItem = true;
                availableReactions.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChannelFull{" +
                    "flags=" + flags +
                    ", canViewParticipants=" + canViewParticipants +
                    ", canSetUsername=" + canSetUsername +
                    ", canSetStickers=" + canSetStickers +
                    ", hiddenPrehistory=" + hiddenPrehistory +
                    ", canSetLocation=" + canSetLocation +
                    ", hasScheduled=" + hasScheduled +
                    ", canViewStats=" + canViewStats +
                    ", blocked=" + blocked +
                    ", flags2=" + flags2 +
                    ", canDeleteChannel=" + canDeleteChannel +
                    ", id=" + id +
                    ", about=" + about +
                    ", participantsCount=" + participantsCount +
                    ", adminsCount=" + adminsCount +
                    ", kickedCount=" + kickedCount +
                    ", bannedCount=" + bannedCount +
                    ", onlineCount=" + onlineCount +
                    ", readInboxMaxId=" + readInboxMaxId +
                    ", readOutboxMaxId=" + readOutboxMaxId +
                    ", unreadCount=" + unreadCount +
                    ", chatPhoto=" + chatPhoto +
                    ", notifySettings=" + notifySettings +
                    ", exportedInvite=" + exportedInvite +
                    ", botInfo=" + botInfo +
                    ", migratedFromChatId=" + migratedFromChatId +
                    ", migratedFromMaxId=" + migratedFromMaxId +
                    ", pinnedMsgId=" + pinnedMsgId +
                    ", stickerset=" + stickerset +
                    ", availableMinId=" + availableMinId +
                    ", folderId=" + folderId +
                    ", linkedChatId=" + linkedChatId +
                    ", location=" + location +
                    ", slowmodeSeconds=" + slowmodeSeconds +
                    ", slowmodeNextSendDate=" + slowmodeNextSendDate +
                    ", statsDc=" + statsDc +
                    ", pts=" + pts +
                    ", call=" + call +
                    ", ttlPeriod=" + ttlPeriod +
                    ", pendingSuggestions=" + pendingSuggestions +
                    ", groupcallDefaultJoinAs=" + groupcallDefaultJoinAs +
                    ", themeEmoticon=" + themeEmoticon +
                    ", requestsPending=" + requestsPending +
                    ", recentRequesters=" + recentRequesters +
                    ", defaultSendAs=" + defaultSendAs +
                    ", availableReactions=" + availableReactions +
                    '}';

        }
    }


    public static class ChatParticipant2 extends ApiScheme.ChatParticipant {
        public static final int ID = 0xc02d4007;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatParticipant";
        public long userId;
        public long inviterId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeLong(inviterId);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            inviterId = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatParticipant{" +
                    "userId=" + userId +
                    ", inviterId=" + inviterId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class ChatParticipantCreator extends ApiScheme.ChatParticipant {
        public static final int ID = 0xe46bcee4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatParticipantCreator";
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "ChatParticipantCreator{" +
                    "userId=" + userId +
                    '}';

        }
    }


    public static class ChatParticipantAdmin extends ApiScheme.ChatParticipant {
        public static final int ID = 0xa0933f5b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatParticipantAdmin";
        public long userId;
        public long inviterId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeLong(inviterId);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            inviterId = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatParticipantAdmin{" +
                    "userId=" + userId +
                    ", inviterId=" + inviterId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class ChatParticipantsForbidden extends ApiScheme.ChatParticipants {
        public static final int ID = 0x8763d3e1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatParticipantsForbidden";
        public int flags;
        public long chatId;
        public ApiScheme.ChatParticipant selfParticipant = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = selfParticipant != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(chatId);
            if ((flags & 1) != 0 && selfParticipant != null) {
                selfParticipant.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            chatId = inputStream.readLong();
            if ((flags & 1) != 0) {
                selfParticipant = ApiScheme.ChatParticipant.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChatParticipantsForbidden{" +
                    "flags=" + flags +
                    ", chatId=" + chatId +
                    ", selfParticipant=" + selfParticipant +
                    '}';

        }
    }


    public static class ChatParticipants2 extends ApiScheme.ChatParticipants {
        public static final int ID = 0x3cbc93f8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatParticipants";
        public long chatId;
        public TLVector<ApiScheme.ChatParticipant> participants;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            participants.write(outputStream);

            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            participants = new TLVector<ApiScheme.ChatParticipant>(ApiScheme.ChatParticipant.class);
            participants.read(inputStream);

            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatParticipants{" +
                    "chatId=" + chatId +
                    ", participants=" + participants +
                    ", version=" + version +
                    '}';

        }
    }


    public static class ChatPhotoEmpty extends ApiScheme.ChatPhoto {
        public static final int ID = 0x37c1011c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatPhotoEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChatPhotoEmpty{" +
                    '}';

        }
    }


    public static class ChatPhoto2 extends ApiScheme.ChatPhoto {
        public static final int ID = 0x1c6e1c11;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatPhoto";
        public int flags;
        public True hasVideo = null;
        public long photoId;
        public byte[] strippedThumb = null;
        public int dcId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = hasVideo != null ? (flags | 1) : (flags & ~1);
            flags = strippedThumb != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && hasVideo != null) {
                hasVideo.isBareType = true;
                hasVideo.write(outputStream);
            }

            outputStream.writeLong(photoId);
            if ((flags & 2) != 0 && strippedThumb != null) {
                outputStream.writeTLBytes(strippedThumb);
            }

            outputStream.writeInt(dcId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                hasVideo = new True();
                hasVideo.isBareType = true;
                hasVideo.read(inputStream);
            }

            photoId = inputStream.readLong();
            if ((flags & 2) != 0) {
                strippedThumb = inputStream.readTLBytes();
            }

            dcId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatPhoto{" +
                    "flags=" + flags +
                    ", hasVideo=" + hasVideo +
                    ", photoId=" + photoId +
                    ", strippedThumb=" + strippedThumb +
                    ", dcId=" + dcId +
                    '}';

        }
    }


    public static class MessageEmpty extends ApiScheme.Message {
        public static final int ID = 0x90a6ca84;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEmpty";
        public int flags;
        public int id;
        public ApiScheme.Peer peerId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = peerId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeInt(id);
            if ((flags & 1) != 0 && peerId != null) {
                peerId.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readInt();
            if ((flags & 1) != 0) {
                peerId = ApiScheme.Peer.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "MessageEmpty{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", peerId=" + peerId +
                    '}';

        }
    }


    public static class Message2 extends ApiScheme.Message {
        public static final int ID = 0x38116ee0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "message";
        public int flags;
        public True out = null;
        public True mentioned = null;
        public True mediaUnread = null;
        public True silent = null;
        public True post = null;
        public True fromScheduled = null;
        public True legacy = null;
        public True editHide = null;
        public True pinned = null;
        public True noforwards = null;
        public int id;
        public ApiScheme.Peer fromId = null;
        public ApiScheme.Peer peerId;
        public ApiScheme.MessageFwdHeader fwdFrom = null;
        public Long viaBotId = null;
        public ApiScheme.MessageReplyHeader replyTo = null;
        public int date;
        public String message;
        public ApiScheme.MessageMedia media = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public Integer views = null;
        public Integer forwards = null;
        public ApiScheme.MessageReplies replies = null;
        public Integer editDate = null;
        public String postAuthor = null;
        public Long groupedId = null;
        public ApiScheme.MessageReactions reactions = null;
        public TLVector<ApiScheme.RestrictionReason> restrictionReason = null;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = out != null ? (flags | 2) : (flags & ~2);
            flags = mentioned != null ? (flags | 16) : (flags & ~16);
            flags = mediaUnread != null ? (flags | 32) : (flags & ~32);
            flags = silent != null ? (flags | 8192) : (flags & ~8192);
            flags = post != null ? (flags | 16384) : (flags & ~16384);
            flags = fromScheduled != null ? (flags | 262144) : (flags & ~262144);
            flags = legacy != null ? (flags | 524288) : (flags & ~524288);
            flags = editHide != null ? (flags | 2097152) : (flags & ~2097152);
            flags = pinned != null ? (flags | 16777216) : (flags & ~16777216);
            flags = noforwards != null ? (flags | 67108864) : (flags & ~67108864);
            flags = fromId != null ? (flags | 256) : (flags & ~256);
            flags = fwdFrom != null ? (flags | 4) : (flags & ~4);
            flags = viaBotId != null ? (flags | 2048) : (flags & ~2048);
            flags = replyTo != null ? (flags | 8) : (flags & ~8);
            flags = media != null ? (flags | 512) : (flags & ~512);
            flags = replyMarkup != null ? (flags | 64) : (flags & ~64);
            flags = entities != null ? (flags | 128) : (flags & ~128);
            flags = views != null ? (flags | 1024) : (flags & ~1024);
            flags = forwards != null ? (flags | 1024) : (flags & ~1024);
            flags = replies != null ? (flags | 8388608) : (flags & ~8388608);
            flags = editDate != null ? (flags | 32768) : (flags & ~32768);
            flags = postAuthor != null ? (flags | 65536) : (flags & ~65536);
            flags = groupedId != null ? (flags | 131072) : (flags & ~131072);
            flags = reactions != null ? (flags | 1048576) : (flags & ~1048576);
            flags = restrictionReason != null ? (flags | 4194304) : (flags & ~4194304);
            flags = ttlPeriod != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && out != null) {
                out.isBareType = true;
                out.write(outputStream);
            }

            if ((flags & 16) != 0 && mentioned != null) {
                mentioned.isBareType = true;
                mentioned.write(outputStream);
            }

            if ((flags & 32) != 0 && mediaUnread != null) {
                mediaUnread.isBareType = true;
                mediaUnread.write(outputStream);
            }

            if ((flags & 8192) != 0 && silent != null) {
                silent.isBareType = true;
                silent.write(outputStream);
            }

            if ((flags & 16384) != 0 && post != null) {
                post.isBareType = true;
                post.write(outputStream);
            }

            if ((flags & 262144) != 0 && fromScheduled != null) {
                fromScheduled.isBareType = true;
                fromScheduled.write(outputStream);
            }

            if ((flags & 524288) != 0 && legacy != null) {
                legacy.isBareType = true;
                legacy.write(outputStream);
            }

            if ((flags & 2097152) != 0 && editHide != null) {
                editHide.isBareType = true;
                editHide.write(outputStream);
            }

            if ((flags & 16777216) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            if ((flags & 67108864) != 0 && noforwards != null) {
                noforwards.isBareType = true;
                noforwards.write(outputStream);
            }

            outputStream.writeInt(id);
            if ((flags & 256) != 0 && fromId != null) {
                fromId.write(outputStream);
            }

            peerId.write(outputStream);

            if ((flags & 4) != 0 && fwdFrom != null) {
                fwdFrom.write(outputStream);
            }

            if ((flags & 2048) != 0 && viaBotId != null) {
                outputStream.writeLong(viaBotId);
            }

            if ((flags & 8) != 0 && replyTo != null) {
                replyTo.write(outputStream);
            }

            outputStream.writeInt(date);
            outputStream.writeTLString(message);
            if ((flags & 512) != 0 && media != null) {
                media.write(outputStream);
            }

            if ((flags & 64) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }

            if ((flags & 128) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 1024) != 0 && views != null) {
                outputStream.writeInt(views);
            }

            if ((flags & 1024) != 0 && forwards != null) {
                outputStream.writeInt(forwards);
            }

            if ((flags & 8388608) != 0 && replies != null) {
                replies.write(outputStream);
            }

            if ((flags & 32768) != 0 && editDate != null) {
                outputStream.writeInt(editDate);
            }

            if ((flags & 65536) != 0 && postAuthor != null) {
                outputStream.writeTLString(postAuthor);
            }

            if ((flags & 131072) != 0 && groupedId != null) {
                outputStream.writeLong(groupedId);
            }

            if ((flags & 1048576) != 0 && reactions != null) {
                reactions.write(outputStream);
            }

            if ((flags & 4194304) != 0 && restrictionReason != null) {
                restrictionReason.write(outputStream);
            }

            if ((flags & 33554432) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                out = new True();
                out.isBareType = true;
                out.read(inputStream);
            }

            if ((flags & 16) != 0) {
                mentioned = new True();
                mentioned.isBareType = true;
                mentioned.read(inputStream);
            }

            if ((flags & 32) != 0) {
                mediaUnread = new True();
                mediaUnread.isBareType = true;
                mediaUnread.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                silent = new True();
                silent.isBareType = true;
                silent.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                post = new True();
                post.isBareType = true;
                post.read(inputStream);
            }

            if ((flags & 262144) != 0) {
                fromScheduled = new True();
                fromScheduled.isBareType = true;
                fromScheduled.read(inputStream);
            }

            if ((flags & 524288) != 0) {
                legacy = new True();
                legacy.isBareType = true;
                legacy.read(inputStream);
            }

            if ((flags & 2097152) != 0) {
                editHide = new True();
                editHide.isBareType = true;
                editHide.read(inputStream);
            }

            if ((flags & 16777216) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            if ((flags & 67108864) != 0) {
                noforwards = new True();
                noforwards.isBareType = true;
                noforwards.read(inputStream);
            }

            id = inputStream.readInt();
            if ((flags & 256) != 0) {
                fromId = ApiScheme.Peer.readObject(inputStream);
            }

            peerId = ApiScheme.Peer.readObject(inputStream);
            if ((flags & 4) != 0) {
                fwdFrom = ApiScheme.MessageFwdHeader.readObject(inputStream);
            }

            if ((flags & 2048) != 0) {
                viaBotId = inputStream.readLong();
            }

            if ((flags & 8) != 0) {
                replyTo = ApiScheme.MessageReplyHeader.readObject(inputStream);
            }

            date = inputStream.readInt();
            message = inputStream.readTLString();
            if ((flags & 512) != 0) {
                media = ApiScheme.MessageMedia.readObject(inputStream);
            }

            if ((flags & 64) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }

            if ((flags & 128) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                views = inputStream.readInt();
            }

            if ((flags & 1024) != 0) {
                forwards = inputStream.readInt();
            }

            if ((flags & 8388608) != 0) {
                replies = ApiScheme.MessageReplies.readObject(inputStream);
            }

            if ((flags & 32768) != 0) {
                editDate = inputStream.readInt();
            }

            if ((flags & 65536) != 0) {
                postAuthor = inputStream.readTLString();
            }

            if ((flags & 131072) != 0) {
                groupedId = inputStream.readLong();
            }

            if ((flags & 1048576) != 0) {
                reactions = ApiScheme.MessageReactions.readObject(inputStream);
            }

            if ((flags & 4194304) != 0) {
                restrictionReason = new TLVector<ApiScheme.RestrictionReason>(ApiScheme.RestrictionReason.class);
                restrictionReason.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Message{" +
                    "flags=" + flags +
                    ", out=" + out +
                    ", mentioned=" + mentioned +
                    ", mediaUnread=" + mediaUnread +
                    ", silent=" + silent +
                    ", post=" + post +
                    ", fromScheduled=" + fromScheduled +
                    ", legacy=" + legacy +
                    ", editHide=" + editHide +
                    ", pinned=" + pinned +
                    ", noforwards=" + noforwards +
                    ", id=" + id +
                    ", fromId=" + fromId +
                    ", peerId=" + peerId +
                    ", fwdFrom=" + fwdFrom +
                    ", viaBotId=" + viaBotId +
                    ", replyTo=" + replyTo +
                    ", date=" + date +
                    ", message=" + message +
                    ", media=" + media +
                    ", replyMarkup=" + replyMarkup +
                    ", entities=" + entities +
                    ", views=" + views +
                    ", forwards=" + forwards +
                    ", replies=" + replies +
                    ", editDate=" + editDate +
                    ", postAuthor=" + postAuthor +
                    ", groupedId=" + groupedId +
                    ", reactions=" + reactions +
                    ", restrictionReason=" + restrictionReason +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class MessageService extends ApiScheme.Message {
        public static final int ID = 0x2b085862;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageService";
        public int flags;
        public True out = null;
        public True mentioned = null;
        public True mediaUnread = null;
        public True silent = null;
        public True post = null;
        public True legacy = null;
        public int id;
        public ApiScheme.Peer fromId = null;
        public ApiScheme.Peer peerId;
        public ApiScheme.MessageReplyHeader replyTo = null;
        public int date;
        public ApiScheme.MessageAction action;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = out != null ? (flags | 2) : (flags & ~2);
            flags = mentioned != null ? (flags | 16) : (flags & ~16);
            flags = mediaUnread != null ? (flags | 32) : (flags & ~32);
            flags = silent != null ? (flags | 8192) : (flags & ~8192);
            flags = post != null ? (flags | 16384) : (flags & ~16384);
            flags = legacy != null ? (flags | 524288) : (flags & ~524288);
            flags = fromId != null ? (flags | 256) : (flags & ~256);
            flags = replyTo != null ? (flags | 8) : (flags & ~8);
            flags = ttlPeriod != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && out != null) {
                out.isBareType = true;
                out.write(outputStream);
            }

            if ((flags & 16) != 0 && mentioned != null) {
                mentioned.isBareType = true;
                mentioned.write(outputStream);
            }

            if ((flags & 32) != 0 && mediaUnread != null) {
                mediaUnread.isBareType = true;
                mediaUnread.write(outputStream);
            }

            if ((flags & 8192) != 0 && silent != null) {
                silent.isBareType = true;
                silent.write(outputStream);
            }

            if ((flags & 16384) != 0 && post != null) {
                post.isBareType = true;
                post.write(outputStream);
            }

            if ((flags & 524288) != 0 && legacy != null) {
                legacy.isBareType = true;
                legacy.write(outputStream);
            }

            outputStream.writeInt(id);
            if ((flags & 256) != 0 && fromId != null) {
                fromId.write(outputStream);
            }

            peerId.write(outputStream);

            if ((flags & 8) != 0 && replyTo != null) {
                replyTo.write(outputStream);
            }

            outputStream.writeInt(date);
            action.write(outputStream);

            if ((flags & 33554432) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                out = new True();
                out.isBareType = true;
                out.read(inputStream);
            }

            if ((flags & 16) != 0) {
                mentioned = new True();
                mentioned.isBareType = true;
                mentioned.read(inputStream);
            }

            if ((flags & 32) != 0) {
                mediaUnread = new True();
                mediaUnread.isBareType = true;
                mediaUnread.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                silent = new True();
                silent.isBareType = true;
                silent.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                post = new True();
                post.isBareType = true;
                post.read(inputStream);
            }

            if ((flags & 524288) != 0) {
                legacy = new True();
                legacy.isBareType = true;
                legacy.read(inputStream);
            }

            id = inputStream.readInt();
            if ((flags & 256) != 0) {
                fromId = ApiScheme.Peer.readObject(inputStream);
            }

            peerId = ApiScheme.Peer.readObject(inputStream);
            if ((flags & 8) != 0) {
                replyTo = ApiScheme.MessageReplyHeader.readObject(inputStream);
            }

            date = inputStream.readInt();
            action = ApiScheme.MessageAction.readObject(inputStream);
            if ((flags & 33554432) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageService{" +
                    "flags=" + flags +
                    ", out=" + out +
                    ", mentioned=" + mentioned +
                    ", mediaUnread=" + mediaUnread +
                    ", silent=" + silent +
                    ", post=" + post +
                    ", legacy=" + legacy +
                    ", id=" + id +
                    ", fromId=" + fromId +
                    ", peerId=" + peerId +
                    ", replyTo=" + replyTo +
                    ", date=" + date +
                    ", action=" + action +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class MessageMediaEmpty extends ApiScheme.MessageMedia {
        public static final int ID = 0x3ded6320;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageMediaEmpty{" +
                    '}';

        }
    }


    public static class MessageMediaPhoto extends ApiScheme.MessageMedia {
        public static final int ID = 0x695150d7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaPhoto";
        public int flags;
        public ApiScheme.Photo photo = null;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = ttlSeconds != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            if ((flags & 4) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                photo = ApiScheme.Photo.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageMediaPhoto{" +
                    "flags=" + flags +
                    ", photo=" + photo +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class MessageMediaGeo extends ApiScheme.MessageMedia {
        public static final int ID = 0x56e0d474;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaGeo";
        public ApiScheme.GeoPoint geo;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geo.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geo = ApiScheme.GeoPoint.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageMediaGeo{" +
                    "geo=" + geo +
                    '}';

        }
    }


    public static class MessageMediaContact extends ApiScheme.MessageMedia {
        public static final int ID = 0x70322949;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaContact";
        public String phoneNumber;
        public String firstName;
        public String lastName;
        public String vcard;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(phoneNumber);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeTLString(vcard);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phoneNumber = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            vcard = inputStream.readTLString();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageMediaContact{" +
                    "phoneNumber=" + phoneNumber +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", vcard=" + vcard +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class MessageMediaUnsupported extends ApiScheme.MessageMedia {
        public static final int ID = 0x9f84f49e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaUnsupported";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageMediaUnsupported{" +
                    '}';

        }
    }


    public static class MessageMediaDocument extends ApiScheme.MessageMedia {
        public static final int ID = 0x9cb070d7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaDocument";
        public int flags;
        public True nopremium = null;
        public ApiScheme.Document document = null;
        public Integer ttlSeconds = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = nopremium != null ? (flags | 8) : (flags & ~8);
            flags = document != null ? (flags | 1) : (flags & ~1);
            flags = ttlSeconds != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 8) != 0 && nopremium != null) {
                nopremium.isBareType = true;
                nopremium.write(outputStream);
            }

            if ((flags & 1) != 0 && document != null) {
                document.write(outputStream);
            }

            if ((flags & 4) != 0 && ttlSeconds != null) {
                outputStream.writeInt(ttlSeconds);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 8) != 0) {
                nopremium = new True();
                nopremium.isBareType = true;
                nopremium.read(inputStream);
            }

            if ((flags & 1) != 0) {
                document = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                ttlSeconds = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageMediaDocument{" +
                    "flags=" + flags +
                    ", nopremium=" + nopremium +
                    ", document=" + document +
                    ", ttlSeconds=" + ttlSeconds +
                    '}';

        }
    }


    public static class MessageMediaWebPage extends ApiScheme.MessageMedia {
        public static final int ID = 0xa32dd600;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaWebPage";
        public ApiScheme.WebPage webpage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            webpage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            webpage = ApiScheme.WebPage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageMediaWebPage{" +
                    "webpage=" + webpage +
                    '}';

        }
    }


    public static class MessageMediaVenue extends ApiScheme.MessageMedia {
        public static final int ID = 0x2ec0533f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaVenue";
        public ApiScheme.GeoPoint geo;
        public String title;
        public String address;
        public String provider;
        public String venueId;
        public String venueType;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geo.write(outputStream);

            outputStream.writeTLString(title);
            outputStream.writeTLString(address);
            outputStream.writeTLString(provider);
            outputStream.writeTLString(venueId);
            outputStream.writeTLString(venueType);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geo = ApiScheme.GeoPoint.readObject(inputStream);
            title = inputStream.readTLString();
            address = inputStream.readTLString();
            provider = inputStream.readTLString();
            venueId = inputStream.readTLString();
            venueType = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageMediaVenue{" +
                    "geo=" + geo +
                    ", title=" + title +
                    ", address=" + address +
                    ", provider=" + provider +
                    ", venueId=" + venueId +
                    ", venueType=" + venueType +
                    '}';

        }
    }


    public static class MessageMediaGame extends ApiScheme.MessageMedia {
        public static final int ID = 0xfdb19008;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaGame";
        public ApiScheme.Game game;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            game.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            game = ApiScheme.Game.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageMediaGame{" +
                    "game=" + game +
                    '}';

        }
    }


    public static class MessageMediaInvoice extends ApiScheme.MessageMedia {
        public static final int ID = 0x84551347;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaInvoice";
        public int flags;
        public True shippingAddressRequested = null;
        public True test = null;
        public String title;
        public String description;
        public ApiScheme.WebDocument photo = null;
        public Integer receiptMsgId = null;
        public String currency;
        public long totalAmount;
        public String startParam;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = shippingAddressRequested != null ? (flags | 2) : (flags & ~2);
            flags = test != null ? (flags | 8) : (flags & ~8);
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = receiptMsgId != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && shippingAddressRequested != null) {
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.write(outputStream);
            }

            if ((flags & 8) != 0 && test != null) {
                test.isBareType = true;
                test.write(outputStream);
            }

            outputStream.writeTLString(title);
            outputStream.writeTLString(description);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            if ((flags & 4) != 0 && receiptMsgId != null) {
                outputStream.writeInt(receiptMsgId);
            }

            outputStream.writeTLString(currency);
            outputStream.writeLong(totalAmount);
            outputStream.writeTLString(startParam);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                shippingAddressRequested = new True();
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.read(inputStream);
            }

            if ((flags & 8) != 0) {
                test = new True();
                test.isBareType = true;
                test.read(inputStream);
            }

            title = inputStream.readTLString();
            description = inputStream.readTLString();
            if ((flags & 1) != 0) {
                photo = ApiScheme.WebDocument.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                receiptMsgId = inputStream.readInt();
            }

            currency = inputStream.readTLString();
            totalAmount = inputStream.readLong();
            startParam = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageMediaInvoice{" +
                    "flags=" + flags +
                    ", shippingAddressRequested=" + shippingAddressRequested +
                    ", test=" + test +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", receiptMsgId=" + receiptMsgId +
                    ", currency=" + currency +
                    ", totalAmount=" + totalAmount +
                    ", startParam=" + startParam +
                    '}';

        }
    }


    public static class MessageMediaGeoLive extends ApiScheme.MessageMedia {
        public static final int ID = 0xb940c666;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaGeoLive";
        public int flags;
        public ApiScheme.GeoPoint geo;
        public Integer heading = null;
        public int period;
        public Integer proximityNotificationRadius = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = heading != null ? (flags | 1) : (flags & ~1);
            flags = proximityNotificationRadius != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            geo.write(outputStream);

            if ((flags & 1) != 0 && heading != null) {
                outputStream.writeInt(heading);
            }

            outputStream.writeInt(period);
            if ((flags & 2) != 0 && proximityNotificationRadius != null) {
                outputStream.writeInt(proximityNotificationRadius);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            geo = ApiScheme.GeoPoint.readObject(inputStream);
            if ((flags & 1) != 0) {
                heading = inputStream.readInt();
            }

            period = inputStream.readInt();
            if ((flags & 2) != 0) {
                proximityNotificationRadius = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageMediaGeoLive{" +
                    "flags=" + flags +
                    ", geo=" + geo +
                    ", heading=" + heading +
                    ", period=" + period +
                    ", proximityNotificationRadius=" + proximityNotificationRadius +
                    '}';

        }
    }


    public static class MessageMediaPoll extends ApiScheme.MessageMedia {
        public static final int ID = 0x4bd6e798;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaPoll";
        public ApiScheme.Poll poll;
        public ApiScheme.PollResults results;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            poll.write(outputStream);

            results.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            poll = ApiScheme.Poll.readObject(inputStream);
            results = ApiScheme.PollResults.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageMediaPoll{" +
                    "poll=" + poll +
                    ", results=" + results +
                    '}';

        }
    }


    public static class MessageMediaDice extends ApiScheme.MessageMedia {
        public static final int ID = 0x3f7ee58b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageMediaDice";
        public int value;
        public String emoticon;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(value);
            outputStream.writeTLString(emoticon);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = inputStream.readInt();
            emoticon = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageMediaDice{" +
                    "value=" + value +
                    ", emoticon=" + emoticon +
                    '}';

        }
    }


    public static class MessageActionEmpty extends ApiScheme.MessageAction {
        public static final int ID = 0xb6aef7b0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionEmpty{" +
                    '}';

        }
    }


    public static class MessageActionChatCreate extends ApiScheme.MessageAction {
        public static final int ID = 0xbd47cbad;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatCreate";
        public String title;
        public TLVector<TLLong> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(title);
            users.isBareTypeItem = true;
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = inputStream.readTLString();
            users = new TLVector<TLLong>(TLLong.class);
            users.isBareTypeItem = true;
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "MessageActionChatCreate{" +
                    "title=" + title +
                    ", users=" + users +
                    '}';

        }
    }


    public static class MessageActionChatEditTitle extends ApiScheme.MessageAction {
        public static final int ID = 0xb5a1ce5a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatEditTitle";
        public String title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(title);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionChatEditTitle{" +
                    "title=" + title +
                    '}';

        }
    }


    public static class MessageActionChatEditPhoto extends ApiScheme.MessageAction {
        public static final int ID = 0x7fcb13a8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatEditPhoto";
        public ApiScheme.Photo photo;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            photo.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            photo = ApiScheme.Photo.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageActionChatEditPhoto{" +
                    "photo=" + photo +
                    '}';

        }
    }


    public static class MessageActionChatDeletePhoto extends ApiScheme.MessageAction {
        public static final int ID = 0x95e3fbef;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatDeletePhoto";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionChatDeletePhoto{" +
                    '}';

        }
    }


    public static class MessageActionChatAddUser extends ApiScheme.MessageAction {
        public static final int ID = 0x15cefd00;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatAddUser";
        public TLVector<TLLong> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            users.isBareTypeItem = true;
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            users = new TLVector<TLLong>(TLLong.class);
            users.isBareTypeItem = true;
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "MessageActionChatAddUser{" +
                    "users=" + users +
                    '}';

        }
    }


    public static class MessageActionChatDeleteUser extends ApiScheme.MessageAction {
        public static final int ID = 0xa43f30cc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatDeleteUser";
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageActionChatDeleteUser{" +
                    "userId=" + userId +
                    '}';

        }
    }


    public static class MessageActionChatJoinedByLink extends ApiScheme.MessageAction {
        public static final int ID = 0x31224c3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatJoinedByLink";
        public long inviterId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(inviterId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            inviterId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageActionChatJoinedByLink{" +
                    "inviterId=" + inviterId +
                    '}';

        }
    }


    public static class MessageActionChannelCreate extends ApiScheme.MessageAction {
        public static final int ID = 0x95d2ac92;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChannelCreate";
        public String title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(title);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionChannelCreate{" +
                    "title=" + title +
                    '}';

        }
    }


    public static class MessageActionChatMigrateTo extends ApiScheme.MessageAction {
        public static final int ID = 0xe1037f92;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatMigrateTo";
        public long channelId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageActionChatMigrateTo{" +
                    "channelId=" + channelId +
                    '}';

        }
    }


    public static class MessageActionChannelMigrateFrom extends ApiScheme.MessageAction {
        public static final int ID = 0xea3948e9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChannelMigrateFrom";
        public String title;
        public long chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(title);
            outputStream.writeLong(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = inputStream.readTLString();
            chatId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageActionChannelMigrateFrom{" +
                    "title=" + title +
                    ", chatId=" + chatId +
                    '}';

        }
    }


    public static class MessageActionPinMessage extends ApiScheme.MessageAction {
        public static final int ID = 0x94bd38ed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionPinMessage";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionPinMessage{" +
                    '}';

        }
    }


    public static class MessageActionHistoryClear extends ApiScheme.MessageAction {
        public static final int ID = 0x9fbab604;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionHistoryClear";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionHistoryClear{" +
                    '}';

        }
    }


    public static class MessageActionGameScore extends ApiScheme.MessageAction {
        public static final int ID = 0x92a72876;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionGameScore";
        public long gameId;
        public int score;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(gameId);
            outputStream.writeInt(score);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            gameId = inputStream.readLong();
            score = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageActionGameScore{" +
                    "gameId=" + gameId +
                    ", score=" + score +
                    '}';

        }
    }


    public static class MessageActionPaymentSentMe extends ApiScheme.MessageAction {
        public static final int ID = 0x8f31b327;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionPaymentSentMe";
        public int flags;
        public True recurringInit = null;
        public True recurringUsed = null;
        public String currency;
        public long totalAmount;
        public byte[] payload;
        public ApiScheme.PaymentRequestedInfo info = null;
        public String shippingOptionId = null;
        public ApiScheme.PaymentCharge charge;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = recurringInit != null ? (flags | 4) : (flags & ~4);
            flags = recurringUsed != null ? (flags | 8) : (flags & ~8);
            flags = info != null ? (flags | 1) : (flags & ~1);
            flags = shippingOptionId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && recurringInit != null) {
                recurringInit.isBareType = true;
                recurringInit.write(outputStream);
            }

            if ((flags & 8) != 0 && recurringUsed != null) {
                recurringUsed.isBareType = true;
                recurringUsed.write(outputStream);
            }

            outputStream.writeTLString(currency);
            outputStream.writeLong(totalAmount);
            outputStream.writeTLBytes(payload);
            if ((flags & 1) != 0 && info != null) {
                info.write(outputStream);
            }

            if ((flags & 2) != 0 && shippingOptionId != null) {
                outputStream.writeTLString(shippingOptionId);
            }

            charge.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                recurringInit = new True();
                recurringInit.isBareType = true;
                recurringInit.read(inputStream);
            }

            if ((flags & 8) != 0) {
                recurringUsed = new True();
                recurringUsed.isBareType = true;
                recurringUsed.read(inputStream);
            }

            currency = inputStream.readTLString();
            totalAmount = inputStream.readLong();
            payload = inputStream.readTLBytes();
            if ((flags & 1) != 0) {
                info = ApiScheme.PaymentRequestedInfo.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                shippingOptionId = inputStream.readTLString();
            }

            charge = ApiScheme.PaymentCharge.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageActionPaymentSentMe{" +
                    "flags=" + flags +
                    ", recurringInit=" + recurringInit +
                    ", recurringUsed=" + recurringUsed +
                    ", currency=" + currency +
                    ", totalAmount=" + totalAmount +
                    ", payload=" + payload +
                    ", info=" + info +
                    ", shippingOptionId=" + shippingOptionId +
                    ", charge=" + charge +
                    '}';

        }
    }


    public static class MessageActionPaymentSent extends ApiScheme.MessageAction {
        public static final int ID = 0x96163f56;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionPaymentSent";
        public int flags;
        public True recurringInit = null;
        public True recurringUsed = null;
        public String currency;
        public long totalAmount;
        public String invoiceSlug = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = recurringInit != null ? (flags | 4) : (flags & ~4);
            flags = recurringUsed != null ? (flags | 8) : (flags & ~8);
            flags = invoiceSlug != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && recurringInit != null) {
                recurringInit.isBareType = true;
                recurringInit.write(outputStream);
            }

            if ((flags & 8) != 0 && recurringUsed != null) {
                recurringUsed.isBareType = true;
                recurringUsed.write(outputStream);
            }

            outputStream.writeTLString(currency);
            outputStream.writeLong(totalAmount);
            if ((flags & 1) != 0 && invoiceSlug != null) {
                outputStream.writeTLString(invoiceSlug);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                recurringInit = new True();
                recurringInit.isBareType = true;
                recurringInit.read(inputStream);
            }

            if ((flags & 8) != 0) {
                recurringUsed = new True();
                recurringUsed.isBareType = true;
                recurringUsed.read(inputStream);
            }

            currency = inputStream.readTLString();
            totalAmount = inputStream.readLong();
            if ((flags & 1) != 0) {
                invoiceSlug = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "MessageActionPaymentSent{" +
                    "flags=" + flags +
                    ", recurringInit=" + recurringInit +
                    ", recurringUsed=" + recurringUsed +
                    ", currency=" + currency +
                    ", totalAmount=" + totalAmount +
                    ", invoiceSlug=" + invoiceSlug +
                    '}';

        }
    }


    public static class MessageActionPhoneCall extends ApiScheme.MessageAction {
        public static final int ID = 0x80e11a7f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionPhoneCall";
        public int flags;
        public True video = null;
        public long callId;
        public ApiScheme.PhoneCallDiscardReason reason = null;
        public Integer duration = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = video != null ? (flags | 4) : (flags & ~4);
            flags = reason != null ? (flags | 1) : (flags & ~1);
            flags = duration != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(callId);
            if ((flags & 1) != 0 && reason != null) {
                reason.write(outputStream);
            }

            if ((flags & 2) != 0 && duration != null) {
                outputStream.writeInt(duration);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            callId = inputStream.readLong();
            if ((flags & 1) != 0) {
                reason = ApiScheme.PhoneCallDiscardReason.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                duration = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageActionPhoneCall{" +
                    "flags=" + flags +
                    ", video=" + video +
                    ", callId=" + callId +
                    ", reason=" + reason +
                    ", duration=" + duration +
                    '}';

        }
    }


    public static class MessageActionScreenshotTaken extends ApiScheme.MessageAction {
        public static final int ID = 0x4792929b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionScreenshotTaken";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionScreenshotTaken{" +
                    '}';

        }
    }


    public static class MessageActionCustomAction extends ApiScheme.MessageAction {
        public static final int ID = 0xfae69f56;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionCustomAction";
        public String message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(message);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionCustomAction{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class MessageActionBotAllowed extends ApiScheme.MessageAction {
        public static final int ID = 0xabe9affe;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionBotAllowed";
        public String domain;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(domain);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            domain = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionBotAllowed{" +
                    "domain=" + domain +
                    '}';

        }
    }


    public static class MessageActionSecureValuesSentMe extends ApiScheme.MessageAction {
        public static final int ID = 0x1b287353;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionSecureValuesSentMe";
        public TLVector<ApiScheme.SecureValue> values;
        public ApiScheme.SecureCredentialsEncrypted credentials;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            values.write(outputStream);

            credentials.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            values = new TLVector<ApiScheme.SecureValue>(ApiScheme.SecureValue.class);
            values.read(inputStream);

            credentials = ApiScheme.SecureCredentialsEncrypted.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "MessageActionSecureValuesSentMe{" +
                    "values=" + values +
                    ", credentials=" + credentials +
                    '}';

        }
    }


    public static class MessageActionSecureValuesSent extends ApiScheme.MessageAction {
        public static final int ID = 0xd95c6154;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionSecureValuesSent";
        public TLVector<ApiScheme.SecureValueType> types;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            types.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            types = new TLVector<ApiScheme.SecureValueType>(ApiScheme.SecureValueType.class);
            types.read(inputStream);


        }

        @Override
        public String toString() {
            return "MessageActionSecureValuesSent{" +
                    "types=" + types +
                    '}';

        }
    }


    public static class MessageActionContactSignUp extends ApiScheme.MessageAction {
        public static final int ID = 0xf3f25f76;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionContactSignUp";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionContactSignUp{" +
                    '}';

        }
    }


    public static class MessageActionGeoProximityReached extends ApiScheme.MessageAction {
        public static final int ID = 0x98e0d697;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionGeoProximityReached";
        public ApiScheme.Peer fromId;
        public ApiScheme.Peer toId;
        public int distance;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            fromId.write(outputStream);

            toId.write(outputStream);

            outputStream.writeInt(distance);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            fromId = ApiScheme.Peer.readObject(inputStream);
            toId = ApiScheme.Peer.readObject(inputStream);
            distance = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageActionGeoProximityReached{" +
                    "fromId=" + fromId +
                    ", toId=" + toId +
                    ", distance=" + distance +
                    '}';

        }
    }


    public static class MessageActionGroupCall extends ApiScheme.MessageAction {
        public static final int ID = 0x7a0d7f42;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionGroupCall";
        public int flags;
        public ApiScheme.InputGroupCall call;
        public Integer duration = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = duration != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            call.write(outputStream);

            if ((flags & 1) != 0 && duration != null) {
                outputStream.writeInt(duration);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            call = ApiScheme.InputGroupCall.readObject(inputStream);
            if ((flags & 1) != 0) {
                duration = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageActionGroupCall{" +
                    "flags=" + flags +
                    ", call=" + call +
                    ", duration=" + duration +
                    '}';

        }
    }


    public static class MessageActionInviteToGroupCall extends ApiScheme.MessageAction {
        public static final int ID = 0x502f92f7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionInviteToGroupCall";
        public ApiScheme.InputGroupCall call;
        public TLVector<TLLong> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            call.write(outputStream);

            users.isBareTypeItem = true;
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            call = ApiScheme.InputGroupCall.readObject(inputStream);
            users = new TLVector<TLLong>(TLLong.class);
            users.isBareTypeItem = true;
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "MessageActionInviteToGroupCall{" +
                    "call=" + call +
                    ", users=" + users +
                    '}';

        }
    }


    public static class MessageActionSetMessagesTTL extends ApiScheme.MessageAction {
        public static final int ID = 0xaa1afbfd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionSetMessagesTTL";
        public int period;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(period);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            period = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageActionSetMessagesTTL{" +
                    "period=" + period +
                    '}';

        }
    }


    public static class MessageActionGroupCallScheduled extends ApiScheme.MessageAction {
        public static final int ID = 0xb3a07661;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionGroupCallScheduled";
        public ApiScheme.InputGroupCall call;
        public int scheduleDate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            call.write(outputStream);

            outputStream.writeInt(scheduleDate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            call = ApiScheme.InputGroupCall.readObject(inputStream);
            scheduleDate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageActionGroupCallScheduled{" +
                    "call=" + call +
                    ", scheduleDate=" + scheduleDate +
                    '}';

        }
    }


    public static class MessageActionSetChatTheme extends ApiScheme.MessageAction {
        public static final int ID = 0xaa786345;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionSetChatTheme";
        public String emoticon;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionSetChatTheme{" +
                    "emoticon=" + emoticon +
                    '}';

        }
    }


    public static class MessageActionChatJoinedByRequest extends ApiScheme.MessageAction {
        public static final int ID = 0xebbca3cb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionChatJoinedByRequest";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "MessageActionChatJoinedByRequest{" +
                    '}';

        }
    }


    public static class MessageActionWebViewDataSentMe extends ApiScheme.MessageAction {
        public static final int ID = 0x47dd8079;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionWebViewDataSentMe";
        public String text;
        public String data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(data);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            data = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionWebViewDataSentMe{" +
                    "text=" + text +
                    ", data=" + data +
                    '}';

        }
    }


    public static class MessageActionWebViewDataSent extends ApiScheme.MessageAction {
        public static final int ID = 0xb4c38cb5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionWebViewDataSent";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageActionWebViewDataSent{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class MessageActionGiftPremium extends ApiScheme.MessageAction {
        public static final int ID = 0xaba0f5c6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageActionGiftPremium";
        public String currency;
        public long amount;
        public int months;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(currency);
            outputStream.writeLong(amount);
            outputStream.writeInt(months);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            currency = inputStream.readTLString();
            amount = inputStream.readLong();
            months = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageActionGiftPremium{" +
                    "currency=" + currency +
                    ", amount=" + amount +
                    ", months=" + months +
                    '}';

        }
    }


    public static class Dialog2 extends ApiScheme.Dialog {
        public static final int ID = 0xa8edd0f5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialog";
        public int flags;
        public True pinned = null;
        public True unreadMark = null;
        public ApiScheme.Peer peer;
        public int topMessage;
        public int readInboxMaxId;
        public int readOutboxMaxId;
        public int unreadCount;
        public int unreadMentionsCount;
        public int unreadReactionsCount;
        public ApiScheme.PeerNotifySettings notifySettings;
        public Integer pts = null;
        public ApiScheme.DraftMessage draft = null;
        public Integer folderId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pinned != null ? (flags | 4) : (flags & ~4);
            flags = unreadMark != null ? (flags | 8) : (flags & ~8);
            flags = pts != null ? (flags | 1) : (flags & ~1);
            flags = draft != null ? (flags | 2) : (flags & ~2);
            flags = folderId != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            if ((flags & 8) != 0 && unreadMark != null) {
                unreadMark.isBareType = true;
                unreadMark.write(outputStream);
            }

            peer.write(outputStream);

            outputStream.writeInt(topMessage);
            outputStream.writeInt(readInboxMaxId);
            outputStream.writeInt(readOutboxMaxId);
            outputStream.writeInt(unreadCount);
            outputStream.writeInt(unreadMentionsCount);
            outputStream.writeInt(unreadReactionsCount);
            notifySettings.write(outputStream);

            if ((flags & 1) != 0 && pts != null) {
                outputStream.writeInt(pts);
            }

            if ((flags & 2) != 0 && draft != null) {
                draft.write(outputStream);
            }

            if ((flags & 16) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            if ((flags & 8) != 0) {
                unreadMark = new True();
                unreadMark.isBareType = true;
                unreadMark.read(inputStream);
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            topMessage = inputStream.readInt();
            readInboxMaxId = inputStream.readInt();
            readOutboxMaxId = inputStream.readInt();
            unreadCount = inputStream.readInt();
            unreadMentionsCount = inputStream.readInt();
            unreadReactionsCount = inputStream.readInt();
            notifySettings = ApiScheme.PeerNotifySettings.readObject(inputStream);
            if ((flags & 1) != 0) {
                pts = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                draft = ApiScheme.DraftMessage.readObject(inputStream);
            }

            if ((flags & 16) != 0) {
                folderId = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Dialog{" +
                    "flags=" + flags +
                    ", pinned=" + pinned +
                    ", unreadMark=" + unreadMark +
                    ", peer=" + peer +
                    ", topMessage=" + topMessage +
                    ", readInboxMaxId=" + readInboxMaxId +
                    ", readOutboxMaxId=" + readOutboxMaxId +
                    ", unreadCount=" + unreadCount +
                    ", unreadMentionsCount=" + unreadMentionsCount +
                    ", unreadReactionsCount=" + unreadReactionsCount +
                    ", notifySettings=" + notifySettings +
                    ", pts=" + pts +
                    ", draft=" + draft +
                    ", folderId=" + folderId +
                    '}';

        }
    }


    public static class DialogFolder extends ApiScheme.Dialog {
        public static final int ID = 0x71bd134c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogFolder";
        public int flags;
        public True pinned = null;
        public ApiScheme.Folder folder;
        public ApiScheme.Peer peer;
        public int topMessage;
        public int unreadMutedPeersCount;
        public int unreadUnmutedPeersCount;
        public int unreadMutedMessagesCount;
        public int unreadUnmutedMessagesCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pinned != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            folder.write(outputStream);

            peer.write(outputStream);

            outputStream.writeInt(topMessage);
            outputStream.writeInt(unreadMutedPeersCount);
            outputStream.writeInt(unreadUnmutedPeersCount);
            outputStream.writeInt(unreadMutedMessagesCount);
            outputStream.writeInt(unreadUnmutedMessagesCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            folder = ApiScheme.Folder.readObject(inputStream);
            peer = ApiScheme.Peer.readObject(inputStream);
            topMessage = inputStream.readInt();
            unreadMutedPeersCount = inputStream.readInt();
            unreadUnmutedPeersCount = inputStream.readInt();
            unreadMutedMessagesCount = inputStream.readInt();
            unreadUnmutedMessagesCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "DialogFolder{" +
                    "flags=" + flags +
                    ", pinned=" + pinned +
                    ", folder=" + folder +
                    ", peer=" + peer +
                    ", topMessage=" + topMessage +
                    ", unreadMutedPeersCount=" + unreadMutedPeersCount +
                    ", unreadUnmutedPeersCount=" + unreadUnmutedPeersCount +
                    ", unreadMutedMessagesCount=" + unreadMutedMessagesCount +
                    ", unreadUnmutedMessagesCount=" + unreadUnmutedMessagesCount +
                    '}';

        }
    }


    public static class PhotoEmpty extends ApiScheme.Photo {
        public static final int ID = 0x2331b22d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "PhotoEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class Photo2 extends ApiScheme.Photo {
        public static final int ID = 0xfb197a65;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photo";
        public int flags;
        public True hasStickers = null;
        public long id;
        public long accessHash;
        public byte[] fileReference;
        public int date;
        public TLVector<ApiScheme.PhotoSize> sizes;
        public TLVector<ApiScheme.VideoSize> videoSizes = null;
        public int dcId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = hasStickers != null ? (flags | 1) : (flags & ~1);
            flags = videoSizes != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && hasStickers != null) {
                hasStickers.isBareType = true;
                hasStickers.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);
            outputStream.writeInt(date);
            sizes.write(outputStream);

            if ((flags & 2) != 0 && videoSizes != null) {
                videoSizes.write(outputStream);
            }

            outputStream.writeInt(dcId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                hasStickers = new True();
                hasStickers.isBareType = true;
                hasStickers.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();
            date = inputStream.readInt();
            sizes = new TLVector<ApiScheme.PhotoSize>(ApiScheme.PhotoSize.class);
            sizes.read(inputStream);

            if ((flags & 2) != 0) {
                videoSizes = new TLVector<ApiScheme.VideoSize>(ApiScheme.VideoSize.class);
                videoSizes.read(inputStream);
            }

            dcId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "Photo{" +
                    "flags=" + flags +
                    ", hasStickers=" + hasStickers +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    ", date=" + date +
                    ", sizes=" + sizes +
                    ", videoSizes=" + videoSizes +
                    ", dcId=" + dcId +
                    '}';

        }
    }


    public static class PhotoSizeEmpty extends ApiScheme.PhotoSize {
        public static final int ID = 0xe17e23c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoSizeEmpty";
        public String type;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PhotoSizeEmpty{" +
                    "type=" + type +
                    '}';

        }
    }


    public static class PhotoSize2 extends ApiScheme.PhotoSize {
        public static final int ID = 0x75c78e60;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoSize";
        public String type;
        public int w;
        public int h;
        public int size;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            outputStream.writeInt(size);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();
            w = inputStream.readInt();
            h = inputStream.readInt();
            size = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PhotoSize{" +
                    "type=" + type +
                    ", w=" + w +
                    ", h=" + h +
                    ", size=" + size +
                    '}';

        }
    }


    public static class PhotoCachedSize extends ApiScheme.PhotoSize {
        public static final int ID = 0x21e1ad6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoCachedSize";
        public String type;
        public int w;
        public int h;
        public byte[] bytes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            outputStream.writeTLBytes(bytes);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();
            w = inputStream.readInt();
            h = inputStream.readInt();
            bytes = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PhotoCachedSize{" +
                    "type=" + type +
                    ", w=" + w +
                    ", h=" + h +
                    ", bytes=" + bytes +
                    '}';

        }
    }


    public static class PhotoStrippedSize extends ApiScheme.PhotoSize {
        public static final int ID = 0xe0b0bc2e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoStrippedSize";
        public String type;
        public byte[] bytes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);
            outputStream.writeTLBytes(bytes);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();
            bytes = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PhotoStrippedSize{" +
                    "type=" + type +
                    ", bytes=" + bytes +
                    '}';

        }
    }


    public static class PhotoSizeProgressive extends ApiScheme.PhotoSize {
        public static final int ID = 0xfa3efb95;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoSizeProgressive";
        public String type;
        public int w;
        public int h;
        public TLVector<TLInt> sizes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            sizes.isBareTypeItem = true;
            sizes.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();
            w = inputStream.readInt();
            h = inputStream.readInt();
            sizes = new TLVector<TLInt>(TLInt.class);
            sizes.isBareTypeItem = true;
            sizes.read(inputStream);


        }

        @Override
        public String toString() {
            return "PhotoSizeProgressive{" +
                    "type=" + type +
                    ", w=" + w +
                    ", h=" + h +
                    ", sizes=" + sizes +
                    '}';

        }
    }


    public static class PhotoPathSize extends ApiScheme.PhotoSize {
        public static final int ID = 0xd8214d41;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "photoPathSize";
        public String type;
        public byte[] bytes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(type);
            outputStream.writeTLBytes(bytes);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = inputStream.readTLString();
            bytes = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PhotoPathSize{" +
                    "type=" + type +
                    ", bytes=" + bytes +
                    '}';

        }
    }


    public static class GeoPointEmpty extends ApiScheme.GeoPoint {
        public static final int ID = 0x1117dd5f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "geoPointEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "GeoPointEmpty{" +
                    '}';

        }
    }


    public static class GeoPoint2 extends ApiScheme.GeoPoint {
        public static final int ID = 0xb2a2f663;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "geoPoint";
        public int flags;
        public double mLong;
        public double lat;
        public long accessHash;
        public Integer accuracyRadius = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = accuracyRadius != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeDouble(mLong);
            outputStream.writeDouble(lat);
            outputStream.writeLong(accessHash);
            if ((flags & 1) != 0 && accuracyRadius != null) {
                outputStream.writeInt(accuracyRadius);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            mLong = inputStream.readDouble();
            lat = inputStream.readDouble();
            accessHash = inputStream.readLong();
            if ((flags & 1) != 0) {
                accuracyRadius = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "GeoPoint{" +
                    "flags=" + flags +
                    ", mLong=" + mLong +
                    ", lat=" + lat +
                    ", accessHash=" + accessHash +
                    ", accuracyRadius=" + accuracyRadius +
                    '}';

        }
    }


    public static class InputNotifyPeer2 extends ApiScheme.InputNotifyPeer {
        public static final int ID = 0xb8bc5b0c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputNotifyPeer";
        public ApiScheme.InputPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputNotifyPeer{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class InputNotifyUsers extends ApiScheme.InputNotifyPeer {
        public static final int ID = 0x193b4417;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputNotifyUsers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputNotifyUsers{" +
                    '}';

        }
    }


    public static class InputNotifyChats extends ApiScheme.InputNotifyPeer {
        public static final int ID = 0x4a95e84e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputNotifyChats";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputNotifyChats{" +
                    '}';

        }
    }


    public static class InputNotifyBroadcasts extends ApiScheme.InputNotifyPeer {
        public static final int ID = 0xb1db7c7e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputNotifyBroadcasts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputNotifyBroadcasts{" +
                    '}';

        }
    }


    public static class InputPeerNotifySettings2 extends ApiScheme.InputPeerNotifySettings {
        public static final int ID = 0xdf1f002b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPeerNotifySettings";
        public int flags;
        public ApiScheme.Bool showPreviews = null;
        public ApiScheme.Bool silent = null;
        public Integer muteUntil = null;
        public ApiScheme.NotificationSound sound = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = showPreviews != null ? (flags | 1) : (flags & ~1);
            flags = silent != null ? (flags | 2) : (flags & ~2);
            flags = muteUntil != null ? (flags | 4) : (flags & ~4);
            flags = sound != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && showPreviews != null) {
                showPreviews.write(outputStream);
            }

            if ((flags & 2) != 0 && silent != null) {
                silent.write(outputStream);
            }

            if ((flags & 4) != 0 && muteUntil != null) {
                outputStream.writeInt(muteUntil);
            }

            if ((flags & 8) != 0 && sound != null) {
                sound.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                showPreviews = ApiScheme.Bool.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                silent = ApiScheme.Bool.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                muteUntil = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                sound = ApiScheme.NotificationSound.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputPeerNotifySettings{" +
                    "flags=" + flags +
                    ", showPreviews=" + showPreviews +
                    ", silent=" + silent +
                    ", muteUntil=" + muteUntil +
                    ", sound=" + sound +
                    '}';

        }
    }


    public static class PeerNotifySettings2 extends ApiScheme.PeerNotifySettings {
        public static final int ID = 0xa83b0426;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerNotifySettings";
        public int flags;
        public ApiScheme.Bool showPreviews = null;
        public ApiScheme.Bool silent = null;
        public Integer muteUntil = null;
        public ApiScheme.NotificationSound iosSound = null;
        public ApiScheme.NotificationSound androidSound = null;
        public ApiScheme.NotificationSound otherSound = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = showPreviews != null ? (flags | 1) : (flags & ~1);
            flags = silent != null ? (flags | 2) : (flags & ~2);
            flags = muteUntil != null ? (flags | 4) : (flags & ~4);
            flags = iosSound != null ? (flags | 8) : (flags & ~8);
            flags = androidSound != null ? (flags | 16) : (flags & ~16);
            flags = otherSound != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && showPreviews != null) {
                showPreviews.write(outputStream);
            }

            if ((flags & 2) != 0 && silent != null) {
                silent.write(outputStream);
            }

            if ((flags & 4) != 0 && muteUntil != null) {
                outputStream.writeInt(muteUntil);
            }

            if ((flags & 8) != 0 && iosSound != null) {
                iosSound.write(outputStream);
            }

            if ((flags & 16) != 0 && androidSound != null) {
                androidSound.write(outputStream);
            }

            if ((flags & 32) != 0 && otherSound != null) {
                otherSound.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                showPreviews = ApiScheme.Bool.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                silent = ApiScheme.Bool.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                muteUntil = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                iosSound = ApiScheme.NotificationSound.readObject(inputStream);
            }

            if ((flags & 16) != 0) {
                androidSound = ApiScheme.NotificationSound.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                otherSound = ApiScheme.NotificationSound.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "PeerNotifySettings{" +
                    "flags=" + flags +
                    ", showPreviews=" + showPreviews +
                    ", silent=" + silent +
                    ", muteUntil=" + muteUntil +
                    ", iosSound=" + iosSound +
                    ", androidSound=" + androidSound +
                    ", otherSound=" + otherSound +
                    '}';

        }
    }


    public static class PeerSettings2 extends ApiScheme.PeerSettings {
        public static final int ID = 0xa518110d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerSettings";
        public int flags;
        public True reportSpam = null;
        public True addContact = null;
        public True blockContact = null;
        public True shareContact = null;
        public True needContactsException = null;
        public True reportGeo = null;
        public True autoarchived = null;
        public True inviteMembers = null;
        public True requestChatBroadcast = null;
        public Integer geoDistance = null;
        public String requestChatTitle = null;
        public Integer requestChatDate = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = reportSpam != null ? (flags | 1) : (flags & ~1);
            flags = addContact != null ? (flags | 2) : (flags & ~2);
            flags = blockContact != null ? (flags | 4) : (flags & ~4);
            flags = shareContact != null ? (flags | 8) : (flags & ~8);
            flags = needContactsException != null ? (flags | 16) : (flags & ~16);
            flags = reportGeo != null ? (flags | 32) : (flags & ~32);
            flags = autoarchived != null ? (flags | 128) : (flags & ~128);
            flags = inviteMembers != null ? (flags | 256) : (flags & ~256);
            flags = requestChatBroadcast != null ? (flags | 1024) : (flags & ~1024);
            flags = geoDistance != null ? (flags | 64) : (flags & ~64);
            flags = requestChatTitle != null ? (flags | 512) : (flags & ~512);
            flags = requestChatDate != null ? (flags | 512) : (flags & ~512);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && reportSpam != null) {
                reportSpam.isBareType = true;
                reportSpam.write(outputStream);
            }

            if ((flags & 2) != 0 && addContact != null) {
                addContact.isBareType = true;
                addContact.write(outputStream);
            }

            if ((flags & 4) != 0 && blockContact != null) {
                blockContact.isBareType = true;
                blockContact.write(outputStream);
            }

            if ((flags & 8) != 0 && shareContact != null) {
                shareContact.isBareType = true;
                shareContact.write(outputStream);
            }

            if ((flags & 16) != 0 && needContactsException != null) {
                needContactsException.isBareType = true;
                needContactsException.write(outputStream);
            }

            if ((flags & 32) != 0 && reportGeo != null) {
                reportGeo.isBareType = true;
                reportGeo.write(outputStream);
            }

            if ((flags & 128) != 0 && autoarchived != null) {
                autoarchived.isBareType = true;
                autoarchived.write(outputStream);
            }

            if ((flags & 256) != 0 && inviteMembers != null) {
                inviteMembers.isBareType = true;
                inviteMembers.write(outputStream);
            }

            if ((flags & 1024) != 0 && requestChatBroadcast != null) {
                requestChatBroadcast.isBareType = true;
                requestChatBroadcast.write(outputStream);
            }

            if ((flags & 64) != 0 && geoDistance != null) {
                outputStream.writeInt(geoDistance);
            }

            if ((flags & 512) != 0 && requestChatTitle != null) {
                outputStream.writeTLString(requestChatTitle);
            }

            if ((flags & 512) != 0 && requestChatDate != null) {
                outputStream.writeInt(requestChatDate);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                reportSpam = new True();
                reportSpam.isBareType = true;
                reportSpam.read(inputStream);
            }

            if ((flags & 2) != 0) {
                addContact = new True();
                addContact.isBareType = true;
                addContact.read(inputStream);
            }

            if ((flags & 4) != 0) {
                blockContact = new True();
                blockContact.isBareType = true;
                blockContact.read(inputStream);
            }

            if ((flags & 8) != 0) {
                shareContact = new True();
                shareContact.isBareType = true;
                shareContact.read(inputStream);
            }

            if ((flags & 16) != 0) {
                needContactsException = new True();
                needContactsException.isBareType = true;
                needContactsException.read(inputStream);
            }

            if ((flags & 32) != 0) {
                reportGeo = new True();
                reportGeo.isBareType = true;
                reportGeo.read(inputStream);
            }

            if ((flags & 128) != 0) {
                autoarchived = new True();
                autoarchived.isBareType = true;
                autoarchived.read(inputStream);
            }

            if ((flags & 256) != 0) {
                inviteMembers = new True();
                inviteMembers.isBareType = true;
                inviteMembers.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                requestChatBroadcast = new True();
                requestChatBroadcast.isBareType = true;
                requestChatBroadcast.read(inputStream);
            }

            if ((flags & 64) != 0) {
                geoDistance = inputStream.readInt();
            }

            if ((flags & 512) != 0) {
                requestChatTitle = inputStream.readTLString();
            }

            if ((flags & 512) != 0) {
                requestChatDate = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "PeerSettings{" +
                    "flags=" + flags +
                    ", reportSpam=" + reportSpam +
                    ", addContact=" + addContact +
                    ", blockContact=" + blockContact +
                    ", shareContact=" + shareContact +
                    ", needContactsException=" + needContactsException +
                    ", reportGeo=" + reportGeo +
                    ", autoarchived=" + autoarchived +
                    ", inviteMembers=" + inviteMembers +
                    ", requestChatBroadcast=" + requestChatBroadcast +
                    ", geoDistance=" + geoDistance +
                    ", requestChatTitle=" + requestChatTitle +
                    ", requestChatDate=" + requestChatDate +
                    '}';

        }
    }


    public static class WallPaper2 extends ApiScheme.WallPaper {
        public static final int ID = 0xa437c3ed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "wallPaper";
        public long id;
        public int flags;
        public True creator = null;
        public True mDefault = null;
        public True pattern = null;
        public True dark = null;
        public long accessHash;
        public String slug;
        public ApiScheme.Document document;
        public ApiScheme.WallPaperSettings settings = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = creator != null ? (flags | 1) : (flags & ~1);
            flags = mDefault != null ? (flags | 2) : (flags & ~2);
            flags = pattern != null ? (flags | 8) : (flags & ~8);
            flags = dark != null ? (flags | 16) : (flags & ~16);
            flags = settings != null ? (flags | 4) : (flags & ~4);
            outputStream.writeLong(id);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && creator != null) {
                creator.isBareType = true;
                creator.write(outputStream);
            }

            if ((flags & 2) != 0 && mDefault != null) {
                mDefault.isBareType = true;
                mDefault.write(outputStream);
            }

            if ((flags & 8) != 0 && pattern != null) {
                pattern.isBareType = true;
                pattern.write(outputStream);
            }

            if ((flags & 16) != 0 && dark != null) {
                dark.isBareType = true;
                dark.write(outputStream);
            }

            outputStream.writeLong(accessHash);
            outputStream.writeTLString(slug);
            document.write(outputStream);

            if ((flags & 4) != 0 && settings != null) {
                settings.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                creator = new True();
                creator.isBareType = true;
                creator.read(inputStream);
            }

            if ((flags & 2) != 0) {
                mDefault = new True();
                mDefault.isBareType = true;
                mDefault.read(inputStream);
            }

            if ((flags & 8) != 0) {
                pattern = new True();
                pattern.isBareType = true;
                pattern.read(inputStream);
            }

            if ((flags & 16) != 0) {
                dark = new True();
                dark.isBareType = true;
                dark.read(inputStream);
            }

            accessHash = inputStream.readLong();
            slug = inputStream.readTLString();
            document = ApiScheme.Document.readObject(inputStream);
            if ((flags & 4) != 0) {
                settings = ApiScheme.WallPaperSettings.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "WallPaper{" +
                    "id=" + id +
                    ", flags=" + flags +
                    ", creator=" + creator +
                    ", mDefault=" + mDefault +
                    ", pattern=" + pattern +
                    ", dark=" + dark +
                    ", accessHash=" + accessHash +
                    ", slug=" + slug +
                    ", document=" + document +
                    ", settings=" + settings +
                    '}';

        }
    }


    public static class WallPaperNoFile extends ApiScheme.WallPaper {
        public static final int ID = 0xe0804116;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "wallPaperNoFile";
        public long id;
        public int flags;
        public True mDefault = null;
        public True dark = null;
        public ApiScheme.WallPaperSettings settings = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = mDefault != null ? (flags | 2) : (flags & ~2);
            flags = dark != null ? (flags | 16) : (flags & ~16);
            flags = settings != null ? (flags | 4) : (flags & ~4);
            outputStream.writeLong(id);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && mDefault != null) {
                mDefault.isBareType = true;
                mDefault.write(outputStream);
            }

            if ((flags & 16) != 0 && dark != null) {
                dark.isBareType = true;
                dark.write(outputStream);
            }

            if ((flags & 4) != 0 && settings != null) {
                settings.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                mDefault = new True();
                mDefault.isBareType = true;
                mDefault.read(inputStream);
            }

            if ((flags & 16) != 0) {
                dark = new True();
                dark.isBareType = true;
                dark.read(inputStream);
            }

            if ((flags & 4) != 0) {
                settings = ApiScheme.WallPaperSettings.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "WallPaperNoFile{" +
                    "id=" + id +
                    ", flags=" + flags +
                    ", mDefault=" + mDefault +
                    ", dark=" + dark +
                    ", settings=" + settings +
                    '}';

        }
    }


    public static class InputReportReasonSpam extends ApiScheme.ReportReason {
        public static final int ID = 0x58dbcab8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonSpam";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonSpam{" +
                    '}';

        }
    }


    public static class InputReportReasonViolence extends ApiScheme.ReportReason {
        public static final int ID = 0x1e22c78d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonViolence";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonViolence{" +
                    '}';

        }
    }


    public static class InputReportReasonPornography extends ApiScheme.ReportReason {
        public static final int ID = 0x2e59d922;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonPornography";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonPornography{" +
                    '}';

        }
    }


    public static class InputReportReasonChildAbuse extends ApiScheme.ReportReason {
        public static final int ID = 0xadf44ee3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonChildAbuse";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonChildAbuse{" +
                    '}';

        }
    }


    public static class InputReportReasonOther extends ApiScheme.ReportReason {
        public static final int ID = 0xc1e4a2b1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonOther";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonOther{" +
                    '}';

        }
    }


    public static class InputReportReasonCopyright extends ApiScheme.ReportReason {
        public static final int ID = 0x9b89f93a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonCopyright";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonCopyright{" +
                    '}';

        }
    }


    public static class InputReportReasonGeoIrrelevant extends ApiScheme.ReportReason {
        public static final int ID = 0xdbd4feed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonGeoIrrelevant";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonGeoIrrelevant{" +
                    '}';

        }
    }


    public static class InputReportReasonFake extends ApiScheme.ReportReason {
        public static final int ID = 0xf5ddd6e7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonFake";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonFake{" +
                    '}';

        }
    }


    public static class InputReportReasonIllegalDrugs extends ApiScheme.ReportReason {
        public static final int ID = 0xa8eb2be;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonIllegalDrugs";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonIllegalDrugs{" +
                    '}';

        }
    }


    public static class InputReportReasonPersonalDetails extends ApiScheme.ReportReason {
        public static final int ID = 0x9ec7863d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputReportReasonPersonalDetails";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputReportReasonPersonalDetails{" +
                    '}';

        }
    }


    public static class UserFull2 extends ApiScheme.UserFull {
        public static final int ID = 0xc4b1fc3f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "userFull";
        public int flags;
        public True blocked = null;
        public True phoneCallsAvailable = null;
        public True phoneCallsPrivate = null;
        public True canPinMessage = null;
        public True hasScheduled = null;
        public True videoCallsAvailable = null;
        public True voiceMessagesForbidden = null;
        public long id;
        public String about = null;
        public ApiScheme.PeerSettings settings;
        public ApiScheme.Photo profilePhoto = null;
        public ApiScheme.PeerNotifySettings notifySettings;
        public ApiScheme.BotInfo botInfo = null;
        public Integer pinnedMsgId = null;
        public int commonChatsCount;
        public Integer folderId = null;
        public Integer ttlPeriod = null;
        public String themeEmoticon = null;
        public String privateForwardName = null;
        public ApiScheme.ChatAdminRights botGroupAdminRights = null;
        public ApiScheme.ChatAdminRights botBroadcastAdminRights = null;
        public TLVector<ApiScheme.PremiumGiftOption> premiumGifts = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = blocked != null ? (flags | 1) : (flags & ~1);
            flags = phoneCallsAvailable != null ? (flags | 16) : (flags & ~16);
            flags = phoneCallsPrivate != null ? (flags | 32) : (flags & ~32);
            flags = canPinMessage != null ? (flags | 128) : (flags & ~128);
            flags = hasScheduled != null ? (flags | 4096) : (flags & ~4096);
            flags = videoCallsAvailable != null ? (flags | 8192) : (flags & ~8192);
            flags = voiceMessagesForbidden != null ? (flags | 1048576) : (flags & ~1048576);
            flags = about != null ? (flags | 2) : (flags & ~2);
            flags = profilePhoto != null ? (flags | 4) : (flags & ~4);
            flags = botInfo != null ? (flags | 8) : (flags & ~8);
            flags = pinnedMsgId != null ? (flags | 64) : (flags & ~64);
            flags = folderId != null ? (flags | 2048) : (flags & ~2048);
            flags = ttlPeriod != null ? (flags | 16384) : (flags & ~16384);
            flags = themeEmoticon != null ? (flags | 32768) : (flags & ~32768);
            flags = privateForwardName != null ? (flags | 65536) : (flags & ~65536);
            flags = botGroupAdminRights != null ? (flags | 131072) : (flags & ~131072);
            flags = botBroadcastAdminRights != null ? (flags | 262144) : (flags & ~262144);
            flags = premiumGifts != null ? (flags | 524288) : (flags & ~524288);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && blocked != null) {
                blocked.isBareType = true;
                blocked.write(outputStream);
            }

            if ((flags & 16) != 0 && phoneCallsAvailable != null) {
                phoneCallsAvailable.isBareType = true;
                phoneCallsAvailable.write(outputStream);
            }

            if ((flags & 32) != 0 && phoneCallsPrivate != null) {
                phoneCallsPrivate.isBareType = true;
                phoneCallsPrivate.write(outputStream);
            }

            if ((flags & 128) != 0 && canPinMessage != null) {
                canPinMessage.isBareType = true;
                canPinMessage.write(outputStream);
            }

            if ((flags & 4096) != 0 && hasScheduled != null) {
                hasScheduled.isBareType = true;
                hasScheduled.write(outputStream);
            }

            if ((flags & 8192) != 0 && videoCallsAvailable != null) {
                videoCallsAvailable.isBareType = true;
                videoCallsAvailable.write(outputStream);
            }

            if ((flags & 1048576) != 0 && voiceMessagesForbidden != null) {
                voiceMessagesForbidden.isBareType = true;
                voiceMessagesForbidden.write(outputStream);
            }

            outputStream.writeLong(id);
            if ((flags & 2) != 0 && about != null) {
                outputStream.writeTLString(about);
            }

            settings.write(outputStream);

            if ((flags & 4) != 0 && profilePhoto != null) {
                profilePhoto.write(outputStream);
            }

            notifySettings.write(outputStream);

            if ((flags & 8) != 0 && botInfo != null) {
                botInfo.write(outputStream);
            }

            if ((flags & 64) != 0 && pinnedMsgId != null) {
                outputStream.writeInt(pinnedMsgId);
            }

            outputStream.writeInt(commonChatsCount);
            if ((flags & 2048) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            if ((flags & 16384) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }

            if ((flags & 32768) != 0 && themeEmoticon != null) {
                outputStream.writeTLString(themeEmoticon);
            }

            if ((flags & 65536) != 0 && privateForwardName != null) {
                outputStream.writeTLString(privateForwardName);
            }

            if ((flags & 131072) != 0 && botGroupAdminRights != null) {
                botGroupAdminRights.write(outputStream);
            }

            if ((flags & 262144) != 0 && botBroadcastAdminRights != null) {
                botBroadcastAdminRights.write(outputStream);
            }

            if ((flags & 524288) != 0 && premiumGifts != null) {
                premiumGifts.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                blocked = new True();
                blocked.isBareType = true;
                blocked.read(inputStream);
            }

            if ((flags & 16) != 0) {
                phoneCallsAvailable = new True();
                phoneCallsAvailable.isBareType = true;
                phoneCallsAvailable.read(inputStream);
            }

            if ((flags & 32) != 0) {
                phoneCallsPrivate = new True();
                phoneCallsPrivate.isBareType = true;
                phoneCallsPrivate.read(inputStream);
            }

            if ((flags & 128) != 0) {
                canPinMessage = new True();
                canPinMessage.isBareType = true;
                canPinMessage.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                hasScheduled = new True();
                hasScheduled.isBareType = true;
                hasScheduled.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                videoCallsAvailable = new True();
                videoCallsAvailable.isBareType = true;
                videoCallsAvailable.read(inputStream);
            }

            if ((flags & 1048576) != 0) {
                voiceMessagesForbidden = new True();
                voiceMessagesForbidden.isBareType = true;
                voiceMessagesForbidden.read(inputStream);
            }

            id = inputStream.readLong();
            if ((flags & 2) != 0) {
                about = inputStream.readTLString();
            }

            settings = ApiScheme.PeerSettings.readObject(inputStream);
            if ((flags & 4) != 0) {
                profilePhoto = ApiScheme.Photo.readObject(inputStream);
            }

            notifySettings = ApiScheme.PeerNotifySettings.readObject(inputStream);
            if ((flags & 8) != 0) {
                botInfo = ApiScheme.BotInfo.readObject(inputStream);
            }

            if ((flags & 64) != 0) {
                pinnedMsgId = inputStream.readInt();
            }

            commonChatsCount = inputStream.readInt();
            if ((flags & 2048) != 0) {
                folderId = inputStream.readInt();
            }

            if ((flags & 16384) != 0) {
                ttlPeriod = inputStream.readInt();
            }

            if ((flags & 32768) != 0) {
                themeEmoticon = inputStream.readTLString();
            }

            if ((flags & 65536) != 0) {
                privateForwardName = inputStream.readTLString();
            }

            if ((flags & 131072) != 0) {
                botGroupAdminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            }

            if ((flags & 262144) != 0) {
                botBroadcastAdminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            }

            if ((flags & 524288) != 0) {
                premiumGifts = new TLVector<ApiScheme.PremiumGiftOption>(ApiScheme.PremiumGiftOption.class);
                premiumGifts.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "UserFull{" +
                    "flags=" + flags +
                    ", blocked=" + blocked +
                    ", phoneCallsAvailable=" + phoneCallsAvailable +
                    ", phoneCallsPrivate=" + phoneCallsPrivate +
                    ", canPinMessage=" + canPinMessage +
                    ", hasScheduled=" + hasScheduled +
                    ", videoCallsAvailable=" + videoCallsAvailable +
                    ", voiceMessagesForbidden=" + voiceMessagesForbidden +
                    ", id=" + id +
                    ", about=" + about +
                    ", settings=" + settings +
                    ", profilePhoto=" + profilePhoto +
                    ", notifySettings=" + notifySettings +
                    ", botInfo=" + botInfo +
                    ", pinnedMsgId=" + pinnedMsgId +
                    ", commonChatsCount=" + commonChatsCount +
                    ", folderId=" + folderId +
                    ", ttlPeriod=" + ttlPeriod +
                    ", themeEmoticon=" + themeEmoticon +
                    ", privateForwardName=" + privateForwardName +
                    ", botGroupAdminRights=" + botGroupAdminRights +
                    ", botBroadcastAdminRights=" + botBroadcastAdminRights +
                    ", premiumGifts=" + premiumGifts +
                    '}';

        }
    }


    public static class Contact2 extends ApiScheme.Contact {
        public static final int ID = 0x145ade0b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "contact";
        public long userId;
        public ApiScheme.Bool mutual;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            mutual.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            mutual = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "Contact{" +
                    "userId=" + userId +
                    ", mutual=" + mutual +
                    '}';

        }
    }


    public static class ImportedContact2 extends ApiScheme.ImportedContact {
        public static final int ID = 0xc13e3c50;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "importedContact";
        public long userId;
        public long clientId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeLong(clientId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            clientId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "ImportedContact{" +
                    "userId=" + userId +
                    ", clientId=" + clientId +
                    '}';

        }
    }


    public static class ContactStatus2 extends ApiScheme.ContactStatus {
        public static final int ID = 0x16d9703b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "contactStatus";
        public long userId;
        public ApiScheme.UserStatus status;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            status.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            status = ApiScheme.UserStatus.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ContactStatus{" +
                    "userId=" + userId +
                    ", status=" + status +
                    '}';

        }
    }


    public static class InputMessagesFilterEmpty extends ApiScheme.MessagesFilter {
        public static final int ID = 0x57e2f66c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterEmpty{" +
                    '}';

        }
    }


    public static class InputMessagesFilterPhotos extends ApiScheme.MessagesFilter {
        public static final int ID = 0x9609a51c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterPhotos";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterPhotos{" +
                    '}';

        }
    }


    public static class InputMessagesFilterVideo extends ApiScheme.MessagesFilter {
        public static final int ID = 0x9fc00e65;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterVideo";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterVideo{" +
                    '}';

        }
    }


    public static class InputMessagesFilterPhotoVideo extends ApiScheme.MessagesFilter {
        public static final int ID = 0x56e9f0e4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterPhotoVideo";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterPhotoVideo{" +
                    '}';

        }
    }


    public static class InputMessagesFilterDocument extends ApiScheme.MessagesFilter {
        public static final int ID = 0x9eddf188;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterDocument";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterDocument{" +
                    '}';

        }
    }


    public static class InputMessagesFilterUrl extends ApiScheme.MessagesFilter {
        public static final int ID = 0x7ef0dd87;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterUrl";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterUrl{" +
                    '}';

        }
    }


    public static class InputMessagesFilterGif extends ApiScheme.MessagesFilter {
        public static final int ID = 0xffc86587;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterGif";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterGif{" +
                    '}';

        }
    }


    public static class InputMessagesFilterVoice extends ApiScheme.MessagesFilter {
        public static final int ID = 0x50f5c392;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterVoice";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterVoice{" +
                    '}';

        }
    }


    public static class InputMessagesFilterMusic extends ApiScheme.MessagesFilter {
        public static final int ID = 0x3751b49e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterMusic";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterMusic{" +
                    '}';

        }
    }


    public static class InputMessagesFilterChatPhotos extends ApiScheme.MessagesFilter {
        public static final int ID = 0x3a20ecb8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterChatPhotos";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterChatPhotos{" +
                    '}';

        }
    }


    public static class InputMessagesFilterPhoneCalls extends ApiScheme.MessagesFilter {
        public static final int ID = 0x80c99768;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterPhoneCalls";
        public int flags;
        public True missed = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = missed != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && missed != null) {
                missed.isBareType = true;
                missed.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                missed = new True();
                missed.isBareType = true;
                missed.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputMessagesFilterPhoneCalls{" +
                    "flags=" + flags +
                    ", missed=" + missed +
                    '}';

        }
    }


    public static class InputMessagesFilterRoundVoice extends ApiScheme.MessagesFilter {
        public static final int ID = 0x7a7c17a4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterRoundVoice";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterRoundVoice{" +
                    '}';

        }
    }


    public static class InputMessagesFilterRoundVideo extends ApiScheme.MessagesFilter {
        public static final int ID = 0xb549da53;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterRoundVideo";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterRoundVideo{" +
                    '}';

        }
    }


    public static class InputMessagesFilterMyMentions extends ApiScheme.MessagesFilter {
        public static final int ID = 0xc1f8e69a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterMyMentions";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterMyMentions{" +
                    '}';

        }
    }


    public static class InputMessagesFilterGeo extends ApiScheme.MessagesFilter {
        public static final int ID = 0xe7026d0d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterGeo";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterGeo{" +
                    '}';

        }
    }


    public static class InputMessagesFilterContacts extends ApiScheme.MessagesFilter {
        public static final int ID = 0xe062db83;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterContacts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterContacts{" +
                    '}';

        }
    }


    public static class InputMessagesFilterPinned extends ApiScheme.MessagesFilter {
        public static final int ID = 0x1bb00451;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagesFilterPinned";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagesFilterPinned{" +
                    '}';

        }
    }


    public static class UpdateNewMessage extends ApiScheme.Update {
        public static final int ID = 0x1f2b0afd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNewMessage";
        public ApiScheme.Message message;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateNewMessage{" +
                    "message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateMessageID extends ApiScheme.Update {
        public static final int ID = 0x4e90bfd6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateMessageID";
        public int id;
        public long randomId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);
            outputStream.writeLong(randomId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();
            randomId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UpdateMessageID{" +
                    "id=" + id +
                    ", randomId=" + randomId +
                    '}';

        }
    }


    public static class UpdateDeleteMessages extends ApiScheme.Update {
        public static final int ID = 0xa20db0e5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDeleteMessages";
        public TLVector<TLInt> messages;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            messages.isBareTypeItem = true;
            messages.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateDeleteMessages{" +
                    "messages=" + messages +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateUserTyping extends ApiScheme.Update {
        public static final int ID = 0xc01e857f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateUserTyping";
        public long userId;
        public ApiScheme.SendMessageAction action;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            action.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            action = ApiScheme.SendMessageAction.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateUserTyping{" +
                    "userId=" + userId +
                    ", action=" + action +
                    '}';

        }
    }


    public static class UpdateChatUserTyping extends ApiScheme.Update {
        public static final int ID = 0x83487af0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatUserTyping";
        public long chatId;
        public ApiScheme.Peer fromId;
        public ApiScheme.SendMessageAction action;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            fromId.write(outputStream);

            action.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            fromId = ApiScheme.Peer.readObject(inputStream);
            action = ApiScheme.SendMessageAction.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateChatUserTyping{" +
                    "chatId=" + chatId +
                    ", fromId=" + fromId +
                    ", action=" + action +
                    '}';

        }
    }


    public static class UpdateChatParticipants extends ApiScheme.Update {
        public static final int ID = 0x7761198;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatParticipants";
        public ApiScheme.ChatParticipants participants;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            participants.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            participants = ApiScheme.ChatParticipants.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateChatParticipants{" +
                    "participants=" + participants +
                    '}';

        }
    }


    public static class UpdateUserStatus extends ApiScheme.Update {
        public static final int ID = 0xe5bdf8de;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateUserStatus";
        public long userId;
        public ApiScheme.UserStatus status;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            status.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            status = ApiScheme.UserStatus.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateUserStatus{" +
                    "userId=" + userId +
                    ", status=" + status +
                    '}';

        }
    }


    public static class UpdateUserName extends ApiScheme.Update {
        public static final int ID = 0xc3f202e0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateUserName";
        public long userId;
        public String firstName;
        public String lastName;
        public String username;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeTLString(username);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            username = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UpdateUserName{" +
                    "userId=" + userId +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", username=" + username +
                    '}';

        }
    }


    public static class UpdateUserPhoto extends ApiScheme.Update {
        public static final int ID = 0xf227868c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateUserPhoto";
        public long userId;
        public int date;
        public ApiScheme.UserProfilePhoto photo;
        public ApiScheme.Bool previous;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(date);
            photo.write(outputStream);

            previous.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            date = inputStream.readInt();
            photo = ApiScheme.UserProfilePhoto.readObject(inputStream);
            previous = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateUserPhoto{" +
                    "userId=" + userId +
                    ", date=" + date +
                    ", photo=" + photo +
                    ", previous=" + previous +
                    '}';

        }
    }


    public static class UpdateNewEncryptedMessage extends ApiScheme.Update {
        public static final int ID = 0x12bcbd9a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNewEncryptedMessage";
        public ApiScheme.EncryptedMessage message;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.EncryptedMessage.readObject(inputStream);
            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateNewEncryptedMessage{" +
                    "message=" + message +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateEncryptedChatTyping extends ApiScheme.Update {
        public static final int ID = 0x1710f156;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateEncryptedChatTyping";
        public int chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateEncryptedChatTyping{" +
                    "chatId=" + chatId +
                    '}';

        }
    }


    public static class UpdateEncryption extends ApiScheme.Update {
        public static final int ID = 0xb4a2e88d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateEncryption";
        public ApiScheme.EncryptedChat chat;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chat.write(outputStream);

            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chat = ApiScheme.EncryptedChat.readObject(inputStream);
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateEncryption{" +
                    "chat=" + chat +
                    ", date=" + date +
                    '}';

        }
    }


    public static class UpdateEncryptedMessagesRead extends ApiScheme.Update {
        public static final int ID = 0x38fe25b7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateEncryptedMessagesRead";
        public int chatId;
        public int maxDate;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(chatId);
            outputStream.writeInt(maxDate);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readInt();
            maxDate = inputStream.readInt();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateEncryptedMessagesRead{" +
                    "chatId=" + chatId +
                    ", maxDate=" + maxDate +
                    ", date=" + date +
                    '}';

        }
    }


    public static class UpdateChatParticipantAdd extends ApiScheme.Update {
        public static final int ID = 0x3dda5451;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatParticipantAdd";
        public long chatId;
        public long userId;
        public long inviterId;
        public int date;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            outputStream.writeLong(userId);
            outputStream.writeLong(inviterId);
            outputStream.writeInt(date);
            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            userId = inputStream.readLong();
            inviterId = inputStream.readLong();
            date = inputStream.readInt();
            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChatParticipantAdd{" +
                    "chatId=" + chatId +
                    ", userId=" + userId +
                    ", inviterId=" + inviterId +
                    ", date=" + date +
                    ", version=" + version +
                    '}';

        }
    }


    public static class UpdateChatParticipantDelete extends ApiScheme.Update {
        public static final int ID = 0xe32f3d77;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatParticipantDelete";
        public long chatId;
        public long userId;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            outputStream.writeLong(userId);
            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            userId = inputStream.readLong();
            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChatParticipantDelete{" +
                    "chatId=" + chatId +
                    ", userId=" + userId +
                    ", version=" + version +
                    '}';

        }
    }


    public static class UpdateDcOptions extends ApiScheme.Update {
        public static final int ID = 0x8e5e9873;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDcOptions";
        public TLVector<ApiScheme.DcOption> dcOptions;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            dcOptions.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            dcOptions = new TLVector<ApiScheme.DcOption>(ApiScheme.DcOption.class);
            dcOptions.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateDcOptions{" +
                    "dcOptions=" + dcOptions +
                    '}';

        }
    }


    public static class UpdateNotifySettings extends ApiScheme.Update {
        public static final int ID = 0xbec268ef;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNotifySettings";
        public ApiScheme.NotifyPeer peer;
        public ApiScheme.PeerNotifySettings notifySettings;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            notifySettings.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.NotifyPeer.readObject(inputStream);
            notifySettings = ApiScheme.PeerNotifySettings.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateNotifySettings{" +
                    "peer=" + peer +
                    ", notifySettings=" + notifySettings +
                    '}';

        }
    }


    public static class UpdateServiceNotification extends ApiScheme.Update {
        public static final int ID = 0xebe46819;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateServiceNotification";
        public int flags;
        public True popup = null;
        public Integer inboxDate = null;
        public String type;
        public String message;
        public ApiScheme.MessageMedia media;
        public TLVector<ApiScheme.MessageEntity> entities;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = popup != null ? (flags | 1) : (flags & ~1);
            flags = inboxDate != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && popup != null) {
                popup.isBareType = true;
                popup.write(outputStream);
            }

            if ((flags & 2) != 0 && inboxDate != null) {
                outputStream.writeInt(inboxDate);
            }

            outputStream.writeTLString(type);
            outputStream.writeTLString(message);
            media.write(outputStream);

            entities.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                popup = new True();
                popup.isBareType = true;
                popup.read(inputStream);
            }

            if ((flags & 2) != 0) {
                inboxDate = inputStream.readInt();
            }

            type = inputStream.readTLString();
            message = inputStream.readTLString();
            media = ApiScheme.MessageMedia.readObject(inputStream);
            entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
            entities.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateServiceNotification{" +
                    "flags=" + flags +
                    ", popup=" + popup +
                    ", inboxDate=" + inboxDate +
                    ", type=" + type +
                    ", message=" + message +
                    ", media=" + media +
                    ", entities=" + entities +
                    '}';

        }
    }


    public static class UpdatePrivacy extends ApiScheme.Update {
        public static final int ID = 0xee3b272a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePrivacy";
        public ApiScheme.PrivacyKey key;
        public TLVector<ApiScheme.PrivacyRule> rules;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            key.write(outputStream);

            rules.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            key = ApiScheme.PrivacyKey.readObject(inputStream);
            rules = new TLVector<ApiScheme.PrivacyRule>(ApiScheme.PrivacyRule.class);
            rules.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdatePrivacy{" +
                    "key=" + key +
                    ", rules=" + rules +
                    '}';

        }
    }


    public static class UpdateUserPhone extends ApiScheme.Update {
        public static final int ID = 0x5492a13;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateUserPhone";
        public long userId;
        public String phone;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeTLString(phone);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            phone = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UpdateUserPhone{" +
                    "userId=" + userId +
                    ", phone=" + phone +
                    '}';

        }
    }


    public static class UpdateReadHistoryInbox extends ApiScheme.Update {
        public static final int ID = 0x9c974fdf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadHistoryInbox";
        public int flags;
        public Integer folderId = null;
        public ApiScheme.Peer peer;
        public int maxId;
        public int stillUnreadCount;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = folderId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            peer.write(outputStream);

            outputStream.writeInt(maxId);
            outputStream.writeInt(stillUnreadCount);
            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                folderId = inputStream.readInt();
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            maxId = inputStream.readInt();
            stillUnreadCount = inputStream.readInt();
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadHistoryInbox{" +
                    "flags=" + flags +
                    ", folderId=" + folderId +
                    ", peer=" + peer +
                    ", maxId=" + maxId +
                    ", stillUnreadCount=" + stillUnreadCount +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateReadHistoryOutbox extends ApiScheme.Update {
        public static final int ID = 0x2f2f21bf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadHistoryOutbox";
        public ApiScheme.Peer peer;
        public int maxId;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(maxId);
            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            maxId = inputStream.readInt();
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadHistoryOutbox{" +
                    "peer=" + peer +
                    ", maxId=" + maxId +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateWebPage extends ApiScheme.Update {
        public static final int ID = 0x7f891213;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateWebPage";
        public ApiScheme.WebPage webpage;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            webpage.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            webpage = ApiScheme.WebPage.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateWebPage{" +
                    "webpage=" + webpage +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateReadMessagesContents extends ApiScheme.Update {
        public static final int ID = 0x68c13933;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadMessagesContents";
        public TLVector<TLInt> messages;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            messages.isBareTypeItem = true;
            messages.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadMessagesContents{" +
                    "messages=" + messages +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateChannelTooLong extends ApiScheme.Update {
        public static final int ID = 0x108d941f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelTooLong";
        public int flags;
        public long channelId;
        public Integer pts = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pts != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(channelId);
            if ((flags & 1) != 0 && pts != null) {
                outputStream.writeInt(pts);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            channelId = inputStream.readLong();
            if ((flags & 1) != 0) {
                pts = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdateChannelTooLong{" +
                    "flags=" + flags +
                    ", channelId=" + channelId +
                    ", pts=" + pts +
                    '}';

        }
    }


    public static class UpdateChannel extends ApiScheme.Update {
        public static final int ID = 0x635b4c09;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannel";
        public long channelId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UpdateChannel{" +
                    "channelId=" + channelId +
                    '}';

        }
    }


    public static class UpdateNewChannelMessage extends ApiScheme.Update {
        public static final int ID = 0x62ba04d9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNewChannelMessage";
        public ApiScheme.Message message;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateNewChannelMessage{" +
                    "message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateReadChannelInbox extends ApiScheme.Update {
        public static final int ID = 0x922e6e10;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadChannelInbox";
        public int flags;
        public Integer folderId = null;
        public long channelId;
        public int maxId;
        public int stillUnreadCount;
        public int pts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = folderId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            outputStream.writeLong(channelId);
            outputStream.writeInt(maxId);
            outputStream.writeInt(stillUnreadCount);
            outputStream.writeInt(pts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                folderId = inputStream.readInt();
            }

            channelId = inputStream.readLong();
            maxId = inputStream.readInt();
            stillUnreadCount = inputStream.readInt();
            pts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadChannelInbox{" +
                    "flags=" + flags +
                    ", folderId=" + folderId +
                    ", channelId=" + channelId +
                    ", maxId=" + maxId +
                    ", stillUnreadCount=" + stillUnreadCount +
                    ", pts=" + pts +
                    '}';

        }
    }


    public static class UpdateDeleteChannelMessages extends ApiScheme.Update {
        public static final int ID = 0xc32d5b12;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDeleteChannelMessages";
        public long channelId;
        public TLVector<TLInt> messages;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            messages.isBareTypeItem = true;
            messages.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateDeleteChannelMessages{" +
                    "channelId=" + channelId +
                    ", messages=" + messages +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateChannelMessageViews extends ApiScheme.Update {
        public static final int ID = 0xf226ac08;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelMessageViews";
        public long channelId;
        public int id;
        public int views;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeInt(id);
            outputStream.writeInt(views);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            id = inputStream.readInt();
            views = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChannelMessageViews{" +
                    "channelId=" + channelId +
                    ", id=" + id +
                    ", views=" + views +
                    '}';

        }
    }


    public static class UpdateChatParticipantAdmin extends ApiScheme.Update {
        public static final int ID = 0xd7ca61a2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatParticipantAdmin";
        public long chatId;
        public long userId;
        public ApiScheme.Bool isAdmin;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            outputStream.writeLong(userId);
            isAdmin.write(outputStream);

            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            userId = inputStream.readLong();
            isAdmin = ApiScheme.Bool.readObject(inputStream);
            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChatParticipantAdmin{" +
                    "chatId=" + chatId +
                    ", userId=" + userId +
                    ", isAdmin=" + isAdmin +
                    ", version=" + version +
                    '}';

        }
    }


    public static class UpdateNewStickerSet extends ApiScheme.Update {
        public static final int ID = 0x688a30aa;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNewStickerSet";
        public ApiScheme.NsMessages.StickerSet stickerset;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            stickerset.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            stickerset = ApiScheme.NsMessages.StickerSet.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateNewStickerSet{" +
                    "stickerset=" + stickerset +
                    '}';

        }
    }


    public static class UpdateStickerSetsOrder extends ApiScheme.Update {
        public static final int ID = 0xbb2d201;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateStickerSetsOrder";
        public int flags;
        public True masks = null;
        public True emojis = null;
        public TLVector<TLLong> order;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = masks != null ? (flags | 1) : (flags & ~1);
            flags = emojis != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && masks != null) {
                masks.isBareType = true;
                masks.write(outputStream);
            }

            if ((flags & 2) != 0 && emojis != null) {
                emojis.isBareType = true;
                emojis.write(outputStream);
            }

            order.isBareTypeItem = true;
            order.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                masks = new True();
                masks.isBareType = true;
                masks.read(inputStream);
            }

            if ((flags & 2) != 0) {
                emojis = new True();
                emojis.isBareType = true;
                emojis.read(inputStream);
            }

            order = new TLVector<TLLong>(TLLong.class);
            order.isBareTypeItem = true;
            order.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateStickerSetsOrder{" +
                    "flags=" + flags +
                    ", masks=" + masks +
                    ", emojis=" + emojis +
                    ", order=" + order +
                    '}';

        }
    }


    public static class UpdateStickerSets extends ApiScheme.Update {
        public static final int ID = 0x43ae3dec;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateStickerSets";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateStickerSets{" +
                    '}';

        }
    }


    public static class UpdateSavedGifs extends ApiScheme.Update {
        public static final int ID = 0x9375341e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateSavedGifs";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateSavedGifs{" +
                    '}';

        }
    }


    public static class UpdateBotInlineQuery extends ApiScheme.Update {
        public static final int ID = 0x496f379c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotInlineQuery";
        public int flags;
        public long queryId;
        public long userId;
        public String query;
        public ApiScheme.GeoPoint geo = null;
        public ApiScheme.InlineQueryPeerType peerType = null;
        public String offset;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = geo != null ? (flags | 1) : (flags & ~1);
            flags = peerType != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(queryId);
            outputStream.writeLong(userId);
            outputStream.writeTLString(query);
            if ((flags & 1) != 0 && geo != null) {
                geo.write(outputStream);
            }

            if ((flags & 2) != 0 && peerType != null) {
                peerType.write(outputStream);
            }

            outputStream.writeTLString(offset);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            queryId = inputStream.readLong();
            userId = inputStream.readLong();
            query = inputStream.readTLString();
            if ((flags & 1) != 0) {
                geo = ApiScheme.GeoPoint.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                peerType = ApiScheme.InlineQueryPeerType.readObject(inputStream);
            }

            offset = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UpdateBotInlineQuery{" +
                    "flags=" + flags +
                    ", queryId=" + queryId +
                    ", userId=" + userId +
                    ", query=" + query +
                    ", geo=" + geo +
                    ", peerType=" + peerType +
                    ", offset=" + offset +
                    '}';

        }
    }


    public static class UpdateBotInlineSend extends ApiScheme.Update {
        public static final int ID = 0x12f12a07;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotInlineSend";
        public int flags;
        public long userId;
        public String query;
        public ApiScheme.GeoPoint geo = null;
        public String id;
        public ApiScheme.InputBotInlineMessageID msgId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = geo != null ? (flags | 1) : (flags & ~1);
            flags = msgId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(userId);
            outputStream.writeTLString(query);
            if ((flags & 1) != 0 && geo != null) {
                geo.write(outputStream);
            }

            outputStream.writeTLString(id);
            if ((flags & 2) != 0 && msgId != null) {
                msgId.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            userId = inputStream.readLong();
            query = inputStream.readTLString();
            if ((flags & 1) != 0) {
                geo = ApiScheme.GeoPoint.readObject(inputStream);
            }

            id = inputStream.readTLString();
            if ((flags & 2) != 0) {
                msgId = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "UpdateBotInlineSend{" +
                    "flags=" + flags +
                    ", userId=" + userId +
                    ", query=" + query +
                    ", geo=" + geo +
                    ", id=" + id +
                    ", msgId=" + msgId +
                    '}';

        }
    }


    public static class UpdateEditChannelMessage extends ApiScheme.Update {
        public static final int ID = 0x1b3f4df7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateEditChannelMessage";
        public ApiScheme.Message message;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateEditChannelMessage{" +
                    "message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateBotCallbackQuery extends ApiScheme.Update {
        public static final int ID = 0xb9cfc48d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotCallbackQuery";
        public int flags;
        public long queryId;
        public long userId;
        public ApiScheme.Peer peer;
        public int msgId;
        public long chatInstance;
        public byte[] data = null;
        public String gameShortName = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = data != null ? (flags | 1) : (flags & ~1);
            flags = gameShortName != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(queryId);
            outputStream.writeLong(userId);
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(chatInstance);
            if ((flags & 1) != 0 && data != null) {
                outputStream.writeTLBytes(data);
            }

            if ((flags & 2) != 0 && gameShortName != null) {
                outputStream.writeTLString(gameShortName);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            queryId = inputStream.readLong();
            userId = inputStream.readLong();
            peer = ApiScheme.Peer.readObject(inputStream);
            msgId = inputStream.readInt();
            chatInstance = inputStream.readLong();
            if ((flags & 1) != 0) {
                data = inputStream.readTLBytes();
            }

            if ((flags & 2) != 0) {
                gameShortName = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "UpdateBotCallbackQuery{" +
                    "flags=" + flags +
                    ", queryId=" + queryId +
                    ", userId=" + userId +
                    ", peer=" + peer +
                    ", msgId=" + msgId +
                    ", chatInstance=" + chatInstance +
                    ", data=" + data +
                    ", gameShortName=" + gameShortName +
                    '}';

        }
    }


    public static class UpdateEditMessage extends ApiScheme.Update {
        public static final int ID = 0xe40370a3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateEditMessage";
        public ApiScheme.Message message;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateEditMessage{" +
                    "message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateInlineBotCallbackQuery extends ApiScheme.Update {
        public static final int ID = 0x691e9052;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateInlineBotCallbackQuery";
        public int flags;
        public long queryId;
        public long userId;
        public ApiScheme.InputBotInlineMessageID msgId;
        public long chatInstance;
        public byte[] data = null;
        public String gameShortName = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = data != null ? (flags | 1) : (flags & ~1);
            flags = gameShortName != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(queryId);
            outputStream.writeLong(userId);
            msgId.write(outputStream);

            outputStream.writeLong(chatInstance);
            if ((flags & 1) != 0 && data != null) {
                outputStream.writeTLBytes(data);
            }

            if ((flags & 2) != 0 && gameShortName != null) {
                outputStream.writeTLString(gameShortName);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            queryId = inputStream.readLong();
            userId = inputStream.readLong();
            msgId = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
            chatInstance = inputStream.readLong();
            if ((flags & 1) != 0) {
                data = inputStream.readTLBytes();
            }

            if ((flags & 2) != 0) {
                gameShortName = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "UpdateInlineBotCallbackQuery{" +
                    "flags=" + flags +
                    ", queryId=" + queryId +
                    ", userId=" + userId +
                    ", msgId=" + msgId +
                    ", chatInstance=" + chatInstance +
                    ", data=" + data +
                    ", gameShortName=" + gameShortName +
                    '}';

        }
    }


    public static class UpdateReadChannelOutbox extends ApiScheme.Update {
        public static final int ID = 0xb75f99a9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadChannelOutbox";
        public long channelId;
        public int maxId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeInt(maxId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            maxId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadChannelOutbox{" +
                    "channelId=" + channelId +
                    ", maxId=" + maxId +
                    '}';

        }
    }


    public static class UpdateDraftMessage extends ApiScheme.Update {
        public static final int ID = 0xee2bb969;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDraftMessage";
        public ApiScheme.Peer peer;
        public ApiScheme.DraftMessage draft;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            draft.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            draft = ApiScheme.DraftMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateDraftMessage{" +
                    "peer=" + peer +
                    ", draft=" + draft +
                    '}';

        }
    }


    public static class UpdateReadFeaturedStickers extends ApiScheme.Update {
        public static final int ID = 0x571d2742;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadFeaturedStickers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateReadFeaturedStickers{" +
                    '}';

        }
    }


    public static class UpdateRecentStickers extends ApiScheme.Update {
        public static final int ID = 0x9a422c20;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateRecentStickers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateRecentStickers{" +
                    '}';

        }
    }


    public static class UpdateConfig extends ApiScheme.Update {
        public static final int ID = 0xa229dd06;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateConfig";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateConfig{" +
                    '}';

        }
    }


    public static class UpdatePtsChanged extends ApiScheme.Update {
        public static final int ID = 0x3354678f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePtsChanged";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdatePtsChanged{" +
                    '}';

        }
    }


    public static class UpdateChannelWebPage extends ApiScheme.Update {
        public static final int ID = 0x2f2ba99f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelWebPage";
        public long channelId;
        public ApiScheme.WebPage webpage;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            webpage.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            webpage = ApiScheme.WebPage.readObject(inputStream);
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChannelWebPage{" +
                    "channelId=" + channelId +
                    ", webpage=" + webpage +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateDialogPinned extends ApiScheme.Update {
        public static final int ID = 0x6e6fe51c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDialogPinned";
        public int flags;
        public True pinned = null;
        public Integer folderId = null;
        public ApiScheme.DialogPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pinned != null ? (flags | 1) : (flags & ~1);
            flags = folderId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            if ((flags & 2) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            if ((flags & 2) != 0) {
                folderId = inputStream.readInt();
            }

            peer = ApiScheme.DialogPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateDialogPinned{" +
                    "flags=" + flags +
                    ", pinned=" + pinned +
                    ", folderId=" + folderId +
                    ", peer=" + peer +
                    '}';

        }
    }


    public static class UpdatePinnedDialogs extends ApiScheme.Update {
        public static final int ID = 0xfa0f3ca2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePinnedDialogs";
        public int flags;
        public Integer folderId = null;
        public TLVector<ApiScheme.DialogPeer> order = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = folderId != null ? (flags | 2) : (flags & ~2);
            flags = order != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            if ((flags & 1) != 0 && order != null) {
                order.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                folderId = inputStream.readInt();
            }

            if ((flags & 1) != 0) {
                order = new TLVector<ApiScheme.DialogPeer>(ApiScheme.DialogPeer.class);
                order.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "UpdatePinnedDialogs{" +
                    "flags=" + flags +
                    ", folderId=" + folderId +
                    ", order=" + order +
                    '}';

        }
    }


    public static class UpdateBotWebhookJSON extends ApiScheme.Update {
        public static final int ID = 0x8317c0c3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotWebhookJSON";
        public ApiScheme.DataJSON data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            data.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            data = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateBotWebhookJSON{" +
                    "data=" + data +
                    '}';

        }
    }


    public static class UpdateBotWebhookJSONQuery extends ApiScheme.Update {
        public static final int ID = 0x9b9240a6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotWebhookJSONQuery";
        public long queryId;
        public ApiScheme.DataJSON data;
        public int timeout;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(queryId);
            data.write(outputStream);

            outputStream.writeInt(timeout);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            queryId = inputStream.readLong();
            data = ApiScheme.DataJSON.readObject(inputStream);
            timeout = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateBotWebhookJSONQuery{" +
                    "queryId=" + queryId +
                    ", data=" + data +
                    ", timeout=" + timeout +
                    '}';

        }
    }


    public static class UpdateBotShippingQuery extends ApiScheme.Update {
        public static final int ID = 0xb5aefd7d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotShippingQuery";
        public long queryId;
        public long userId;
        public byte[] payload;
        public ApiScheme.PostAddress shippingAddress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(queryId);
            outputStream.writeLong(userId);
            outputStream.writeTLBytes(payload);
            shippingAddress.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            queryId = inputStream.readLong();
            userId = inputStream.readLong();
            payload = inputStream.readTLBytes();
            shippingAddress = ApiScheme.PostAddress.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateBotShippingQuery{" +
                    "queryId=" + queryId +
                    ", userId=" + userId +
                    ", payload=" + payload +
                    ", shippingAddress=" + shippingAddress +
                    '}';

        }
    }


    public static class UpdateBotPrecheckoutQuery extends ApiScheme.Update {
        public static final int ID = 0x8caa9a96;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotPrecheckoutQuery";
        public int flags;
        public long queryId;
        public long userId;
        public byte[] payload;
        public ApiScheme.PaymentRequestedInfo info = null;
        public String shippingOptionId = null;
        public String currency;
        public long totalAmount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = info != null ? (flags | 1) : (flags & ~1);
            flags = shippingOptionId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(queryId);
            outputStream.writeLong(userId);
            outputStream.writeTLBytes(payload);
            if ((flags & 1) != 0 && info != null) {
                info.write(outputStream);
            }

            if ((flags & 2) != 0 && shippingOptionId != null) {
                outputStream.writeTLString(shippingOptionId);
            }

            outputStream.writeTLString(currency);
            outputStream.writeLong(totalAmount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            queryId = inputStream.readLong();
            userId = inputStream.readLong();
            payload = inputStream.readTLBytes();
            if ((flags & 1) != 0) {
                info = ApiScheme.PaymentRequestedInfo.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                shippingOptionId = inputStream.readTLString();
            }

            currency = inputStream.readTLString();
            totalAmount = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UpdateBotPrecheckoutQuery{" +
                    "flags=" + flags +
                    ", queryId=" + queryId +
                    ", userId=" + userId +
                    ", payload=" + payload +
                    ", info=" + info +
                    ", shippingOptionId=" + shippingOptionId +
                    ", currency=" + currency +
                    ", totalAmount=" + totalAmount +
                    '}';

        }
    }


    public static class UpdatePhoneCall extends ApiScheme.Update {
        public static final int ID = 0xab0f6b1e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePhoneCall";
        public ApiScheme.PhoneCall phoneCall;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            phoneCall.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phoneCall = ApiScheme.PhoneCall.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdatePhoneCall{" +
                    "phoneCall=" + phoneCall +
                    '}';

        }
    }


    public static class UpdateLangPackTooLong extends ApiScheme.Update {
        public static final int ID = 0x46560264;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateLangPackTooLong";
        public String langCode;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(langCode);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            langCode = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UpdateLangPackTooLong{" +
                    "langCode=" + langCode +
                    '}';

        }
    }


    public static class UpdateLangPack extends ApiScheme.Update {
        public static final int ID = 0x56022f4d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateLangPack";
        public ApiScheme.LangPackDifference difference;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            difference.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            difference = ApiScheme.LangPackDifference.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateLangPack{" +
                    "difference=" + difference +
                    '}';

        }
    }


    public static class UpdateFavedStickers extends ApiScheme.Update {
        public static final int ID = 0xe511996d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateFavedStickers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateFavedStickers{" +
                    '}';

        }
    }


    public static class UpdateChannelReadMessagesContents extends ApiScheme.Update {
        public static final int ID = 0x44bdd535;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelReadMessagesContents";
        public long channelId;
        public TLVector<TLInt> messages;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            messages.isBareTypeItem = true;
            messages.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateChannelReadMessagesContents{" +
                    "channelId=" + channelId +
                    ", messages=" + messages +
                    '}';

        }
    }


    public static class UpdateContactsReset extends ApiScheme.Update {
        public static final int ID = 0x7084a7be;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateContactsReset";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateContactsReset{" +
                    '}';

        }
    }


    public static class UpdateChannelAvailableMessages extends ApiScheme.Update {
        public static final int ID = 0xb23fc698;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelAvailableMessages";
        public long channelId;
        public int availableMinId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeInt(availableMinId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            availableMinId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChannelAvailableMessages{" +
                    "channelId=" + channelId +
                    ", availableMinId=" + availableMinId +
                    '}';

        }
    }


    public static class UpdateDialogUnreadMark extends ApiScheme.Update {
        public static final int ID = 0xe16459c3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDialogUnreadMark";
        public int flags;
        public True unread = null;
        public ApiScheme.DialogPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = unread != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && unread != null) {
                unread.isBareType = true;
                unread.write(outputStream);
            }

            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                unread = new True();
                unread.isBareType = true;
                unread.read(inputStream);
            }

            peer = ApiScheme.DialogPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateDialogUnreadMark{" +
                    "flags=" + flags +
                    ", unread=" + unread +
                    ", peer=" + peer +
                    '}';

        }
    }


    public static class UpdateMessagePoll extends ApiScheme.Update {
        public static final int ID = 0xaca1657b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateMessagePoll";
        public int flags;
        public long pollId;
        public ApiScheme.Poll poll = null;
        public ApiScheme.PollResults results;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = poll != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(pollId);
            if ((flags & 1) != 0 && poll != null) {
                poll.write(outputStream);
            }

            results.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            pollId = inputStream.readLong();
            if ((flags & 1) != 0) {
                poll = ApiScheme.Poll.readObject(inputStream);
            }

            results = ApiScheme.PollResults.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateMessagePoll{" +
                    "flags=" + flags +
                    ", pollId=" + pollId +
                    ", poll=" + poll +
                    ", results=" + results +
                    '}';

        }
    }


    public static class UpdateChatDefaultBannedRights extends ApiScheme.Update {
        public static final int ID = 0x54c01850;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatDefaultBannedRights";
        public ApiScheme.Peer peer;
        public ApiScheme.ChatBannedRights defaultBannedRights;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            defaultBannedRights.write(outputStream);

            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            defaultBannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);
            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChatDefaultBannedRights{" +
                    "peer=" + peer +
                    ", defaultBannedRights=" + defaultBannedRights +
                    ", version=" + version +
                    '}';

        }
    }


    public static class UpdateFolderPeers extends ApiScheme.Update {
        public static final int ID = 0x19360dc0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateFolderPeers";
        public TLVector<ApiScheme.FolderPeer> folderPeers;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            folderPeers.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            folderPeers = new TLVector<ApiScheme.FolderPeer>(ApiScheme.FolderPeer.class);
            folderPeers.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateFolderPeers{" +
                    "folderPeers=" + folderPeers +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdatePeerSettings extends ApiScheme.Update {
        public static final int ID = 0x6a7e7366;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePeerSettings";
        public ApiScheme.Peer peer;
        public ApiScheme.PeerSettings settings;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            settings.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            settings = ApiScheme.PeerSettings.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdatePeerSettings{" +
                    "peer=" + peer +
                    ", settings=" + settings +
                    '}';

        }
    }


    public static class UpdatePeerLocated extends ApiScheme.Update {
        public static final int ID = 0xb4afcfb0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePeerLocated";
        public TLVector<ApiScheme.PeerLocated> peers;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peers.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peers = new TLVector<ApiScheme.PeerLocated>(ApiScheme.PeerLocated.class);
            peers.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdatePeerLocated{" +
                    "peers=" + peers +
                    '}';

        }
    }


    public static class UpdateNewScheduledMessage extends ApiScheme.Update {
        public static final int ID = 0x39a51dfb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateNewScheduledMessage";
        public ApiScheme.Message message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateNewScheduledMessage{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class UpdateDeleteScheduledMessages extends ApiScheme.Update {
        public static final int ID = 0x90866cee;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDeleteScheduledMessages";
        public ApiScheme.Peer peer;
        public TLVector<TLInt> messages;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            messages.isBareTypeItem = true;
            messages.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateDeleteScheduledMessages{" +
                    "peer=" + peer +
                    ", messages=" + messages +
                    '}';

        }
    }


    public static class UpdateTheme extends ApiScheme.Update {
        public static final int ID = 0x8216fba3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateTheme";
        public ApiScheme.Theme theme;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            theme.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            theme = ApiScheme.Theme.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateTheme{" +
                    "theme=" + theme +
                    '}';

        }
    }


    public static class UpdateGeoLiveViewed extends ApiScheme.Update {
        public static final int ID = 0x871fb939;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateGeoLiveViewed";
        public ApiScheme.Peer peer;
        public int msgId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            msgId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateGeoLiveViewed{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    '}';

        }
    }


    public static class UpdateLoginToken extends ApiScheme.Update {
        public static final int ID = 0x564fe691;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateLoginToken";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateLoginToken{" +
                    '}';

        }
    }


    public static class UpdateMessagePollVote extends ApiScheme.Update {
        public static final int ID = 0x106395c9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateMessagePollVote";
        public long pollId;
        public long userId;
        public TLVector<TLBytes> options;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(pollId);
            outputStream.writeLong(userId);
            options.isBareTypeItem = true;
            options.write(outputStream);

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            pollId = inputStream.readLong();
            userId = inputStream.readLong();
            options = new TLVector<TLBytes>(TLBytes.class);
            options.isBareTypeItem = true;
            options.read(inputStream);

            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateMessagePollVote{" +
                    "pollId=" + pollId +
                    ", userId=" + userId +
                    ", options=" + options +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateDialogFilter extends ApiScheme.Update {
        public static final int ID = 0x26ffde7d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDialogFilter";
        public int flags;
        public int id;
        public ApiScheme.DialogFilter filter = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = filter != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeInt(id);
            if ((flags & 1) != 0 && filter != null) {
                filter.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readInt();
            if ((flags & 1) != 0) {
                filter = ApiScheme.DialogFilter.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "UpdateDialogFilter{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", filter=" + filter +
                    '}';

        }
    }


    public static class UpdateDialogFilterOrder extends ApiScheme.Update {
        public static final int ID = 0xa5d72105;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDialogFilterOrder";
        public TLVector<TLInt> order;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            order.isBareTypeItem = true;
            order.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            order = new TLVector<TLInt>(TLInt.class);
            order.isBareTypeItem = true;
            order.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateDialogFilterOrder{" +
                    "order=" + order +
                    '}';

        }
    }


    public static class UpdateDialogFilters extends ApiScheme.Update {
        public static final int ID = 0x3504914f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateDialogFilters";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateDialogFilters{" +
                    '}';

        }
    }


    public static class UpdatePhoneCallSignalingData extends ApiScheme.Update {
        public static final int ID = 0x2661bf09;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePhoneCallSignalingData";
        public long phoneCallId;
        public byte[] data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(phoneCallId);
            outputStream.writeTLBytes(data);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phoneCallId = inputStream.readLong();
            data = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "UpdatePhoneCallSignalingData{" +
                    "phoneCallId=" + phoneCallId +
                    ", data=" + data +
                    '}';

        }
    }


    public static class UpdateChannelMessageForwards extends ApiScheme.Update {
        public static final int ID = 0xd29a27f4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelMessageForwards";
        public long channelId;
        public int id;
        public int forwards;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeInt(id);
            outputStream.writeInt(forwards);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            id = inputStream.readInt();
            forwards = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChannelMessageForwards{" +
                    "channelId=" + channelId +
                    ", id=" + id +
                    ", forwards=" + forwards +
                    '}';

        }
    }


    public static class UpdateReadChannelDiscussionInbox extends ApiScheme.Update {
        public static final int ID = 0xd6b19546;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadChannelDiscussionInbox";
        public int flags;
        public long channelId;
        public int topMsgId;
        public int readMaxId;
        public Long broadcastId = null;
        public Integer broadcastPost = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = broadcastId != null ? (flags | 1) : (flags & ~1);
            flags = broadcastPost != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(channelId);
            outputStream.writeInt(topMsgId);
            outputStream.writeInt(readMaxId);
            if ((flags & 1) != 0 && broadcastId != null) {
                outputStream.writeLong(broadcastId);
            }

            if ((flags & 1) != 0 && broadcastPost != null) {
                outputStream.writeInt(broadcastPost);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            channelId = inputStream.readLong();
            topMsgId = inputStream.readInt();
            readMaxId = inputStream.readInt();
            if ((flags & 1) != 0) {
                broadcastId = inputStream.readLong();
            }

            if ((flags & 1) != 0) {
                broadcastPost = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdateReadChannelDiscussionInbox{" +
                    "flags=" + flags +
                    ", channelId=" + channelId +
                    ", topMsgId=" + topMsgId +
                    ", readMaxId=" + readMaxId +
                    ", broadcastId=" + broadcastId +
                    ", broadcastPost=" + broadcastPost +
                    '}';

        }
    }


    public static class UpdateReadChannelDiscussionOutbox extends ApiScheme.Update {
        public static final int ID = 0x695c9e7c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadChannelDiscussionOutbox";
        public long channelId;
        public int topMsgId;
        public int readMaxId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeInt(topMsgId);
            outputStream.writeInt(readMaxId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            topMsgId = inputStream.readInt();
            readMaxId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateReadChannelDiscussionOutbox{" +
                    "channelId=" + channelId +
                    ", topMsgId=" + topMsgId +
                    ", readMaxId=" + readMaxId +
                    '}';

        }
    }


    public static class UpdatePeerBlocked extends ApiScheme.Update {
        public static final int ID = 0x246a4b22;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePeerBlocked";
        public ApiScheme.Peer peerId;
        public ApiScheme.Bool blocked;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peerId.write(outputStream);

            blocked.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peerId = ApiScheme.Peer.readObject(inputStream);
            blocked = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdatePeerBlocked{" +
                    "peerId=" + peerId +
                    ", blocked=" + blocked +
                    '}';

        }
    }


    public static class UpdateChannelUserTyping extends ApiScheme.Update {
        public static final int ID = 0x8c88c923;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelUserTyping";
        public int flags;
        public long channelId;
        public Integer topMsgId = null;
        public ApiScheme.Peer fromId;
        public ApiScheme.SendMessageAction action;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = topMsgId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(channelId);
            if ((flags & 1) != 0 && topMsgId != null) {
                outputStream.writeInt(topMsgId);
            }

            fromId.write(outputStream);

            action.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            channelId = inputStream.readLong();
            if ((flags & 1) != 0) {
                topMsgId = inputStream.readInt();
            }

            fromId = ApiScheme.Peer.readObject(inputStream);
            action = ApiScheme.SendMessageAction.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateChannelUserTyping{" +
                    "flags=" + flags +
                    ", channelId=" + channelId +
                    ", topMsgId=" + topMsgId +
                    ", fromId=" + fromId +
                    ", action=" + action +
                    '}';

        }
    }


    public static class UpdatePinnedMessages extends ApiScheme.Update {
        public static final int ID = 0xed85eab5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePinnedMessages";
        public int flags;
        public True pinned = null;
        public ApiScheme.Peer peer;
        public TLVector<TLInt> messages;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pinned != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            peer.write(outputStream);

            messages.isBareTypeItem = true;
            messages.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdatePinnedMessages{" +
                    "flags=" + flags +
                    ", pinned=" + pinned +
                    ", peer=" + peer +
                    ", messages=" + messages +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdatePinnedChannelMessages extends ApiScheme.Update {
        public static final int ID = 0x5bb98608;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePinnedChannelMessages";
        public int flags;
        public True pinned = null;
        public long channelId;
        public TLVector<TLInt> messages;
        public int pts;
        public int ptsCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pinned != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            outputStream.writeLong(channelId);
            messages.isBareTypeItem = true;
            messages.write(outputStream);

            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            channelId = inputStream.readLong();
            messages = new TLVector<TLInt>(TLInt.class);
            messages.isBareTypeItem = true;
            messages.read(inputStream);

            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdatePinnedChannelMessages{" +
                    "flags=" + flags +
                    ", pinned=" + pinned +
                    ", channelId=" + channelId +
                    ", messages=" + messages +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    '}';

        }
    }


    public static class UpdateChat extends ApiScheme.Update {
        public static final int ID = 0xf89a6a4e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChat";
        public long chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UpdateChat{" +
                    "chatId=" + chatId +
                    '}';

        }
    }


    public static class UpdateGroupCallParticipants extends ApiScheme.Update {
        public static final int ID = 0xf2ebdb4e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateGroupCallParticipants";
        public ApiScheme.InputGroupCall call;
        public TLVector<ApiScheme.GroupCallParticipant> participants;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            call.write(outputStream);

            participants.write(outputStream);

            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            call = ApiScheme.InputGroupCall.readObject(inputStream);
            participants = new TLVector<ApiScheme.GroupCallParticipant>(ApiScheme.GroupCallParticipant.class);
            participants.read(inputStream);

            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateGroupCallParticipants{" +
                    "call=" + call +
                    ", participants=" + participants +
                    ", version=" + version +
                    '}';

        }
    }


    public static class UpdateGroupCall extends ApiScheme.Update {
        public static final int ID = 0x14b24500;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateGroupCall";
        public long chatId;
        public ApiScheme.GroupCall call;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(chatId);
            call.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readLong();
            call = ApiScheme.GroupCall.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateGroupCall{" +
                    "chatId=" + chatId +
                    ", call=" + call +
                    '}';

        }
    }


    public static class UpdatePeerHistoryTTL extends ApiScheme.Update {
        public static final int ID = 0xbb9bb9a5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePeerHistoryTTL";
        public int flags;
        public ApiScheme.Peer peer;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ttlPeriod != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            peer.write(outputStream);

            if ((flags & 1) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            peer = ApiScheme.Peer.readObject(inputStream);
            if ((flags & 1) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdatePeerHistoryTTL{" +
                    "flags=" + flags +
                    ", peer=" + peer +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class UpdateChatParticipant extends ApiScheme.Update {
        public static final int ID = 0xd087663a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChatParticipant";
        public int flags;
        public long chatId;
        public int date;
        public long actorId;
        public long userId;
        public ApiScheme.ChatParticipant prevParticipant = null;
        public ApiScheme.ChatParticipant newParticipant = null;
        public ApiScheme.ExportedChatInvite invite = null;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = prevParticipant != null ? (flags | 1) : (flags & ~1);
            flags = newParticipant != null ? (flags | 2) : (flags & ~2);
            flags = invite != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeLong(chatId);
            outputStream.writeInt(date);
            outputStream.writeLong(actorId);
            outputStream.writeLong(userId);
            if ((flags & 1) != 0 && prevParticipant != null) {
                prevParticipant.write(outputStream);
            }

            if ((flags & 2) != 0 && newParticipant != null) {
                newParticipant.write(outputStream);
            }

            if ((flags & 4) != 0 && invite != null) {
                invite.write(outputStream);
            }

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            chatId = inputStream.readLong();
            date = inputStream.readInt();
            actorId = inputStream.readLong();
            userId = inputStream.readLong();
            if ((flags & 1) != 0) {
                prevParticipant = ApiScheme.ChatParticipant.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                newParticipant = ApiScheme.ChatParticipant.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            }

            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChatParticipant{" +
                    "flags=" + flags +
                    ", chatId=" + chatId +
                    ", date=" + date +
                    ", actorId=" + actorId +
                    ", userId=" + userId +
                    ", prevParticipant=" + prevParticipant +
                    ", newParticipant=" + newParticipant +
                    ", invite=" + invite +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateChannelParticipant extends ApiScheme.Update {
        public static final int ID = 0x985d3abb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateChannelParticipant";
        public int flags;
        public long channelId;
        public int date;
        public long actorId;
        public long userId;
        public ApiScheme.ChannelParticipant prevParticipant = null;
        public ApiScheme.ChannelParticipant newParticipant = null;
        public ApiScheme.ExportedChatInvite invite = null;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = prevParticipant != null ? (flags | 1) : (flags & ~1);
            flags = newParticipant != null ? (flags | 2) : (flags & ~2);
            flags = invite != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeLong(channelId);
            outputStream.writeInt(date);
            outputStream.writeLong(actorId);
            outputStream.writeLong(userId);
            if ((flags & 1) != 0 && prevParticipant != null) {
                prevParticipant.write(outputStream);
            }

            if ((flags & 2) != 0 && newParticipant != null) {
                newParticipant.write(outputStream);
            }

            if ((flags & 4) != 0 && invite != null) {
                invite.write(outputStream);
            }

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            channelId = inputStream.readLong();
            date = inputStream.readInt();
            actorId = inputStream.readLong();
            userId = inputStream.readLong();
            if ((flags & 1) != 0) {
                prevParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                newParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            }

            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateChannelParticipant{" +
                    "flags=" + flags +
                    ", channelId=" + channelId +
                    ", date=" + date +
                    ", actorId=" + actorId +
                    ", userId=" + userId +
                    ", prevParticipant=" + prevParticipant +
                    ", newParticipant=" + newParticipant +
                    ", invite=" + invite +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateBotStopped extends ApiScheme.Update {
        public static final int ID = 0xc4870a49;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotStopped";
        public long userId;
        public int date;
        public ApiScheme.Bool stopped;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(date);
            stopped.write(outputStream);

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            date = inputStream.readInt();
            stopped = ApiScheme.Bool.readObject(inputStream);
            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateBotStopped{" +
                    "userId=" + userId +
                    ", date=" + date +
                    ", stopped=" + stopped +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateGroupCallConnection extends ApiScheme.Update {
        public static final int ID = 0xb783982;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateGroupCallConnection";
        public int flags;
        public True presentation = null;
        public ApiScheme.DataJSON params;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = presentation != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && presentation != null) {
                presentation.isBareType = true;
                presentation.write(outputStream);
            }

            params.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                presentation = new True();
                presentation.isBareType = true;
                presentation.read(inputStream);
            }

            params = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateGroupCallConnection{" +
                    "flags=" + flags +
                    ", presentation=" + presentation +
                    ", params=" + params +
                    '}';

        }
    }


    public static class UpdateBotCommands extends ApiScheme.Update {
        public static final int ID = 0x4d712f2e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotCommands";
        public ApiScheme.Peer peer;
        public long botId;
        public TLVector<ApiScheme.BotCommand> commands;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeLong(botId);
            commands.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            botId = inputStream.readLong();
            commands = new TLVector<ApiScheme.BotCommand>(ApiScheme.BotCommand.class);
            commands.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdateBotCommands{" +
                    "peer=" + peer +
                    ", botId=" + botId +
                    ", commands=" + commands +
                    '}';

        }
    }


    public static class UpdatePendingJoinRequests extends ApiScheme.Update {
        public static final int ID = 0x7063c3db;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatePendingJoinRequests";
        public ApiScheme.Peer peer;
        public int requestsPending;
        public TLVector<TLLong> recentRequesters;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(requestsPending);
            recentRequesters.isBareTypeItem = true;
            recentRequesters.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            requestsPending = inputStream.readInt();
            recentRequesters = new TLVector<TLLong>(TLLong.class);
            recentRequesters.isBareTypeItem = true;
            recentRequesters.read(inputStream);


        }

        @Override
        public String toString() {
            return "UpdatePendingJoinRequests{" +
                    "peer=" + peer +
                    ", requestsPending=" + requestsPending +
                    ", recentRequesters=" + recentRequesters +
                    '}';

        }
    }


    public static class UpdateBotChatInviteRequester extends ApiScheme.Update {
        public static final int ID = 0x11dfa986;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotChatInviteRequester";
        public ApiScheme.Peer peer;
        public int date;
        public long userId;
        public String about;
        public ApiScheme.ExportedChatInvite invite;
        public int qts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(date);
            outputStream.writeLong(userId);
            outputStream.writeTLString(about);
            invite.write(outputStream);

            outputStream.writeInt(qts);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            date = inputStream.readInt();
            userId = inputStream.readLong();
            about = inputStream.readTLString();
            invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            qts = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateBotChatInviteRequester{" +
                    "peer=" + peer +
                    ", date=" + date +
                    ", userId=" + userId +
                    ", about=" + about +
                    ", invite=" + invite +
                    ", qts=" + qts +
                    '}';

        }
    }


    public static class UpdateMessageReactions extends ApiScheme.Update {
        public static final int ID = 0x154798c3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateMessageReactions";
        public ApiScheme.Peer peer;
        public int msgId;
        public ApiScheme.MessageReactions reactions;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            reactions.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            msgId = inputStream.readInt();
            reactions = ApiScheme.MessageReactions.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateMessageReactions{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    ", reactions=" + reactions +
                    '}';

        }
    }


    public static class UpdateAttachMenuBots extends ApiScheme.Update {
        public static final int ID = 0x17b7a20b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateAttachMenuBots";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateAttachMenuBots{" +
                    '}';

        }
    }


    public static class UpdateWebViewResultSent extends ApiScheme.Update {
        public static final int ID = 0x1592b79d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateWebViewResultSent";
        public long queryId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(queryId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            queryId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "UpdateWebViewResultSent{" +
                    "queryId=" + queryId +
                    '}';

        }
    }


    public static class UpdateBotMenuButton extends ApiScheme.Update {
        public static final int ID = 0x14b85813;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateBotMenuButton";
        public long botId;
        public ApiScheme.BotMenuButton button;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(botId);
            button.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            botId = inputStream.readLong();
            button = ApiScheme.BotMenuButton.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "UpdateBotMenuButton{" +
                    "botId=" + botId +
                    ", button=" + button +
                    '}';

        }
    }


    public static class UpdateSavedRingtones extends ApiScheme.Update {
        public static final int ID = 0x74d8be99;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateSavedRingtones";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateSavedRingtones{" +
                    '}';

        }
    }


    public static class UpdateTranscribedAudio extends ApiScheme.Update {
        public static final int ID = 0x84cd5a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateTranscribedAudio";
        public int flags;
        public True pending = null;
        public ApiScheme.Peer peer;
        public int msgId;
        public long transcriptionId;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = pending != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && pending != null) {
                pending.isBareType = true;
                pending.write(outputStream);
            }

            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(transcriptionId);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                pending = new True();
                pending.isBareType = true;
                pending.read(inputStream);
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            msgId = inputStream.readInt();
            transcriptionId = inputStream.readLong();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UpdateTranscribedAudio{" +
                    "flags=" + flags +
                    ", pending=" + pending +
                    ", peer=" + peer +
                    ", msgId=" + msgId +
                    ", transcriptionId=" + transcriptionId +
                    ", text=" + text +
                    '}';

        }
    }


    public static class UpdateReadFeaturedEmojiStickers extends ApiScheme.Update {
        public static final int ID = 0xfb4c496c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateReadFeaturedEmojiStickers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdateReadFeaturedEmojiStickers{" +
                    '}';

        }
    }


    public static class UpdatesTooLong extends ApiScheme.Updates {
        public static final int ID = 0xe317af7e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatesTooLong";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UpdatesTooLong{" +
                    '}';

        }
    }


    public static class UpdateShortMessage extends ApiScheme.Updates {
        public static final int ID = 0x313bc7f8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateShortMessage";
        public int flags;
        public True out = null;
        public True mentioned = null;
        public True mediaUnread = null;
        public True silent = null;
        public int id;
        public long userId;
        public String message;
        public int pts;
        public int ptsCount;
        public int date;
        public ApiScheme.MessageFwdHeader fwdFrom = null;
        public Long viaBotId = null;
        public ApiScheme.MessageReplyHeader replyTo = null;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = out != null ? (flags | 2) : (flags & ~2);
            flags = mentioned != null ? (flags | 16) : (flags & ~16);
            flags = mediaUnread != null ? (flags | 32) : (flags & ~32);
            flags = silent != null ? (flags | 8192) : (flags & ~8192);
            flags = fwdFrom != null ? (flags | 4) : (flags & ~4);
            flags = viaBotId != null ? (flags | 2048) : (flags & ~2048);
            flags = replyTo != null ? (flags | 8) : (flags & ~8);
            flags = entities != null ? (flags | 128) : (flags & ~128);
            flags = ttlPeriod != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && out != null) {
                out.isBareType = true;
                out.write(outputStream);
            }

            if ((flags & 16) != 0 && mentioned != null) {
                mentioned.isBareType = true;
                mentioned.write(outputStream);
            }

            if ((flags & 32) != 0 && mediaUnread != null) {
                mediaUnread.isBareType = true;
                mediaUnread.write(outputStream);
            }

            if ((flags & 8192) != 0 && silent != null) {
                silent.isBareType = true;
                silent.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeLong(userId);
            outputStream.writeTLString(message);
            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);
            outputStream.writeInt(date);
            if ((flags & 4) != 0 && fwdFrom != null) {
                fwdFrom.write(outputStream);
            }

            if ((flags & 2048) != 0 && viaBotId != null) {
                outputStream.writeLong(viaBotId);
            }

            if ((flags & 8) != 0 && replyTo != null) {
                replyTo.write(outputStream);
            }

            if ((flags & 128) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 33554432) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                out = new True();
                out.isBareType = true;
                out.read(inputStream);
            }

            if ((flags & 16) != 0) {
                mentioned = new True();
                mentioned.isBareType = true;
                mentioned.read(inputStream);
            }

            if ((flags & 32) != 0) {
                mediaUnread = new True();
                mediaUnread.isBareType = true;
                mediaUnread.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                silent = new True();
                silent.isBareType = true;
                silent.read(inputStream);
            }

            id = inputStream.readInt();
            userId = inputStream.readLong();
            message = inputStream.readTLString();
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();
            date = inputStream.readInt();
            if ((flags & 4) != 0) {
                fwdFrom = ApiScheme.MessageFwdHeader.readObject(inputStream);
            }

            if ((flags & 2048) != 0) {
                viaBotId = inputStream.readLong();
            }

            if ((flags & 8) != 0) {
                replyTo = ApiScheme.MessageReplyHeader.readObject(inputStream);
            }

            if ((flags & 128) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdateShortMessage{" +
                    "flags=" + flags +
                    ", out=" + out +
                    ", mentioned=" + mentioned +
                    ", mediaUnread=" + mediaUnread +
                    ", silent=" + silent +
                    ", id=" + id +
                    ", userId=" + userId +
                    ", message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    ", date=" + date +
                    ", fwdFrom=" + fwdFrom +
                    ", viaBotId=" + viaBotId +
                    ", replyTo=" + replyTo +
                    ", entities=" + entities +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class UpdateShortChatMessage extends ApiScheme.Updates {
        public static final int ID = 0x4d6deea5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateShortChatMessage";
        public int flags;
        public True out = null;
        public True mentioned = null;
        public True mediaUnread = null;
        public True silent = null;
        public int id;
        public long fromId;
        public long chatId;
        public String message;
        public int pts;
        public int ptsCount;
        public int date;
        public ApiScheme.MessageFwdHeader fwdFrom = null;
        public Long viaBotId = null;
        public ApiScheme.MessageReplyHeader replyTo = null;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = out != null ? (flags | 2) : (flags & ~2);
            flags = mentioned != null ? (flags | 16) : (flags & ~16);
            flags = mediaUnread != null ? (flags | 32) : (flags & ~32);
            flags = silent != null ? (flags | 8192) : (flags & ~8192);
            flags = fwdFrom != null ? (flags | 4) : (flags & ~4);
            flags = viaBotId != null ? (flags | 2048) : (flags & ~2048);
            flags = replyTo != null ? (flags | 8) : (flags & ~8);
            flags = entities != null ? (flags | 128) : (flags & ~128);
            flags = ttlPeriod != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && out != null) {
                out.isBareType = true;
                out.write(outputStream);
            }

            if ((flags & 16) != 0 && mentioned != null) {
                mentioned.isBareType = true;
                mentioned.write(outputStream);
            }

            if ((flags & 32) != 0 && mediaUnread != null) {
                mediaUnread.isBareType = true;
                mediaUnread.write(outputStream);
            }

            if ((flags & 8192) != 0 && silent != null) {
                silent.isBareType = true;
                silent.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeLong(fromId);
            outputStream.writeLong(chatId);
            outputStream.writeTLString(message);
            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);
            outputStream.writeInt(date);
            if ((flags & 4) != 0 && fwdFrom != null) {
                fwdFrom.write(outputStream);
            }

            if ((flags & 2048) != 0 && viaBotId != null) {
                outputStream.writeLong(viaBotId);
            }

            if ((flags & 8) != 0 && replyTo != null) {
                replyTo.write(outputStream);
            }

            if ((flags & 128) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 33554432) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                out = new True();
                out.isBareType = true;
                out.read(inputStream);
            }

            if ((flags & 16) != 0) {
                mentioned = new True();
                mentioned.isBareType = true;
                mentioned.read(inputStream);
            }

            if ((flags & 32) != 0) {
                mediaUnread = new True();
                mediaUnread.isBareType = true;
                mediaUnread.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                silent = new True();
                silent.isBareType = true;
                silent.read(inputStream);
            }

            id = inputStream.readInt();
            fromId = inputStream.readLong();
            chatId = inputStream.readLong();
            message = inputStream.readTLString();
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();
            date = inputStream.readInt();
            if ((flags & 4) != 0) {
                fwdFrom = ApiScheme.MessageFwdHeader.readObject(inputStream);
            }

            if ((flags & 2048) != 0) {
                viaBotId = inputStream.readLong();
            }

            if ((flags & 8) != 0) {
                replyTo = ApiScheme.MessageReplyHeader.readObject(inputStream);
            }

            if ((flags & 128) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdateShortChatMessage{" +
                    "flags=" + flags +
                    ", out=" + out +
                    ", mentioned=" + mentioned +
                    ", mediaUnread=" + mediaUnread +
                    ", silent=" + silent +
                    ", id=" + id +
                    ", fromId=" + fromId +
                    ", chatId=" + chatId +
                    ", message=" + message +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    ", date=" + date +
                    ", fwdFrom=" + fwdFrom +
                    ", viaBotId=" + viaBotId +
                    ", replyTo=" + replyTo +
                    ", entities=" + entities +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class UpdateShort extends ApiScheme.Updates {
        public static final int ID = 0x78d4dec1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateShort";
        public ApiScheme.Update update;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            update.write(outputStream);

            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            update = ApiScheme.Update.readObject(inputStream);
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdateShort{" +
                    "update=" + update +
                    ", date=" + date +
                    '}';

        }
    }


    public static class UpdatesCombined extends ApiScheme.Updates {
        public static final int ID = 0x725b04c3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updatesCombined";
        public TLVector<ApiScheme.Update> updates;
        public TLVector<ApiScheme.User> users;
        public TLVector<ApiScheme.Chat> chats;
        public int date;
        public int seqStart;
        public int seq;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            updates.write(outputStream);

            users.write(outputStream);

            chats.write(outputStream);

            outputStream.writeInt(date);
            outputStream.writeInt(seqStart);
            outputStream.writeInt(seq);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            updates = new TLVector<ApiScheme.Update>(ApiScheme.Update.class);
            updates.read(inputStream);

            users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
            users.read(inputStream);

            chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
            chats.read(inputStream);

            date = inputStream.readInt();
            seqStart = inputStream.readInt();
            seq = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "UpdatesCombined{" +
                    "updates=" + updates +
                    ", users=" + users +
                    ", chats=" + chats +
                    ", date=" + date +
                    ", seqStart=" + seqStart +
                    ", seq=" + seq +
                    '}';

        }
    }


    public static class Updates2 extends ApiScheme.Updates {
        public static final int ID = 0x74ae4240;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updates";
        public TLVector<ApiScheme.Update> updates;
        public TLVector<ApiScheme.User> users;
        public TLVector<ApiScheme.Chat> chats;
        public int date;
        public int seq;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            updates.write(outputStream);

            users.write(outputStream);

            chats.write(outputStream);

            outputStream.writeInt(date);
            outputStream.writeInt(seq);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            updates = new TLVector<ApiScheme.Update>(ApiScheme.Update.class);
            updates.read(inputStream);

            users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
            users.read(inputStream);

            chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
            chats.read(inputStream);

            date = inputStream.readInt();
            seq = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "Updates{" +
                    "updates=" + updates +
                    ", users=" + users +
                    ", chats=" + chats +
                    ", date=" + date +
                    ", seq=" + seq +
                    '}';

        }
    }


    public static class UpdateShortSentMessage extends ApiScheme.Updates {
        public static final int ID = 0x9015e101;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "updateShortSentMessage";
        public int flags;
        public True out = null;
        public int id;
        public int pts;
        public int ptsCount;
        public int date;
        public ApiScheme.MessageMedia media = null;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public Integer ttlPeriod = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = out != null ? (flags | 2) : (flags & ~2);
            flags = media != null ? (flags | 512) : (flags & ~512);
            flags = entities != null ? (flags | 128) : (flags & ~128);
            flags = ttlPeriod != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && out != null) {
                out.isBareType = true;
                out.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeInt(pts);
            outputStream.writeInt(ptsCount);
            outputStream.writeInt(date);
            if ((flags & 512) != 0 && media != null) {
                media.write(outputStream);
            }

            if ((flags & 128) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 33554432) != 0 && ttlPeriod != null) {
                outputStream.writeInt(ttlPeriod);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                out = new True();
                out.isBareType = true;
                out.read(inputStream);
            }

            id = inputStream.readInt();
            pts = inputStream.readInt();
            ptsCount = inputStream.readInt();
            date = inputStream.readInt();
            if ((flags & 512) != 0) {
                media = ApiScheme.MessageMedia.readObject(inputStream);
            }

            if ((flags & 128) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 33554432) != 0) {
                ttlPeriod = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "UpdateShortSentMessage{" +
                    "flags=" + flags +
                    ", out=" + out +
                    ", id=" + id +
                    ", pts=" + pts +
                    ", ptsCount=" + ptsCount +
                    ", date=" + date +
                    ", media=" + media +
                    ", entities=" + entities +
                    ", ttlPeriod=" + ttlPeriod +
                    '}';

        }
    }


    public static class DcOption2 extends ApiScheme.DcOption {
        public static final int ID = 0x18b7a10d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dcOption";
        public int flags;
        public True ipv6 = null;
        public True mediaOnly = null;
        public True tcpoOnly = null;
        public True cdn = null;
        public True mStatic = null;
        public True thisPortOnly = null;
        public int id;
        public String ipAddress;
        public int port;
        public byte[] secret = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = ipv6 != null ? (flags | 1) : (flags & ~1);
            flags = mediaOnly != null ? (flags | 2) : (flags & ~2);
            flags = tcpoOnly != null ? (flags | 4) : (flags & ~4);
            flags = cdn != null ? (flags | 8) : (flags & ~8);
            flags = mStatic != null ? (flags | 16) : (flags & ~16);
            flags = thisPortOnly != null ? (flags | 32) : (flags & ~32);
            flags = secret != null ? (flags | 1024) : (flags & ~1024);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && ipv6 != null) {
                ipv6.isBareType = true;
                ipv6.write(outputStream);
            }

            if ((flags & 2) != 0 && mediaOnly != null) {
                mediaOnly.isBareType = true;
                mediaOnly.write(outputStream);
            }

            if ((flags & 4) != 0 && tcpoOnly != null) {
                tcpoOnly.isBareType = true;
                tcpoOnly.write(outputStream);
            }

            if ((flags & 8) != 0 && cdn != null) {
                cdn.isBareType = true;
                cdn.write(outputStream);
            }

            if ((flags & 16) != 0 && mStatic != null) {
                mStatic.isBareType = true;
                mStatic.write(outputStream);
            }

            if ((flags & 32) != 0 && thisPortOnly != null) {
                thisPortOnly.isBareType = true;
                thisPortOnly.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeTLString(ipAddress);
            outputStream.writeInt(port);
            if ((flags & 1024) != 0 && secret != null) {
                outputStream.writeTLBytes(secret);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                ipv6 = new True();
                ipv6.isBareType = true;
                ipv6.read(inputStream);
            }

            if ((flags & 2) != 0) {
                mediaOnly = new True();
                mediaOnly.isBareType = true;
                mediaOnly.read(inputStream);
            }

            if ((flags & 4) != 0) {
                tcpoOnly = new True();
                tcpoOnly.isBareType = true;
                tcpoOnly.read(inputStream);
            }

            if ((flags & 8) != 0) {
                cdn = new True();
                cdn.isBareType = true;
                cdn.read(inputStream);
            }

            if ((flags & 16) != 0) {
                mStatic = new True();
                mStatic.isBareType = true;
                mStatic.read(inputStream);
            }

            if ((flags & 32) != 0) {
                thisPortOnly = new True();
                thisPortOnly.isBareType = true;
                thisPortOnly.read(inputStream);
            }

            id = inputStream.readInt();
            ipAddress = inputStream.readTLString();
            port = inputStream.readInt();
            if ((flags & 1024) != 0) {
                secret = inputStream.readTLBytes();
            }


        }

        @Override
        public String toString() {
            return "DcOption{" +
                    "flags=" + flags +
                    ", ipv6=" + ipv6 +
                    ", mediaOnly=" + mediaOnly +
                    ", tcpoOnly=" + tcpoOnly +
                    ", cdn=" + cdn +
                    ", mStatic=" + mStatic +
                    ", thisPortOnly=" + thisPortOnly +
                    ", id=" + id +
                    ", ipAddress=" + ipAddress +
                    ", port=" + port +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class Config2 extends ApiScheme.Config {
        public static final int ID = 0x330b4067;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "config";
        public int flags;
        public True phonecallsEnabled = null;
        public True defaultP2pContacts = null;
        public True preloadFeaturedStickers = null;
        public True ignorePhoneEntities = null;
        public True revokePmInbox = null;
        public True blockedMode = null;
        public True pfsEnabled = null;
        public True forceTryIpv6 = null;
        public int date;
        public int expires;
        public ApiScheme.Bool testMode;
        public int thisDc;
        public TLVector<ApiScheme.DcOption> dcOptions;
        public String dcTxtDomainName;
        public int chatSizeMax;
        public int megagroupSizeMax;
        public int forwardedCountMax;
        public int onlineUpdatePeriodMs;
        public int offlineBlurTimeoutMs;
        public int offlineIdleTimeoutMs;
        public int onlineCloudTimeoutMs;
        public int notifyCloudDelayMs;
        public int notifyDefaultDelayMs;
        public int pushChatPeriodMs;
        public int pushChatLimit;
        public int savedGifsLimit;
        public int editTimeLimit;
        public int revokeTimeLimit;
        public int revokePmTimeLimit;
        public int ratingEDecay;
        public int stickersRecentLimit;
        public int stickersFavedLimit;
        public int channelsReadMediaPeriod;
        public Integer tmpSessions = null;
        public int pinnedDialogsCountMax;
        public int pinnedInfolderCountMax;
        public int callReceiveTimeoutMs;
        public int callRingTimeoutMs;
        public int callConnectTimeoutMs;
        public int callPacketTimeoutMs;
        public String meUrlPrefix;
        public String autoupdateUrlPrefix = null;
        public String gifSearchUsername = null;
        public String venueSearchUsername = null;
        public String imgSearchUsername = null;
        public String staticMapsProvider = null;
        public int captionLengthMax;
        public int messageLengthMax;
        public int webfileDcId;
        public String suggestedLangCode = null;
        public Integer langPackVersion = null;
        public Integer baseLangPackVersion = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = phonecallsEnabled != null ? (flags | 2) : (flags & ~2);
            flags = defaultP2pContacts != null ? (flags | 8) : (flags & ~8);
            flags = preloadFeaturedStickers != null ? (flags | 16) : (flags & ~16);
            flags = ignorePhoneEntities != null ? (flags | 32) : (flags & ~32);
            flags = revokePmInbox != null ? (flags | 64) : (flags & ~64);
            flags = blockedMode != null ? (flags | 256) : (flags & ~256);
            flags = pfsEnabled != null ? (flags | 8192) : (flags & ~8192);
            flags = forceTryIpv6 != null ? (flags | 16384) : (flags & ~16384);
            flags = tmpSessions != null ? (flags | 1) : (flags & ~1);
            flags = autoupdateUrlPrefix != null ? (flags | 128) : (flags & ~128);
            flags = gifSearchUsername != null ? (flags | 512) : (flags & ~512);
            flags = venueSearchUsername != null ? (flags | 1024) : (flags & ~1024);
            flags = imgSearchUsername != null ? (flags | 2048) : (flags & ~2048);
            flags = staticMapsProvider != null ? (flags | 4096) : (flags & ~4096);
            flags = suggestedLangCode != null ? (flags | 4) : (flags & ~4);
            flags = langPackVersion != null ? (flags | 4) : (flags & ~4);
            flags = baseLangPackVersion != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && phonecallsEnabled != null) {
                phonecallsEnabled.isBareType = true;
                phonecallsEnabled.write(outputStream);
            }

            if ((flags & 8) != 0 && defaultP2pContacts != null) {
                defaultP2pContacts.isBareType = true;
                defaultP2pContacts.write(outputStream);
            }

            if ((flags & 16) != 0 && preloadFeaturedStickers != null) {
                preloadFeaturedStickers.isBareType = true;
                preloadFeaturedStickers.write(outputStream);
            }

            if ((flags & 32) != 0 && ignorePhoneEntities != null) {
                ignorePhoneEntities.isBareType = true;
                ignorePhoneEntities.write(outputStream);
            }

            if ((flags & 64) != 0 && revokePmInbox != null) {
                revokePmInbox.isBareType = true;
                revokePmInbox.write(outputStream);
            }

            if ((flags & 256) != 0 && blockedMode != null) {
                blockedMode.isBareType = true;
                blockedMode.write(outputStream);
            }

            if ((flags & 8192) != 0 && pfsEnabled != null) {
                pfsEnabled.isBareType = true;
                pfsEnabled.write(outputStream);
            }

            if ((flags & 16384) != 0 && forceTryIpv6 != null) {
                forceTryIpv6.isBareType = true;
                forceTryIpv6.write(outputStream);
            }

            outputStream.writeInt(date);
            outputStream.writeInt(expires);
            testMode.write(outputStream);

            outputStream.writeInt(thisDc);
            dcOptions.write(outputStream);

            outputStream.writeTLString(dcTxtDomainName);
            outputStream.writeInt(chatSizeMax);
            outputStream.writeInt(megagroupSizeMax);
            outputStream.writeInt(forwardedCountMax);
            outputStream.writeInt(onlineUpdatePeriodMs);
            outputStream.writeInt(offlineBlurTimeoutMs);
            outputStream.writeInt(offlineIdleTimeoutMs);
            outputStream.writeInt(onlineCloudTimeoutMs);
            outputStream.writeInt(notifyCloudDelayMs);
            outputStream.writeInt(notifyDefaultDelayMs);
            outputStream.writeInt(pushChatPeriodMs);
            outputStream.writeInt(pushChatLimit);
            outputStream.writeInt(savedGifsLimit);
            outputStream.writeInt(editTimeLimit);
            outputStream.writeInt(revokeTimeLimit);
            outputStream.writeInt(revokePmTimeLimit);
            outputStream.writeInt(ratingEDecay);
            outputStream.writeInt(stickersRecentLimit);
            outputStream.writeInt(stickersFavedLimit);
            outputStream.writeInt(channelsReadMediaPeriod);
            if ((flags & 1) != 0 && tmpSessions != null) {
                outputStream.writeInt(tmpSessions);
            }

            outputStream.writeInt(pinnedDialogsCountMax);
            outputStream.writeInt(pinnedInfolderCountMax);
            outputStream.writeInt(callReceiveTimeoutMs);
            outputStream.writeInt(callRingTimeoutMs);
            outputStream.writeInt(callConnectTimeoutMs);
            outputStream.writeInt(callPacketTimeoutMs);
            outputStream.writeTLString(meUrlPrefix);
            if ((flags & 128) != 0 && autoupdateUrlPrefix != null) {
                outputStream.writeTLString(autoupdateUrlPrefix);
            }

            if ((flags & 512) != 0 && gifSearchUsername != null) {
                outputStream.writeTLString(gifSearchUsername);
            }

            if ((flags & 1024) != 0 && venueSearchUsername != null) {
                outputStream.writeTLString(venueSearchUsername);
            }

            if ((flags & 2048) != 0 && imgSearchUsername != null) {
                outputStream.writeTLString(imgSearchUsername);
            }

            if ((flags & 4096) != 0 && staticMapsProvider != null) {
                outputStream.writeTLString(staticMapsProvider);
            }

            outputStream.writeInt(captionLengthMax);
            outputStream.writeInt(messageLengthMax);
            outputStream.writeInt(webfileDcId);
            if ((flags & 4) != 0 && suggestedLangCode != null) {
                outputStream.writeTLString(suggestedLangCode);
            }

            if ((flags & 4) != 0 && langPackVersion != null) {
                outputStream.writeInt(langPackVersion);
            }

            if ((flags & 4) != 0 && baseLangPackVersion != null) {
                outputStream.writeInt(baseLangPackVersion);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                phonecallsEnabled = new True();
                phonecallsEnabled.isBareType = true;
                phonecallsEnabled.read(inputStream);
            }

            if ((flags & 8) != 0) {
                defaultP2pContacts = new True();
                defaultP2pContacts.isBareType = true;
                defaultP2pContacts.read(inputStream);
            }

            if ((flags & 16) != 0) {
                preloadFeaturedStickers = new True();
                preloadFeaturedStickers.isBareType = true;
                preloadFeaturedStickers.read(inputStream);
            }

            if ((flags & 32) != 0) {
                ignorePhoneEntities = new True();
                ignorePhoneEntities.isBareType = true;
                ignorePhoneEntities.read(inputStream);
            }

            if ((flags & 64) != 0) {
                revokePmInbox = new True();
                revokePmInbox.isBareType = true;
                revokePmInbox.read(inputStream);
            }

            if ((flags & 256) != 0) {
                blockedMode = new True();
                blockedMode.isBareType = true;
                blockedMode.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                pfsEnabled = new True();
                pfsEnabled.isBareType = true;
                pfsEnabled.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                forceTryIpv6 = new True();
                forceTryIpv6.isBareType = true;
                forceTryIpv6.read(inputStream);
            }

            date = inputStream.readInt();
            expires = inputStream.readInt();
            testMode = ApiScheme.Bool.readObject(inputStream);
            thisDc = inputStream.readInt();
            dcOptions = new TLVector<ApiScheme.DcOption>(ApiScheme.DcOption.class);
            dcOptions.read(inputStream);

            dcTxtDomainName = inputStream.readTLString();
            chatSizeMax = inputStream.readInt();
            megagroupSizeMax = inputStream.readInt();
            forwardedCountMax = inputStream.readInt();
            onlineUpdatePeriodMs = inputStream.readInt();
            offlineBlurTimeoutMs = inputStream.readInt();
            offlineIdleTimeoutMs = inputStream.readInt();
            onlineCloudTimeoutMs = inputStream.readInt();
            notifyCloudDelayMs = inputStream.readInt();
            notifyDefaultDelayMs = inputStream.readInt();
            pushChatPeriodMs = inputStream.readInt();
            pushChatLimit = inputStream.readInt();
            savedGifsLimit = inputStream.readInt();
            editTimeLimit = inputStream.readInt();
            revokeTimeLimit = inputStream.readInt();
            revokePmTimeLimit = inputStream.readInt();
            ratingEDecay = inputStream.readInt();
            stickersRecentLimit = inputStream.readInt();
            stickersFavedLimit = inputStream.readInt();
            channelsReadMediaPeriod = inputStream.readInt();
            if ((flags & 1) != 0) {
                tmpSessions = inputStream.readInt();
            }

            pinnedDialogsCountMax = inputStream.readInt();
            pinnedInfolderCountMax = inputStream.readInt();
            callReceiveTimeoutMs = inputStream.readInt();
            callRingTimeoutMs = inputStream.readInt();
            callConnectTimeoutMs = inputStream.readInt();
            callPacketTimeoutMs = inputStream.readInt();
            meUrlPrefix = inputStream.readTLString();
            if ((flags & 128) != 0) {
                autoupdateUrlPrefix = inputStream.readTLString();
            }

            if ((flags & 512) != 0) {
                gifSearchUsername = inputStream.readTLString();
            }

            if ((flags & 1024) != 0) {
                venueSearchUsername = inputStream.readTLString();
            }

            if ((flags & 2048) != 0) {
                imgSearchUsername = inputStream.readTLString();
            }

            if ((flags & 4096) != 0) {
                staticMapsProvider = inputStream.readTLString();
            }

            captionLengthMax = inputStream.readInt();
            messageLengthMax = inputStream.readInt();
            webfileDcId = inputStream.readInt();
            if ((flags & 4) != 0) {
                suggestedLangCode = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                langPackVersion = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                baseLangPackVersion = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Config{" +
                    "flags=" + flags +
                    ", phonecallsEnabled=" + phonecallsEnabled +
                    ", defaultP2pContacts=" + defaultP2pContacts +
                    ", preloadFeaturedStickers=" + preloadFeaturedStickers +
                    ", ignorePhoneEntities=" + ignorePhoneEntities +
                    ", revokePmInbox=" + revokePmInbox +
                    ", blockedMode=" + blockedMode +
                    ", pfsEnabled=" + pfsEnabled +
                    ", forceTryIpv6=" + forceTryIpv6 +
                    ", date=" + date +
                    ", expires=" + expires +
                    ", testMode=" + testMode +
                    ", thisDc=" + thisDc +
                    ", dcOptions=" + dcOptions +
                    ", dcTxtDomainName=" + dcTxtDomainName +
                    ", chatSizeMax=" + chatSizeMax +
                    ", megagroupSizeMax=" + megagroupSizeMax +
                    ", forwardedCountMax=" + forwardedCountMax +
                    ", onlineUpdatePeriodMs=" + onlineUpdatePeriodMs +
                    ", offlineBlurTimeoutMs=" + offlineBlurTimeoutMs +
                    ", offlineIdleTimeoutMs=" + offlineIdleTimeoutMs +
                    ", onlineCloudTimeoutMs=" + onlineCloudTimeoutMs +
                    ", notifyCloudDelayMs=" + notifyCloudDelayMs +
                    ", notifyDefaultDelayMs=" + notifyDefaultDelayMs +
                    ", pushChatPeriodMs=" + pushChatPeriodMs +
                    ", pushChatLimit=" + pushChatLimit +
                    ", savedGifsLimit=" + savedGifsLimit +
                    ", editTimeLimit=" + editTimeLimit +
                    ", revokeTimeLimit=" + revokeTimeLimit +
                    ", revokePmTimeLimit=" + revokePmTimeLimit +
                    ", ratingEDecay=" + ratingEDecay +
                    ", stickersRecentLimit=" + stickersRecentLimit +
                    ", stickersFavedLimit=" + stickersFavedLimit +
                    ", channelsReadMediaPeriod=" + channelsReadMediaPeriod +
                    ", tmpSessions=" + tmpSessions +
                    ", pinnedDialogsCountMax=" + pinnedDialogsCountMax +
                    ", pinnedInfolderCountMax=" + pinnedInfolderCountMax +
                    ", callReceiveTimeoutMs=" + callReceiveTimeoutMs +
                    ", callRingTimeoutMs=" + callRingTimeoutMs +
                    ", callConnectTimeoutMs=" + callConnectTimeoutMs +
                    ", callPacketTimeoutMs=" + callPacketTimeoutMs +
                    ", meUrlPrefix=" + meUrlPrefix +
                    ", autoupdateUrlPrefix=" + autoupdateUrlPrefix +
                    ", gifSearchUsername=" + gifSearchUsername +
                    ", venueSearchUsername=" + venueSearchUsername +
                    ", imgSearchUsername=" + imgSearchUsername +
                    ", staticMapsProvider=" + staticMapsProvider +
                    ", captionLengthMax=" + captionLengthMax +
                    ", messageLengthMax=" + messageLengthMax +
                    ", webfileDcId=" + webfileDcId +
                    ", suggestedLangCode=" + suggestedLangCode +
                    ", langPackVersion=" + langPackVersion +
                    ", baseLangPackVersion=" + baseLangPackVersion +
                    '}';

        }
    }


    public static class NearestDc2 extends ApiScheme.NearestDc {
        public static final int ID = 0x8e1a1775;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "nearestDc";
        public String country;
        public int thisDc;
        public int nearestDc;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(country);
            outputStream.writeInt(thisDc);
            outputStream.writeInt(nearestDc);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            country = inputStream.readTLString();
            thisDc = inputStream.readInt();
            nearestDc = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "NearestDc{" +
                    "country=" + country +
                    ", thisDc=" + thisDc +
                    ", nearestDc=" + nearestDc +
                    '}';

        }
    }


    public static class EncryptedChatEmpty extends ApiScheme.EncryptedChat {
        public static final int ID = 0xab7ec0a0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedChatEmpty";
        public int id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "EncryptedChatEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class EncryptedChatWaiting extends ApiScheme.EncryptedChat {
        public static final int ID = 0x66b25953;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedChatWaiting";
        public int id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "EncryptedChatWaiting{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    '}';

        }
    }


    public static class EncryptedChatRequested extends ApiScheme.EncryptedChat {
        public static final int ID = 0x48f1d94c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedChatRequested";
        public int flags;
        public Integer folderId = null;
        public int id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public byte[] gA;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = folderId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && folderId != null) {
                outputStream.writeInt(folderId);
            }

            outputStream.writeInt(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            outputStream.writeTLBytes(gA);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                folderId = inputStream.readInt();
            }

            id = inputStream.readInt();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            gA = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "EncryptedChatRequested{" +
                    "flags=" + flags +
                    ", folderId=" + folderId +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", gA=" + gA +
                    '}';

        }
    }


    public static class EncryptedChat2 extends ApiScheme.EncryptedChat {
        public static final int ID = 0x61f0d4c7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedChat";
        public int id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public byte[] gAOrB;
        public long keyFingerprint;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            outputStream.writeTLBytes(gAOrB);
            outputStream.writeLong(keyFingerprint);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            gAOrB = inputStream.readTLBytes();
            keyFingerprint = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "EncryptedChat{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", gAOrB=" + gAOrB +
                    ", keyFingerprint=" + keyFingerprint +
                    '}';

        }
    }


    public static class EncryptedChatDiscarded extends ApiScheme.EncryptedChat {
        public static final int ID = 0x1e1c7c45;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedChatDiscarded";
        public int flags;
        public True historyDeleted = null;
        public int id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = historyDeleted != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && historyDeleted != null) {
                historyDeleted.isBareType = true;
                historyDeleted.write(outputStream);
            }

            outputStream.writeInt(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                historyDeleted = new True();
                historyDeleted.isBareType = true;
                historyDeleted.read(inputStream);
            }

            id = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "EncryptedChatDiscarded{" +
                    "flags=" + flags +
                    ", historyDeleted=" + historyDeleted +
                    ", id=" + id +
                    '}';

        }
    }


    public static class InputEncryptedChat2 extends ApiScheme.InputEncryptedChat {
        public static final int ID = 0xf141b5e1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedChat";
        public int chatId;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(chatId);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chatId = inputStream.readInt();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputEncryptedChat{" +
                    "chatId=" + chatId +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class EncryptedFileEmpty extends ApiScheme.EncryptedFile {
        public static final int ID = 0xc21f497e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedFileEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "EncryptedFileEmpty{" +
                    '}';

        }
    }


    public static class EncryptedFile2 extends ApiScheme.EncryptedFile {
        public static final int ID = 0xa8008cd8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedFile";
        public long id;
        public long accessHash;
        public long size;
        public int dcId;
        public int keyFingerprint;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeLong(size);
            outputStream.writeInt(dcId);
            outputStream.writeInt(keyFingerprint);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            size = inputStream.readLong();
            dcId = inputStream.readInt();
            keyFingerprint = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "EncryptedFile{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", size=" + size +
                    ", dcId=" + dcId +
                    ", keyFingerprint=" + keyFingerprint +
                    '}';

        }
    }


    public static class InputEncryptedFileEmpty extends ApiScheme.InputEncryptedFile {
        public static final int ID = 0x1837c364;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedFileEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputEncryptedFileEmpty{" +
                    '}';

        }
    }


    public static class InputEncryptedFileUploaded extends ApiScheme.InputEncryptedFile {
        public static final int ID = 0x64bd0306;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedFileUploaded";
        public long id;
        public int parts;
        public String md5Checksum;
        public int keyFingerprint;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(parts);
            outputStream.writeTLString(md5Checksum);
            outputStream.writeInt(keyFingerprint);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            parts = inputStream.readInt();
            md5Checksum = inputStream.readTLString();
            keyFingerprint = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputEncryptedFileUploaded{" +
                    "id=" + id +
                    ", parts=" + parts +
                    ", md5Checksum=" + md5Checksum +
                    ", keyFingerprint=" + keyFingerprint +
                    '}';

        }
    }


    public static class InputEncryptedFile2 extends ApiScheme.InputEncryptedFile {
        public static final int ID = 0x5a17b5e5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedFile";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputEncryptedFile{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputEncryptedFileBigUploaded extends ApiScheme.InputEncryptedFile {
        public static final int ID = 0x2dc173c8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputEncryptedFileBigUploaded";
        public long id;
        public int parts;
        public int keyFingerprint;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(parts);
            outputStream.writeInt(keyFingerprint);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            parts = inputStream.readInt();
            keyFingerprint = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputEncryptedFileBigUploaded{" +
                    "id=" + id +
                    ", parts=" + parts +
                    ", keyFingerprint=" + keyFingerprint +
                    '}';

        }
    }


    public static class EncryptedMessage2 extends ApiScheme.EncryptedMessage {
        public static final int ID = 0xed18c118;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedMessage";
        public long randomId;
        public int chatId;
        public int date;
        public byte[] bytes;
        public ApiScheme.EncryptedFile file;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(randomId);
            outputStream.writeInt(chatId);
            outputStream.writeInt(date);
            outputStream.writeTLBytes(bytes);
            file.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            randomId = inputStream.readLong();
            chatId = inputStream.readInt();
            date = inputStream.readInt();
            bytes = inputStream.readTLBytes();
            file = ApiScheme.EncryptedFile.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "EncryptedMessage{" +
                    "randomId=" + randomId +
                    ", chatId=" + chatId +
                    ", date=" + date +
                    ", bytes=" + bytes +
                    ", file=" + file +
                    '}';

        }
    }


    public static class EncryptedMessageService extends ApiScheme.EncryptedMessage {
        public static final int ID = 0x23734b06;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "encryptedMessageService";
        public long randomId;
        public int chatId;
        public int date;
        public byte[] bytes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(randomId);
            outputStream.writeInt(chatId);
            outputStream.writeInt(date);
            outputStream.writeTLBytes(bytes);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            randomId = inputStream.readLong();
            chatId = inputStream.readInt();
            date = inputStream.readInt();
            bytes = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "EncryptedMessageService{" +
                    "randomId=" + randomId +
                    ", chatId=" + chatId +
                    ", date=" + date +
                    ", bytes=" + bytes +
                    '}';

        }
    }


    public static class InputDocumentEmpty extends ApiScheme.InputDocument {
        public static final int ID = 0x72f0eaae;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputDocumentEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputDocumentEmpty{" +
                    '}';

        }
    }


    public static class InputDocument2 extends ApiScheme.InputDocument {
        public static final int ID = 0x1abfb575;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputDocument";
        public long id;
        public long accessHash;
        public byte[] fileReference;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputDocument{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    '}';

        }
    }


    public static class DocumentEmpty extends ApiScheme.Document {
        public static final int ID = 0x36f8c871;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "DocumentEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class Document2 extends ApiScheme.Document {
        public static final int ID = 0x8fd4c4d8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "document";
        public int flags;
        public long id;
        public long accessHash;
        public byte[] fileReference;
        public int date;
        public String mimeType;
        public long size;
        public TLVector<ApiScheme.PhotoSize> thumbs = null;
        public TLVector<ApiScheme.VideoSize> videoThumbs = null;
        public int dcId;
        public TLVector<ApiScheme.DocumentAttribute> attributes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = thumbs != null ? (flags | 1) : (flags & ~1);
            flags = videoThumbs != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLBytes(fileReference);
            outputStream.writeInt(date);
            outputStream.writeTLString(mimeType);
            outputStream.writeLong(size);
            if ((flags & 1) != 0 && thumbs != null) {
                thumbs.write(outputStream);
            }

            if ((flags & 2) != 0 && videoThumbs != null) {
                videoThumbs.write(outputStream);
            }

            outputStream.writeInt(dcId);
            attributes.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            fileReference = inputStream.readTLBytes();
            date = inputStream.readInt();
            mimeType = inputStream.readTLString();
            size = inputStream.readLong();
            if ((flags & 1) != 0) {
                thumbs = new TLVector<ApiScheme.PhotoSize>(ApiScheme.PhotoSize.class);
                thumbs.read(inputStream);
            }

            if ((flags & 2) != 0) {
                videoThumbs = new TLVector<ApiScheme.VideoSize>(ApiScheme.VideoSize.class);
                videoThumbs.read(inputStream);
            }

            dcId = inputStream.readInt();
            attributes = new TLVector<ApiScheme.DocumentAttribute>(ApiScheme.DocumentAttribute.class);
            attributes.read(inputStream);


        }

        @Override
        public String toString() {
            return "Document{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", fileReference=" + fileReference +
                    ", date=" + date +
                    ", mimeType=" + mimeType +
                    ", size=" + size +
                    ", thumbs=" + thumbs +
                    ", videoThumbs=" + videoThumbs +
                    ", dcId=" + dcId +
                    ", attributes=" + attributes +
                    '}';

        }
    }


    public static class NotifyPeer2 extends ApiScheme.NotifyPeer {
        public static final int ID = 0x9fd40bd8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notifyPeer";
        public ApiScheme.Peer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "NotifyPeer{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class NotifyUsers extends ApiScheme.NotifyPeer {
        public static final int ID = 0xb4c83b4c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notifyUsers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "NotifyUsers{" +
                    '}';

        }
    }


    public static class NotifyChats extends ApiScheme.NotifyPeer {
        public static final int ID = 0xc007cec3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notifyChats";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "NotifyChats{" +
                    '}';

        }
    }


    public static class NotifyBroadcasts extends ApiScheme.NotifyPeer {
        public static final int ID = 0xd612e8ef;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notifyBroadcasts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "NotifyBroadcasts{" +
                    '}';

        }
    }


    public static class SendMessageTypingAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x16bf744e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageTypingAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageTypingAction{" +
                    '}';

        }
    }


    public static class SendMessageCancelAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xfd5ec8f5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageCancelAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageCancelAction{" +
                    '}';

        }
    }


    public static class SendMessageRecordVideoAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xa187d66f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageRecordVideoAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageRecordVideoAction{" +
                    '}';

        }
    }


    public static class SendMessageUploadVideoAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xe9763aec;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageUploadVideoAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageUploadVideoAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SendMessageRecordAudioAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xd52f73f7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageRecordAudioAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageRecordAudioAction{" +
                    '}';

        }
    }


    public static class SendMessageUploadAudioAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xf351d7ab;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageUploadAudioAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageUploadAudioAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SendMessageUploadPhotoAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xd1d34a26;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageUploadPhotoAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageUploadPhotoAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SendMessageUploadDocumentAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xaa0cd9e4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageUploadDocumentAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageUploadDocumentAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SendMessageGeoLocationAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x176f8ba1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageGeoLocationAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageGeoLocationAction{" +
                    '}';

        }
    }


    public static class SendMessageChooseContactAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x628cbc6f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageChooseContactAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageChooseContactAction{" +
                    '}';

        }
    }


    public static class SendMessageGamePlayAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xdd6a8f48;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageGamePlayAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageGamePlayAction{" +
                    '}';

        }
    }


    public static class SendMessageRecordRoundAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x88f27fbc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageRecordRoundAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageRecordRoundAction{" +
                    '}';

        }
    }


    public static class SendMessageUploadRoundAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x243e1c66;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageUploadRoundAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageUploadRoundAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SpeakingInGroupCallAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xd92c2285;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "speakingInGroupCallAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SpeakingInGroupCallAction{" +
                    '}';

        }
    }


    public static class SendMessageHistoryImportAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xdbda9246;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageHistoryImportAction";
        public int progress;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(progress);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            progress = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SendMessageHistoryImportAction{" +
                    "progress=" + progress +
                    '}';

        }
    }


    public static class SendMessageChooseStickerAction extends ApiScheme.SendMessageAction {
        public static final int ID = 0xb05ac6b1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageChooseStickerAction";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SendMessageChooseStickerAction{" +
                    '}';

        }
    }


    public static class SendMessageEmojiInteraction extends ApiScheme.SendMessageAction {
        public static final int ID = 0x25972bcb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageEmojiInteraction";
        public String emoticon;
        public int msgId;
        public ApiScheme.DataJSON interaction;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);
            outputStream.writeInt(msgId);
            interaction.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();
            msgId = inputStream.readInt();
            interaction = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "SendMessageEmojiInteraction{" +
                    "emoticon=" + emoticon +
                    ", msgId=" + msgId +
                    ", interaction=" + interaction +
                    '}';

        }
    }


    public static class SendMessageEmojiInteractionSeen extends ApiScheme.SendMessageAction {
        public static final int ID = 0xb665902e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sendMessageEmojiInteractionSeen";
        public String emoticon;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SendMessageEmojiInteractionSeen{" +
                    "emoticon=" + emoticon +
                    '}';

        }
    }


    public static class InputPrivacyKeyStatusTimestamp extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0x4f96cb18;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyStatusTimestamp";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyStatusTimestamp{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyChatInvite extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xbdfb0426;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyChatInvite";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyChatInvite{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyPhoneCall extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xfabadc5f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyPhoneCall";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyPhoneCall{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyPhoneP2P extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xdb9e70d2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyPhoneP2P";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyPhoneP2P{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyForwards extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xa4dd4c08;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyForwards";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyForwards{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyProfilePhoto extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0x5719bacc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyProfilePhoto";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyProfilePhoto{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyPhoneNumber extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0x352dafa;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyPhoneNumber";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyPhoneNumber{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyAddedByPhone extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xd1219bdd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyAddedByPhone";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyAddedByPhone{" +
                    '}';

        }
    }


    public static class InputPrivacyKeyVoiceMessages extends ApiScheme.InputPrivacyKey {
        public static final int ID = 0xaee69d68;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyKeyVoiceMessages";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyKeyVoiceMessages{" +
                    '}';

        }
    }


    public static class PrivacyKeyStatusTimestamp extends ApiScheme.PrivacyKey {
        public static final int ID = 0xbc2eab30;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyStatusTimestamp";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyStatusTimestamp{" +
                    '}';

        }
    }


    public static class PrivacyKeyChatInvite extends ApiScheme.PrivacyKey {
        public static final int ID = 0x500e6dfa;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyChatInvite";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyChatInvite{" +
                    '}';

        }
    }


    public static class PrivacyKeyPhoneCall extends ApiScheme.PrivacyKey {
        public static final int ID = 0x3d662b7b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyPhoneCall";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyPhoneCall{" +
                    '}';

        }
    }


    public static class PrivacyKeyPhoneP2P extends ApiScheme.PrivacyKey {
        public static final int ID = 0x39491cc8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyPhoneP2P";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyPhoneP2P{" +
                    '}';

        }
    }


    public static class PrivacyKeyForwards extends ApiScheme.PrivacyKey {
        public static final int ID = 0x69ec56a3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyForwards";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyForwards{" +
                    '}';

        }
    }


    public static class PrivacyKeyProfilePhoto extends ApiScheme.PrivacyKey {
        public static final int ID = 0x96151fed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyProfilePhoto";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyProfilePhoto{" +
                    '}';

        }
    }


    public static class PrivacyKeyPhoneNumber extends ApiScheme.PrivacyKey {
        public static final int ID = 0xd19ae46d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyPhoneNumber";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyPhoneNumber{" +
                    '}';

        }
    }


    public static class PrivacyKeyAddedByPhone extends ApiScheme.PrivacyKey {
        public static final int ID = 0x42ffd42b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyAddedByPhone";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyAddedByPhone{" +
                    '}';

        }
    }


    public static class PrivacyKeyVoiceMessages extends ApiScheme.PrivacyKey {
        public static final int ID = 0x697f414;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyKeyVoiceMessages";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyKeyVoiceMessages{" +
                    '}';

        }
    }


    public static class InputPrivacyValueAllowContacts extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0xd09e07b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueAllowContacts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyValueAllowContacts{" +
                    '}';

        }
    }


    public static class InputPrivacyValueAllowAll extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0x184b35ce;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueAllowAll";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyValueAllowAll{" +
                    '}';

        }
    }


    public static class InputPrivacyValueAllowUsers extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0x131cc67f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueAllowUsers";
        public TLVector<ApiScheme.InputUser> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            users = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "InputPrivacyValueAllowUsers{" +
                    "users=" + users +
                    '}';

        }
    }


    public static class InputPrivacyValueDisallowContacts extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0xba52007;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueDisallowContacts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyValueDisallowContacts{" +
                    '}';

        }
    }


    public static class InputPrivacyValueDisallowAll extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0xd66b66c9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueDisallowAll";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputPrivacyValueDisallowAll{" +
                    '}';

        }
    }


    public static class InputPrivacyValueDisallowUsers extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0x90110467;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueDisallowUsers";
        public TLVector<ApiScheme.InputUser> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            users = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "InputPrivacyValueDisallowUsers{" +
                    "users=" + users +
                    '}';

        }
    }


    public static class InputPrivacyValueAllowChatParticipants extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0x840649cf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueAllowChatParticipants";
        public TLVector<TLLong> chats;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chats.isBareTypeItem = true;
            chats.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chats = new TLVector<TLLong>(TLLong.class);
            chats.isBareTypeItem = true;
            chats.read(inputStream);


        }

        @Override
        public String toString() {
            return "InputPrivacyValueAllowChatParticipants{" +
                    "chats=" + chats +
                    '}';

        }
    }


    public static class InputPrivacyValueDisallowChatParticipants extends ApiScheme.InputPrivacyRule {
        public static final int ID = 0xe94f0f86;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPrivacyValueDisallowChatParticipants";
        public TLVector<TLLong> chats;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chats.isBareTypeItem = true;
            chats.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chats = new TLVector<TLLong>(TLLong.class);
            chats.isBareTypeItem = true;
            chats.read(inputStream);


        }

        @Override
        public String toString() {
            return "InputPrivacyValueDisallowChatParticipants{" +
                    "chats=" + chats +
                    '}';

        }
    }


    public static class PrivacyValueAllowContacts extends ApiScheme.PrivacyRule {
        public static final int ID = 0xfffe1bac;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueAllowContacts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyValueAllowContacts{" +
                    '}';

        }
    }


    public static class PrivacyValueAllowAll extends ApiScheme.PrivacyRule {
        public static final int ID = 0x65427b82;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueAllowAll";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyValueAllowAll{" +
                    '}';

        }
    }


    public static class PrivacyValueAllowUsers extends ApiScheme.PrivacyRule {
        public static final int ID = 0xb8905fb2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueAllowUsers";
        public TLVector<TLLong> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            users.isBareTypeItem = true;
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            users = new TLVector<TLLong>(TLLong.class);
            users.isBareTypeItem = true;
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "PrivacyValueAllowUsers{" +
                    "users=" + users +
                    '}';

        }
    }


    public static class PrivacyValueDisallowContacts extends ApiScheme.PrivacyRule {
        public static final int ID = 0xf888fa1a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueDisallowContacts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyValueDisallowContacts{" +
                    '}';

        }
    }


    public static class PrivacyValueDisallowAll extends ApiScheme.PrivacyRule {
        public static final int ID = 0x8b73e763;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueDisallowAll";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PrivacyValueDisallowAll{" +
                    '}';

        }
    }


    public static class PrivacyValueDisallowUsers extends ApiScheme.PrivacyRule {
        public static final int ID = 0xe4621141;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueDisallowUsers";
        public TLVector<TLLong> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            users.isBareTypeItem = true;
            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            users = new TLVector<TLLong>(TLLong.class);
            users.isBareTypeItem = true;
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "PrivacyValueDisallowUsers{" +
                    "users=" + users +
                    '}';

        }
    }


    public static class PrivacyValueAllowChatParticipants extends ApiScheme.PrivacyRule {
        public static final int ID = 0x6b134e8e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueAllowChatParticipants";
        public TLVector<TLLong> chats;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chats.isBareTypeItem = true;
            chats.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chats = new TLVector<TLLong>(TLLong.class);
            chats.isBareTypeItem = true;
            chats.read(inputStream);


        }

        @Override
        public String toString() {
            return "PrivacyValueAllowChatParticipants{" +
                    "chats=" + chats +
                    '}';

        }
    }


    public static class PrivacyValueDisallowChatParticipants extends ApiScheme.PrivacyRule {
        public static final int ID = 0x41c87565;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "privacyValueDisallowChatParticipants";
        public TLVector<TLLong> chats;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chats.isBareTypeItem = true;
            chats.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chats = new TLVector<TLLong>(TLLong.class);
            chats.isBareTypeItem = true;
            chats.read(inputStream);


        }

        @Override
        public String toString() {
            return "PrivacyValueDisallowChatParticipants{" +
                    "chats=" + chats +
                    '}';

        }
    }


    public static class AccountDaysTTL2 extends ApiScheme.AccountDaysTTL {
        public static final int ID = 0xb8d0afdf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "accountDaysTTL";
        public int days;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(days);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            days = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "AccountDaysTTL{" +
                    "days=" + days +
                    '}';

        }
    }


    public static class DocumentAttributeImageSize extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x6c37c15c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeImageSize";
        public int w;
        public int h;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(w);
            outputStream.writeInt(h);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            w = inputStream.readInt();
            h = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "DocumentAttributeImageSize{" +
                    "w=" + w +
                    ", h=" + h +
                    '}';

        }
    }


    public static class DocumentAttributeAnimated extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x11b58939;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeAnimated";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "DocumentAttributeAnimated{" +
                    '}';

        }
    }


    public static class DocumentAttributeSticker extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x6319d612;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeSticker";
        public int flags;
        public True mask = null;
        public String alt;
        public ApiScheme.InputStickerSet stickerset;
        public ApiScheme.MaskCoords maskCoords = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = mask != null ? (flags | 2) : (flags & ~2);
            flags = maskCoords != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && mask != null) {
                mask.isBareType = true;
                mask.write(outputStream);
            }

            outputStream.writeTLString(alt);
            stickerset.write(outputStream);

            if ((flags & 1) != 0 && maskCoords != null) {
                maskCoords.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                mask = new True();
                mask.isBareType = true;
                mask.read(inputStream);
            }

            alt = inputStream.readTLString();
            stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
            if ((flags & 1) != 0) {
                maskCoords = ApiScheme.MaskCoords.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "DocumentAttributeSticker{" +
                    "flags=" + flags +
                    ", mask=" + mask +
                    ", alt=" + alt +
                    ", stickerset=" + stickerset +
                    ", maskCoords=" + maskCoords +
                    '}';

        }
    }


    public static class DocumentAttributeVideo extends ApiScheme.DocumentAttribute {
        public static final int ID = 0xef02ce6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeVideo";
        public int flags;
        public True roundMessage = null;
        public True supportsStreaming = null;
        public int duration;
        public int w;
        public int h;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = roundMessage != null ? (flags | 1) : (flags & ~1);
            flags = supportsStreaming != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && roundMessage != null) {
                roundMessage.isBareType = true;
                roundMessage.write(outputStream);
            }

            if ((flags & 2) != 0 && supportsStreaming != null) {
                supportsStreaming.isBareType = true;
                supportsStreaming.write(outputStream);
            }

            outputStream.writeInt(duration);
            outputStream.writeInt(w);
            outputStream.writeInt(h);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                roundMessage = new True();
                roundMessage.isBareType = true;
                roundMessage.read(inputStream);
            }

            if ((flags & 2) != 0) {
                supportsStreaming = new True();
                supportsStreaming.isBareType = true;
                supportsStreaming.read(inputStream);
            }

            duration = inputStream.readInt();
            w = inputStream.readInt();
            h = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "DocumentAttributeVideo{" +
                    "flags=" + flags +
                    ", roundMessage=" + roundMessage +
                    ", supportsStreaming=" + supportsStreaming +
                    ", duration=" + duration +
                    ", w=" + w +
                    ", h=" + h +
                    '}';

        }
    }


    public static class DocumentAttributeAudio extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x9852f9c6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeAudio";
        public int flags;
        public True voice = null;
        public int duration;
        public String title = null;
        public String performer = null;
        public byte[] waveform = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = voice != null ? (flags | 1024) : (flags & ~1024);
            flags = title != null ? (flags | 1) : (flags & ~1);
            flags = performer != null ? (flags | 2) : (flags & ~2);
            flags = waveform != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1024) != 0 && voice != null) {
                voice.isBareType = true;
                voice.write(outputStream);
            }

            outputStream.writeInt(duration);
            if ((flags & 1) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 2) != 0 && performer != null) {
                outputStream.writeTLString(performer);
            }

            if ((flags & 4) != 0 && waveform != null) {
                outputStream.writeTLBytes(waveform);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1024) != 0) {
                voice = new True();
                voice.isBareType = true;
                voice.read(inputStream);
            }

            duration = inputStream.readInt();
            if ((flags & 1) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                performer = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                waveform = inputStream.readTLBytes();
            }


        }

        @Override
        public String toString() {
            return "DocumentAttributeAudio{" +
                    "flags=" + flags +
                    ", voice=" + voice +
                    ", duration=" + duration +
                    ", title=" + title +
                    ", performer=" + performer +
                    ", waveform=" + waveform +
                    '}';

        }
    }


    public static class DocumentAttributeFilename extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x15590068;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeFilename";
        public String fileName;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(fileName);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            fileName = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "DocumentAttributeFilename{" +
                    "fileName=" + fileName +
                    '}';

        }
    }


    public static class DocumentAttributeHasStickers extends ApiScheme.DocumentAttribute {
        public static final int ID = 0x9801d2f7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeHasStickers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "DocumentAttributeHasStickers{" +
                    '}';

        }
    }


    public static class DocumentAttributeCustomEmoji extends ApiScheme.DocumentAttribute {
        public static final int ID = 0xfd149899;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "documentAttributeCustomEmoji";
        public int flags;
        public True free = null;
        public String alt;
        public ApiScheme.InputStickerSet stickerset;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = free != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && free != null) {
                free.isBareType = true;
                free.write(outputStream);
            }

            outputStream.writeTLString(alt);
            stickerset.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                free = new True();
                free.isBareType = true;
                free.read(inputStream);
            }

            alt = inputStream.readTLString();
            stickerset = ApiScheme.InputStickerSet.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "DocumentAttributeCustomEmoji{" +
                    "flags=" + flags +
                    ", free=" + free +
                    ", alt=" + alt +
                    ", stickerset=" + stickerset +
                    '}';

        }
    }


    public static class StickerPack2 extends ApiScheme.StickerPack {
        public static final int ID = 0x12b299d4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "stickerPack";
        public String emoticon;
        public TLVector<TLLong> documents;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);
            documents.isBareTypeItem = true;
            documents.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();
            documents = new TLVector<TLLong>(TLLong.class);
            documents.isBareTypeItem = true;
            documents.read(inputStream);


        }

        @Override
        public String toString() {
            return "StickerPack{" +
                    "emoticon=" + emoticon +
                    ", documents=" + documents +
                    '}';

        }
    }


    public static class WebPageEmpty extends ApiScheme.WebPage {
        public static final int ID = 0xeb1477e8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webPageEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "WebPageEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class WebPagePending extends ApiScheme.WebPage {
        public static final int ID = 0xc586da1c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webPagePending";
        public long id;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "WebPagePending{" +
                    "id=" + id +
                    ", date=" + date +
                    '}';

        }
    }


    public static class WebPage2 extends ApiScheme.WebPage {
        public static final int ID = 0xe89c45b2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webPage";
        public int flags;
        public long id;
        public String url;
        public String displayUrl;
        public int hash;
        public String type = null;
        public String siteName = null;
        public String title = null;
        public String description = null;
        public ApiScheme.Photo photo = null;
        public String embedUrl = null;
        public String embedType = null;
        public Integer embedWidth = null;
        public Integer embedHeight = null;
        public Integer duration = null;
        public String author = null;
        public ApiScheme.Document document = null;
        public ApiScheme.Page cachedPage = null;
        public TLVector<ApiScheme.WebPageAttribute> attributes = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = type != null ? (flags | 1) : (flags & ~1);
            flags = siteName != null ? (flags | 2) : (flags & ~2);
            flags = title != null ? (flags | 4) : (flags & ~4);
            flags = description != null ? (flags | 8) : (flags & ~8);
            flags = photo != null ? (flags | 16) : (flags & ~16);
            flags = embedUrl != null ? (flags | 32) : (flags & ~32);
            flags = embedType != null ? (flags | 32) : (flags & ~32);
            flags = embedWidth != null ? (flags | 64) : (flags & ~64);
            flags = embedHeight != null ? (flags | 64) : (flags & ~64);
            flags = duration != null ? (flags | 128) : (flags & ~128);
            flags = author != null ? (flags | 256) : (flags & ~256);
            flags = document != null ? (flags | 512) : (flags & ~512);
            flags = cachedPage != null ? (flags | 1024) : (flags & ~1024);
            flags = attributes != null ? (flags | 4096) : (flags & ~4096);
            outputStream.writeInt(flags);
            outputStream.writeLong(id);
            outputStream.writeTLString(url);
            outputStream.writeTLString(displayUrl);
            outputStream.writeInt(hash);
            if ((flags & 1) != 0 && type != null) {
                outputStream.writeTLString(type);
            }

            if ((flags & 2) != 0 && siteName != null) {
                outputStream.writeTLString(siteName);
            }

            if ((flags & 4) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 8) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            if ((flags & 16) != 0 && photo != null) {
                photo.write(outputStream);
            }

            if ((flags & 32) != 0 && embedUrl != null) {
                outputStream.writeTLString(embedUrl);
            }

            if ((flags & 32) != 0 && embedType != null) {
                outputStream.writeTLString(embedType);
            }

            if ((flags & 64) != 0 && embedWidth != null) {
                outputStream.writeInt(embedWidth);
            }

            if ((flags & 64) != 0 && embedHeight != null) {
                outputStream.writeInt(embedHeight);
            }

            if ((flags & 128) != 0 && duration != null) {
                outputStream.writeInt(duration);
            }

            if ((flags & 256) != 0 && author != null) {
                outputStream.writeTLString(author);
            }

            if ((flags & 512) != 0 && document != null) {
                document.write(outputStream);
            }

            if ((flags & 1024) != 0 && cachedPage != null) {
                cachedPage.write(outputStream);
            }

            if ((flags & 4096) != 0 && attributes != null) {
                attributes.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readLong();
            url = inputStream.readTLString();
            displayUrl = inputStream.readTLString();
            hash = inputStream.readInt();
            if ((flags & 1) != 0) {
                type = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                siteName = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                description = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                photo = ApiScheme.Photo.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                embedUrl = inputStream.readTLString();
            }

            if ((flags & 32) != 0) {
                embedType = inputStream.readTLString();
            }

            if ((flags & 64) != 0) {
                embedWidth = inputStream.readInt();
            }

            if ((flags & 64) != 0) {
                embedHeight = inputStream.readInt();
            }

            if ((flags & 128) != 0) {
                duration = inputStream.readInt();
            }

            if ((flags & 256) != 0) {
                author = inputStream.readTLString();
            }

            if ((flags & 512) != 0) {
                document = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 1024) != 0) {
                cachedPage = ApiScheme.Page.readObject(inputStream);
            }

            if ((flags & 4096) != 0) {
                attributes = new TLVector<ApiScheme.WebPageAttribute>(ApiScheme.WebPageAttribute.class);
                attributes.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "WebPage{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", url=" + url +
                    ", displayUrl=" + displayUrl +
                    ", hash=" + hash +
                    ", type=" + type +
                    ", siteName=" + siteName +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", embedUrl=" + embedUrl +
                    ", embedType=" + embedType +
                    ", embedWidth=" + embedWidth +
                    ", embedHeight=" + embedHeight +
                    ", duration=" + duration +
                    ", author=" + author +
                    ", document=" + document +
                    ", cachedPage=" + cachedPage +
                    ", attributes=" + attributes +
                    '}';

        }
    }


    public static class WebPageNotModified extends ApiScheme.WebPage {
        public static final int ID = 0x7311ca11;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webPageNotModified";
        public int flags;
        public Integer cachedPageViews = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = cachedPageViews != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && cachedPageViews != null) {
                outputStream.writeInt(cachedPageViews);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                cachedPageViews = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "WebPageNotModified{" +
                    "flags=" + flags +
                    ", cachedPageViews=" + cachedPageViews +
                    '}';

        }
    }


    public static class Authorization2 extends ApiScheme.Authorization {
        public static final int ID = 0xad01d61d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "authorization";
        public int flags;
        public True current = null;
        public True officialApp = null;
        public True passwordPending = null;
        public True encryptedRequestsDisabled = null;
        public True callRequestsDisabled = null;
        public long hash;
        public String deviceModel;
        public String platform;
        public String systemVersion;
        public int apiId;
        public String appName;
        public String appVersion;
        public int dateCreated;
        public int dateActive;
        public String ip;
        public String country;
        public String region;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = current != null ? (flags | 1) : (flags & ~1);
            flags = officialApp != null ? (flags | 2) : (flags & ~2);
            flags = passwordPending != null ? (flags | 4) : (flags & ~4);
            flags = encryptedRequestsDisabled != null ? (flags | 8) : (flags & ~8);
            flags = callRequestsDisabled != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && current != null) {
                current.isBareType = true;
                current.write(outputStream);
            }

            if ((flags & 2) != 0 && officialApp != null) {
                officialApp.isBareType = true;
                officialApp.write(outputStream);
            }

            if ((flags & 4) != 0 && passwordPending != null) {
                passwordPending.isBareType = true;
                passwordPending.write(outputStream);
            }

            if ((flags & 8) != 0 && encryptedRequestsDisabled != null) {
                encryptedRequestsDisabled.isBareType = true;
                encryptedRequestsDisabled.write(outputStream);
            }

            if ((flags & 16) != 0 && callRequestsDisabled != null) {
                callRequestsDisabled.isBareType = true;
                callRequestsDisabled.write(outputStream);
            }

            outputStream.writeLong(hash);
            outputStream.writeTLString(deviceModel);
            outputStream.writeTLString(platform);
            outputStream.writeTLString(systemVersion);
            outputStream.writeInt(apiId);
            outputStream.writeTLString(appName);
            outputStream.writeTLString(appVersion);
            outputStream.writeInt(dateCreated);
            outputStream.writeInt(dateActive);
            outputStream.writeTLString(ip);
            outputStream.writeTLString(country);
            outputStream.writeTLString(region);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                current = new True();
                current.isBareType = true;
                current.read(inputStream);
            }

            if ((flags & 2) != 0) {
                officialApp = new True();
                officialApp.isBareType = true;
                officialApp.read(inputStream);
            }

            if ((flags & 4) != 0) {
                passwordPending = new True();
                passwordPending.isBareType = true;
                passwordPending.read(inputStream);
            }

            if ((flags & 8) != 0) {
                encryptedRequestsDisabled = new True();
                encryptedRequestsDisabled.isBareType = true;
                encryptedRequestsDisabled.read(inputStream);
            }

            if ((flags & 16) != 0) {
                callRequestsDisabled = new True();
                callRequestsDisabled.isBareType = true;
                callRequestsDisabled.read(inputStream);
            }

            hash = inputStream.readLong();
            deviceModel = inputStream.readTLString();
            platform = inputStream.readTLString();
            systemVersion = inputStream.readTLString();
            apiId = inputStream.readInt();
            appName = inputStream.readTLString();
            appVersion = inputStream.readTLString();
            dateCreated = inputStream.readInt();
            dateActive = inputStream.readInt();
            ip = inputStream.readTLString();
            country = inputStream.readTLString();
            region = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "Authorization{" +
                    "flags=" + flags +
                    ", current=" + current +
                    ", officialApp=" + officialApp +
                    ", passwordPending=" + passwordPending +
                    ", encryptedRequestsDisabled=" + encryptedRequestsDisabled +
                    ", callRequestsDisabled=" + callRequestsDisabled +
                    ", hash=" + hash +
                    ", deviceModel=" + deviceModel +
                    ", platform=" + platform +
                    ", systemVersion=" + systemVersion +
                    ", apiId=" + apiId +
                    ", appName=" + appName +
                    ", appVersion=" + appVersion +
                    ", dateCreated=" + dateCreated +
                    ", dateActive=" + dateActive +
                    ", ip=" + ip +
                    ", country=" + country +
                    ", region=" + region +
                    '}';

        }
    }


    public static class ReceivedNotifyMessage2 extends ApiScheme.ReceivedNotifyMessage {
        public static final int ID = 0xa384b779;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "receivedNotifyMessage";
        public int id;
        public int flags;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);
            outputStream.writeInt(flags);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();
            flags = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ReceivedNotifyMessage{" +
                    "id=" + id +
                    ", flags=" + flags +
                    '}';

        }
    }


    public static class ChatInviteExported extends ApiScheme.ExportedChatInvite {
        public static final int ID = 0xab4a819;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInviteExported";
        public int flags;
        public True revoked = null;
        public True permanent = null;
        public True requestNeeded = null;
        public String link;
        public long adminId;
        public int date;
        public Integer startDate = null;
        public Integer expireDate = null;
        public Integer usageLimit = null;
        public Integer usage = null;
        public Integer requested = null;
        public String title = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = revoked != null ? (flags | 1) : (flags & ~1);
            flags = permanent != null ? (flags | 32) : (flags & ~32);
            flags = requestNeeded != null ? (flags | 64) : (flags & ~64);
            flags = startDate != null ? (flags | 16) : (flags & ~16);
            flags = expireDate != null ? (flags | 2) : (flags & ~2);
            flags = usageLimit != null ? (flags | 4) : (flags & ~4);
            flags = usage != null ? (flags | 8) : (flags & ~8);
            flags = requested != null ? (flags | 128) : (flags & ~128);
            flags = title != null ? (flags | 256) : (flags & ~256);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && revoked != null) {
                revoked.isBareType = true;
                revoked.write(outputStream);
            }

            if ((flags & 32) != 0 && permanent != null) {
                permanent.isBareType = true;
                permanent.write(outputStream);
            }

            if ((flags & 64) != 0 && requestNeeded != null) {
                requestNeeded.isBareType = true;
                requestNeeded.write(outputStream);
            }

            outputStream.writeTLString(link);
            outputStream.writeLong(adminId);
            outputStream.writeInt(date);
            if ((flags & 16) != 0 && startDate != null) {
                outputStream.writeInt(startDate);
            }

            if ((flags & 2) != 0 && expireDate != null) {
                outputStream.writeInt(expireDate);
            }

            if ((flags & 4) != 0 && usageLimit != null) {
                outputStream.writeInt(usageLimit);
            }

            if ((flags & 8) != 0 && usage != null) {
                outputStream.writeInt(usage);
            }

            if ((flags & 128) != 0 && requested != null) {
                outputStream.writeInt(requested);
            }

            if ((flags & 256) != 0 && title != null) {
                outputStream.writeTLString(title);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                revoked = new True();
                revoked.isBareType = true;
                revoked.read(inputStream);
            }

            if ((flags & 32) != 0) {
                permanent = new True();
                permanent.isBareType = true;
                permanent.read(inputStream);
            }

            if ((flags & 64) != 0) {
                requestNeeded = new True();
                requestNeeded.isBareType = true;
                requestNeeded.read(inputStream);
            }

            link = inputStream.readTLString();
            adminId = inputStream.readLong();
            date = inputStream.readInt();
            if ((flags & 16) != 0) {
                startDate = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                expireDate = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                usageLimit = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                usage = inputStream.readInt();
            }

            if ((flags & 128) != 0) {
                requested = inputStream.readInt();
            }

            if ((flags & 256) != 0) {
                title = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "ChatInviteExported{" +
                    "flags=" + flags +
                    ", revoked=" + revoked +
                    ", permanent=" + permanent +
                    ", requestNeeded=" + requestNeeded +
                    ", link=" + link +
                    ", adminId=" + adminId +
                    ", date=" + date +
                    ", startDate=" + startDate +
                    ", expireDate=" + expireDate +
                    ", usageLimit=" + usageLimit +
                    ", usage=" + usage +
                    ", requested=" + requested +
                    ", title=" + title +
                    '}';

        }
    }


    public static class ChatInvitePublicJoinRequests extends ApiScheme.ExportedChatInvite {
        public static final int ID = 0xed107ab7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInvitePublicJoinRequests";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChatInvitePublicJoinRequests{" +
                    '}';

        }
    }


    public static class ChatInviteAlready extends ApiScheme.ChatInvite {
        public static final int ID = 0x5a686d7c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInviteAlready";
        public ApiScheme.Chat chat;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chat.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chat = ApiScheme.Chat.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChatInviteAlready{" +
                    "chat=" + chat +
                    '}';

        }
    }


    public static class ChatInvite2 extends ApiScheme.ChatInvite {
        public static final int ID = 0x300c44c1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInvite";
        public int flags;
        public True channel = null;
        public True broadcast = null;
        public True mPublic = null;
        public True megagroup = null;
        public True requestNeeded = null;
        public String title;
        public String about = null;
        public ApiScheme.Photo photo;
        public int participantsCount;
        public TLVector<ApiScheme.User> participants = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = channel != null ? (flags | 1) : (flags & ~1);
            flags = broadcast != null ? (flags | 2) : (flags & ~2);
            flags = mPublic != null ? (flags | 4) : (flags & ~4);
            flags = megagroup != null ? (flags | 8) : (flags & ~8);
            flags = requestNeeded != null ? (flags | 64) : (flags & ~64);
            flags = about != null ? (flags | 32) : (flags & ~32);
            flags = participants != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && channel != null) {
                channel.isBareType = true;
                channel.write(outputStream);
            }

            if ((flags & 2) != 0 && broadcast != null) {
                broadcast.isBareType = true;
                broadcast.write(outputStream);
            }

            if ((flags & 4) != 0 && mPublic != null) {
                mPublic.isBareType = true;
                mPublic.write(outputStream);
            }

            if ((flags & 8) != 0 && megagroup != null) {
                megagroup.isBareType = true;
                megagroup.write(outputStream);
            }

            if ((flags & 64) != 0 && requestNeeded != null) {
                requestNeeded.isBareType = true;
                requestNeeded.write(outputStream);
            }

            outputStream.writeTLString(title);
            if ((flags & 32) != 0 && about != null) {
                outputStream.writeTLString(about);
            }

            photo.write(outputStream);

            outputStream.writeInt(participantsCount);
            if ((flags & 16) != 0 && participants != null) {
                participants.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                channel = new True();
                channel.isBareType = true;
                channel.read(inputStream);
            }

            if ((flags & 2) != 0) {
                broadcast = new True();
                broadcast.isBareType = true;
                broadcast.read(inputStream);
            }

            if ((flags & 4) != 0) {
                mPublic = new True();
                mPublic.isBareType = true;
                mPublic.read(inputStream);
            }

            if ((flags & 8) != 0) {
                megagroup = new True();
                megagroup.isBareType = true;
                megagroup.read(inputStream);
            }

            if ((flags & 64) != 0) {
                requestNeeded = new True();
                requestNeeded.isBareType = true;
                requestNeeded.read(inputStream);
            }

            title = inputStream.readTLString();
            if ((flags & 32) != 0) {
                about = inputStream.readTLString();
            }

            photo = ApiScheme.Photo.readObject(inputStream);
            participantsCount = inputStream.readInt();
            if ((flags & 16) != 0) {
                participants = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                participants.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChatInvite{" +
                    "flags=" + flags +
                    ", channel=" + channel +
                    ", broadcast=" + broadcast +
                    ", mPublic=" + mPublic +
                    ", megagroup=" + megagroup +
                    ", requestNeeded=" + requestNeeded +
                    ", title=" + title +
                    ", about=" + about +
                    ", photo=" + photo +
                    ", participantsCount=" + participantsCount +
                    ", participants=" + participants +
                    '}';

        }
    }


    public static class ChatInvitePeek extends ApiScheme.ChatInvite {
        public static final int ID = 0x61695cb0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInvitePeek";
        public ApiScheme.Chat chat;
        public int expires;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            chat.write(outputStream);

            outputStream.writeInt(expires);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            chat = ApiScheme.Chat.readObject(inputStream);
            expires = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatInvitePeek{" +
                    "chat=" + chat +
                    ", expires=" + expires +
                    '}';

        }
    }


    public static class InputStickerSetEmpty extends ApiScheme.InputStickerSet {
        public static final int ID = 0xffb62b95;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputStickerSetEmpty{" +
                    '}';

        }
    }


    public static class InputStickerSetID extends ApiScheme.InputStickerSet {
        public static final int ID = 0x9de7a269;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetID";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputStickerSetID{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputStickerSetShortName extends ApiScheme.InputStickerSet {
        public static final int ID = 0x861cc8a0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetShortName";
        public String shortName;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(shortName);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            shortName = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputStickerSetShortName{" +
                    "shortName=" + shortName +
                    '}';

        }
    }


    public static class InputStickerSetAnimatedEmoji extends ApiScheme.InputStickerSet {
        public static final int ID = 0x28703c8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetAnimatedEmoji";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputStickerSetAnimatedEmoji{" +
                    '}';

        }
    }


    public static class InputStickerSetDice extends ApiScheme.InputStickerSet {
        public static final int ID = 0xe67f520e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetDice";
        public String emoticon;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(emoticon);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            emoticon = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputStickerSetDice{" +
                    "emoticon=" + emoticon +
                    '}';

        }
    }


    public static class InputStickerSetAnimatedEmojiAnimations extends ApiScheme.InputStickerSet {
        public static final int ID = 0xcde3739;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetAnimatedEmojiAnimations";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputStickerSetAnimatedEmojiAnimations{" +
                    '}';

        }
    }


    public static class InputStickerSetPremiumGifts extends ApiScheme.InputStickerSet {
        public static final int ID = 0xc88b3b02;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetPremiumGifts";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputStickerSetPremiumGifts{" +
                    '}';

        }
    }


    public static class StickerSet2 extends ApiScheme.StickerSet {
        public static final int ID = 0x2dd14edc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "stickerSet";
        public int flags;
        public True archived = null;
        public True official = null;
        public True masks = null;
        public True animated = null;
        public True videos = null;
        public True emojis = null;
        public Integer installedDate = null;
        public long id;
        public long accessHash;
        public String title;
        public String shortName;
        public TLVector<ApiScheme.PhotoSize> thumbs = null;
        public Integer thumbDcId = null;
        public Integer thumbVersion = null;
        public Long thumbDocumentId = null;
        public int count;
        public int hash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = archived != null ? (flags | 2) : (flags & ~2);
            flags = official != null ? (flags | 4) : (flags & ~4);
            flags = masks != null ? (flags | 8) : (flags & ~8);
            flags = animated != null ? (flags | 32) : (flags & ~32);
            flags = videos != null ? (flags | 64) : (flags & ~64);
            flags = emojis != null ? (flags | 128) : (flags & ~128);
            flags = installedDate != null ? (flags | 1) : (flags & ~1);
            flags = thumbs != null ? (flags | 16) : (flags & ~16);
            flags = thumbDcId != null ? (flags | 16) : (flags & ~16);
            flags = thumbVersion != null ? (flags | 16) : (flags & ~16);
            flags = thumbDocumentId != null ? (flags | 256) : (flags & ~256);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && archived != null) {
                archived.isBareType = true;
                archived.write(outputStream);
            }

            if ((flags & 4) != 0 && official != null) {
                official.isBareType = true;
                official.write(outputStream);
            }

            if ((flags & 8) != 0 && masks != null) {
                masks.isBareType = true;
                masks.write(outputStream);
            }

            if ((flags & 32) != 0 && animated != null) {
                animated.isBareType = true;
                animated.write(outputStream);
            }

            if ((flags & 64) != 0 && videos != null) {
                videos.isBareType = true;
                videos.write(outputStream);
            }

            if ((flags & 128) != 0 && emojis != null) {
                emojis.isBareType = true;
                emojis.write(outputStream);
            }

            if ((flags & 1) != 0 && installedDate != null) {
                outputStream.writeInt(installedDate);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLString(title);
            outputStream.writeTLString(shortName);
            if ((flags & 16) != 0 && thumbs != null) {
                thumbs.write(outputStream);
            }

            if ((flags & 16) != 0 && thumbDcId != null) {
                outputStream.writeInt(thumbDcId);
            }

            if ((flags & 16) != 0 && thumbVersion != null) {
                outputStream.writeInt(thumbVersion);
            }

            if ((flags & 256) != 0 && thumbDocumentId != null) {
                outputStream.writeLong(thumbDocumentId);
            }

            outputStream.writeInt(count);
            outputStream.writeInt(hash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                archived = new True();
                archived.isBareType = true;
                archived.read(inputStream);
            }

            if ((flags & 4) != 0) {
                official = new True();
                official.isBareType = true;
                official.read(inputStream);
            }

            if ((flags & 8) != 0) {
                masks = new True();
                masks.isBareType = true;
                masks.read(inputStream);
            }

            if ((flags & 32) != 0) {
                animated = new True();
                animated.isBareType = true;
                animated.read(inputStream);
            }

            if ((flags & 64) != 0) {
                videos = new True();
                videos.isBareType = true;
                videos.read(inputStream);
            }

            if ((flags & 128) != 0) {
                emojis = new True();
                emojis.isBareType = true;
                emojis.read(inputStream);
            }

            if ((flags & 1) != 0) {
                installedDate = inputStream.readInt();
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            title = inputStream.readTLString();
            shortName = inputStream.readTLString();
            if ((flags & 16) != 0) {
                thumbs = new TLVector<ApiScheme.PhotoSize>(ApiScheme.PhotoSize.class);
                thumbs.read(inputStream);
            }

            if ((flags & 16) != 0) {
                thumbDcId = inputStream.readInt();
            }

            if ((flags & 16) != 0) {
                thumbVersion = inputStream.readInt();
            }

            if ((flags & 256) != 0) {
                thumbDocumentId = inputStream.readLong();
            }

            count = inputStream.readInt();
            hash = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "StickerSet{" +
                    "flags=" + flags +
                    ", archived=" + archived +
                    ", official=" + official +
                    ", masks=" + masks +
                    ", animated=" + animated +
                    ", videos=" + videos +
                    ", emojis=" + emojis +
                    ", installedDate=" + installedDate +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", title=" + title +
                    ", shortName=" + shortName +
                    ", thumbs=" + thumbs +
                    ", thumbDcId=" + thumbDcId +
                    ", thumbVersion=" + thumbVersion +
                    ", thumbDocumentId=" + thumbDocumentId +
                    ", count=" + count +
                    ", hash=" + hash +
                    '}';

        }
    }


    public static class BotCommand2 extends ApiScheme.BotCommand {
        public static final int ID = 0xc27ac8c7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommand";
        public String command;
        public String description;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(command);
            outputStream.writeTLString(description);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            command = inputStream.readTLString();
            description = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "BotCommand{" +
                    "command=" + command +
                    ", description=" + description +
                    '}';

        }
    }


    public static class BotInfo2 extends ApiScheme.BotInfo {
        public static final int ID = 0x8f300b57;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInfo";
        public int flags;
        public Long userId = null;
        public String description = null;
        public ApiScheme.Photo descriptionPhoto = null;
        public ApiScheme.Document descriptionDocument = null;
        public TLVector<ApiScheme.BotCommand> commands = null;
        public ApiScheme.BotMenuButton menuButton = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = userId != null ? (flags | 1) : (flags & ~1);
            flags = description != null ? (flags | 2) : (flags & ~2);
            flags = descriptionPhoto != null ? (flags | 16) : (flags & ~16);
            flags = descriptionDocument != null ? (flags | 32) : (flags & ~32);
            flags = commands != null ? (flags | 4) : (flags & ~4);
            flags = menuButton != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && userId != null) {
                outputStream.writeLong(userId);
            }

            if ((flags & 2) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            if ((flags & 16) != 0 && descriptionPhoto != null) {
                descriptionPhoto.write(outputStream);
            }

            if ((flags & 32) != 0 && descriptionDocument != null) {
                descriptionDocument.write(outputStream);
            }

            if ((flags & 4) != 0 && commands != null) {
                commands.write(outputStream);
            }

            if ((flags & 8) != 0 && menuButton != null) {
                menuButton.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                userId = inputStream.readLong();
            }

            if ((flags & 2) != 0) {
                description = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                descriptionPhoto = ApiScheme.Photo.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                descriptionDocument = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                commands = new TLVector<ApiScheme.BotCommand>(ApiScheme.BotCommand.class);
                commands.read(inputStream);
            }

            if ((flags & 8) != 0) {
                menuButton = ApiScheme.BotMenuButton.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInfo{" +
                    "flags=" + flags +
                    ", userId=" + userId +
                    ", description=" + description +
                    ", descriptionPhoto=" + descriptionPhoto +
                    ", descriptionDocument=" + descriptionDocument +
                    ", commands=" + commands +
                    ", menuButton=" + menuButton +
                    '}';

        }
    }


    public static class KeyboardButton2 extends ApiScheme.KeyboardButton {
        public static final int ID = 0xa2fa4880;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButton";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButton{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class KeyboardButtonUrl extends ApiScheme.KeyboardButton {
        public static final int ID = 0x258aff05;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonUrl";
        public String text;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonUrl{" +
                    "text=" + text +
                    ", url=" + url +
                    '}';

        }
    }


    public static class KeyboardButtonCallback extends ApiScheme.KeyboardButton {
        public static final int ID = 0x35bbdb6b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonCallback";
        public int flags;
        public True requiresPassword = null;
        public String text;
        public byte[] data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = requiresPassword != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && requiresPassword != null) {
                requiresPassword.isBareType = true;
                requiresPassword.write(outputStream);
            }

            outputStream.writeTLString(text);
            outputStream.writeTLBytes(data);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                requiresPassword = new True();
                requiresPassword.isBareType = true;
                requiresPassword.read(inputStream);
            }

            text = inputStream.readTLString();
            data = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "KeyboardButtonCallback{" +
                    "flags=" + flags +
                    ", requiresPassword=" + requiresPassword +
                    ", text=" + text +
                    ", data=" + data +
                    '}';

        }
    }


    public static class KeyboardButtonRequestPhone extends ApiScheme.KeyboardButton {
        public static final int ID = 0xb16a6c29;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonRequestPhone";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonRequestPhone{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class KeyboardButtonRequestGeoLocation extends ApiScheme.KeyboardButton {
        public static final int ID = 0xfc796b3f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonRequestGeoLocation";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonRequestGeoLocation{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class KeyboardButtonSwitchInline extends ApiScheme.KeyboardButton {
        public static final int ID = 0x568a748;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonSwitchInline";
        public int flags;
        public True samePeer = null;
        public String text;
        public String query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = samePeer != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && samePeer != null) {
                samePeer.isBareType = true;
                samePeer.write(outputStream);
            }

            outputStream.writeTLString(text);
            outputStream.writeTLString(query);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                samePeer = new True();
                samePeer.isBareType = true;
                samePeer.read(inputStream);
            }

            text = inputStream.readTLString();
            query = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonSwitchInline{" +
                    "flags=" + flags +
                    ", samePeer=" + samePeer +
                    ", text=" + text +
                    ", query=" + query +
                    '}';

        }
    }


    public static class KeyboardButtonGame extends ApiScheme.KeyboardButton {
        public static final int ID = 0x50f41ccf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonGame";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonGame{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class KeyboardButtonBuy extends ApiScheme.KeyboardButton {
        public static final int ID = 0xafd93fbb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonBuy";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonBuy{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class KeyboardButtonUrlAuth extends ApiScheme.KeyboardButton {
        public static final int ID = 0x10b78d29;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonUrlAuth";
        public int flags;
        public String text;
        public String fwdText = null;
        public String url;
        public int buttonId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = fwdText != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeTLString(text);
            if ((flags & 1) != 0 && fwdText != null) {
                outputStream.writeTLString(fwdText);
            }

            outputStream.writeTLString(url);
            outputStream.writeInt(buttonId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            text = inputStream.readTLString();
            if ((flags & 1) != 0) {
                fwdText = inputStream.readTLString();
            }

            url = inputStream.readTLString();
            buttonId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "KeyboardButtonUrlAuth{" +
                    "flags=" + flags +
                    ", text=" + text +
                    ", fwdText=" + fwdText +
                    ", url=" + url +
                    ", buttonId=" + buttonId +
                    '}';

        }
    }


    public static class InputKeyboardButtonUrlAuth extends ApiScheme.KeyboardButton {
        public static final int ID = 0xd02e7fd4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputKeyboardButtonUrlAuth";
        public int flags;
        public True requestWriteAccess = null;
        public String text;
        public String fwdText = null;
        public String url;
        public ApiScheme.InputUser bot;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = requestWriteAccess != null ? (flags | 1) : (flags & ~1);
            flags = fwdText != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && requestWriteAccess != null) {
                requestWriteAccess.isBareType = true;
                requestWriteAccess.write(outputStream);
            }

            outputStream.writeTLString(text);
            if ((flags & 2) != 0 && fwdText != null) {
                outputStream.writeTLString(fwdText);
            }

            outputStream.writeTLString(url);
            bot.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                requestWriteAccess = new True();
                requestWriteAccess.isBareType = true;
                requestWriteAccess.read(inputStream);
            }

            text = inputStream.readTLString();
            if ((flags & 2) != 0) {
                fwdText = inputStream.readTLString();
            }

            url = inputStream.readTLString();
            bot = ApiScheme.InputUser.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputKeyboardButtonUrlAuth{" +
                    "flags=" + flags +
                    ", requestWriteAccess=" + requestWriteAccess +
                    ", text=" + text +
                    ", fwdText=" + fwdText +
                    ", url=" + url +
                    ", bot=" + bot +
                    '}';

        }
    }


    public static class KeyboardButtonRequestPoll extends ApiScheme.KeyboardButton {
        public static final int ID = 0xbbc7515d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonRequestPoll";
        public int flags;
        public ApiScheme.Bool quiz = null;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = quiz != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && quiz != null) {
                quiz.write(outputStream);
            }

            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                quiz = ApiScheme.Bool.readObject(inputStream);
            }

            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonRequestPoll{" +
                    "flags=" + flags +
                    ", quiz=" + quiz +
                    ", text=" + text +
                    '}';

        }
    }


    public static class InputKeyboardButtonUserProfile extends ApiScheme.KeyboardButton {
        public static final int ID = 0xe988037b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputKeyboardButtonUserProfile";
        public String text;
        public ApiScheme.InputUser userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            userId.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            userId = ApiScheme.InputUser.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputKeyboardButtonUserProfile{" +
                    "text=" + text +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class KeyboardButtonUserProfile extends ApiScheme.KeyboardButton {
        public static final int ID = 0x308660c1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonUserProfile";
        public String text;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "KeyboardButtonUserProfile{" +
                    "text=" + text +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class KeyboardButtonWebView extends ApiScheme.KeyboardButton {
        public static final int ID = 0x13767230;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonWebView";
        public String text;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonWebView{" +
                    "text=" + text +
                    ", url=" + url +
                    '}';

        }
    }


    public static class KeyboardButtonSimpleWebView extends ApiScheme.KeyboardButton {
        public static final int ID = 0xa0c0505c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonSimpleWebView";
        public String text;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "KeyboardButtonSimpleWebView{" +
                    "text=" + text +
                    ", url=" + url +
                    '}';

        }
    }


    public static class KeyboardButtonRow2 extends ApiScheme.KeyboardButtonRow {
        public static final int ID = 0x77608b83;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "keyboardButtonRow";
        public TLVector<ApiScheme.KeyboardButton> buttons;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            buttons.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            buttons = new TLVector<ApiScheme.KeyboardButton>(ApiScheme.KeyboardButton.class);
            buttons.read(inputStream);


        }

        @Override
        public String toString() {
            return "KeyboardButtonRow{" +
                    "buttons=" + buttons +
                    '}';

        }
    }


    public static class ReplyKeyboardHide extends ApiScheme.ReplyMarkup {
        public static final int ID = 0xa03e5b85;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "replyKeyboardHide";
        public int flags;
        public True selective = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = selective != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && selective != null) {
                selective.isBareType = true;
                selective.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                selective = new True();
                selective.isBareType = true;
                selective.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ReplyKeyboardHide{" +
                    "flags=" + flags +
                    ", selective=" + selective +
                    '}';

        }
    }


    public static class ReplyKeyboardForceReply extends ApiScheme.ReplyMarkup {
        public static final int ID = 0x86b40b08;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "replyKeyboardForceReply";
        public int flags;
        public True singleUse = null;
        public True selective = null;
        public String placeholder = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = singleUse != null ? (flags | 2) : (flags & ~2);
            flags = selective != null ? (flags | 4) : (flags & ~4);
            flags = placeholder != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && singleUse != null) {
                singleUse.isBareType = true;
                singleUse.write(outputStream);
            }

            if ((flags & 4) != 0 && selective != null) {
                selective.isBareType = true;
                selective.write(outputStream);
            }

            if ((flags & 8) != 0 && placeholder != null) {
                outputStream.writeTLString(placeholder);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                singleUse = new True();
                singleUse.isBareType = true;
                singleUse.read(inputStream);
            }

            if ((flags & 4) != 0) {
                selective = new True();
                selective.isBareType = true;
                selective.read(inputStream);
            }

            if ((flags & 8) != 0) {
                placeholder = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "ReplyKeyboardForceReply{" +
                    "flags=" + flags +
                    ", singleUse=" + singleUse +
                    ", selective=" + selective +
                    ", placeholder=" + placeholder +
                    '}';

        }
    }


    public static class ReplyKeyboardMarkup extends ApiScheme.ReplyMarkup {
        public static final int ID = 0x85dd99d1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "replyKeyboardMarkup";
        public int flags;
        public True resize = null;
        public True singleUse = null;
        public True selective = null;
        public TLVector<ApiScheme.KeyboardButtonRow> rows;
        public String placeholder = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = resize != null ? (flags | 1) : (flags & ~1);
            flags = singleUse != null ? (flags | 2) : (flags & ~2);
            flags = selective != null ? (flags | 4) : (flags & ~4);
            flags = placeholder != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && resize != null) {
                resize.isBareType = true;
                resize.write(outputStream);
            }

            if ((flags & 2) != 0 && singleUse != null) {
                singleUse.isBareType = true;
                singleUse.write(outputStream);
            }

            if ((flags & 4) != 0 && selective != null) {
                selective.isBareType = true;
                selective.write(outputStream);
            }

            rows.write(outputStream);

            if ((flags & 8) != 0 && placeholder != null) {
                outputStream.writeTLString(placeholder);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                resize = new True();
                resize.isBareType = true;
                resize.read(inputStream);
            }

            if ((flags & 2) != 0) {
                singleUse = new True();
                singleUse.isBareType = true;
                singleUse.read(inputStream);
            }

            if ((flags & 4) != 0) {
                selective = new True();
                selective.isBareType = true;
                selective.read(inputStream);
            }

            rows = new TLVector<ApiScheme.KeyboardButtonRow>(ApiScheme.KeyboardButtonRow.class);
            rows.read(inputStream);

            if ((flags & 8) != 0) {
                placeholder = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "ReplyKeyboardMarkup{" +
                    "flags=" + flags +
                    ", resize=" + resize +
                    ", singleUse=" + singleUse +
                    ", selective=" + selective +
                    ", rows=" + rows +
                    ", placeholder=" + placeholder +
                    '}';

        }
    }


    public static class ReplyInlineMarkup extends ApiScheme.ReplyMarkup {
        public static final int ID = 0x48a30254;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "replyInlineMarkup";
        public TLVector<ApiScheme.KeyboardButtonRow> rows;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            rows.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            rows = new TLVector<ApiScheme.KeyboardButtonRow>(ApiScheme.KeyboardButtonRow.class);
            rows.read(inputStream);


        }

        @Override
        public String toString() {
            return "ReplyInlineMarkup{" +
                    "rows=" + rows +
                    '}';

        }
    }


    public static class MessageEntityUnknown extends ApiScheme.MessageEntity {
        public static final int ID = 0xbb92ba95;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityUnknown";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityUnknown{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityMention extends ApiScheme.MessageEntity {
        public static final int ID = 0xfa04579d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityMention";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityMention{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityHashtag extends ApiScheme.MessageEntity {
        public static final int ID = 0x6f635b0d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityHashtag";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityHashtag{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityBotCommand extends ApiScheme.MessageEntity {
        public static final int ID = 0x6cef8ac7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityBotCommand";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityBotCommand{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityUrl extends ApiScheme.MessageEntity {
        public static final int ID = 0x6ed02538;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityUrl";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityUrl{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityEmail extends ApiScheme.MessageEntity {
        public static final int ID = 0x64e475c2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityEmail";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityEmail{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityBold extends ApiScheme.MessageEntity {
        public static final int ID = 0xbd610bc9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityBold";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityBold{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityItalic extends ApiScheme.MessageEntity {
        public static final int ID = 0x826f8b60;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityItalic";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityItalic{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityCode extends ApiScheme.MessageEntity {
        public static final int ID = 0x28a20571;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityCode";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityCode{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityPre extends ApiScheme.MessageEntity {
        public static final int ID = 0x73924be0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityPre";
        public int offset;
        public int length;
        public String language;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);
            outputStream.writeTLString(language);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();
            language = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageEntityPre{" +
                    "offset=" + offset +
                    ", length=" + length +
                    ", language=" + language +
                    '}';

        }
    }


    public static class MessageEntityTextUrl extends ApiScheme.MessageEntity {
        public static final int ID = 0x76a6d327;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityTextUrl";
        public int offset;
        public int length;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessageEntityTextUrl{" +
                    "offset=" + offset +
                    ", length=" + length +
                    ", url=" + url +
                    '}';

        }
    }


    public static class MessageEntityMentionName extends ApiScheme.MessageEntity {
        public static final int ID = 0xdc7b1140;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityMentionName";
        public int offset;
        public int length;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageEntityMentionName{" +
                    "offset=" + offset +
                    ", length=" + length +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class InputMessageEntityMentionName extends ApiScheme.MessageEntity {
        public static final int ID = 0x208e68c9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessageEntityMentionName";
        public int offset;
        public int length;
        public ApiScheme.InputUser userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);
            userId.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();
            userId = ApiScheme.InputUser.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputMessageEntityMentionName{" +
                    "offset=" + offset +
                    ", length=" + length +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class MessageEntityPhone extends ApiScheme.MessageEntity {
        public static final int ID = 0x9b69e34b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityPhone";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityPhone{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityCashtag extends ApiScheme.MessageEntity {
        public static final int ID = 0x4c4e743f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityCashtag";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityCashtag{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityUnderline extends ApiScheme.MessageEntity {
        public static final int ID = 0x9c4e7e8b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityUnderline";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityUnderline{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityStrike extends ApiScheme.MessageEntity {
        public static final int ID = 0xbf0693d4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityStrike";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityStrike{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityBlockquote extends ApiScheme.MessageEntity {
        public static final int ID = 0x20df5d0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityBlockquote";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityBlockquote{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityBankCard extends ApiScheme.MessageEntity {
        public static final int ID = 0x761e6af4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityBankCard";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntityBankCard{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntitySpoiler extends ApiScheme.MessageEntity {
        public static final int ID = 0x32ca960f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntitySpoiler";
        public int offset;
        public int length;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageEntitySpoiler{" +
                    "offset=" + offset +
                    ", length=" + length +
                    '}';

        }
    }


    public static class MessageEntityCustomEmoji extends ApiScheme.MessageEntity {
        public static final int ID = 0xc8cf05f8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageEntityCustomEmoji";
        public int offset;
        public int length;
        public long documentId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(offset);
            outputStream.writeInt(length);
            outputStream.writeLong(documentId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readInt();
            length = inputStream.readInt();
            documentId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "MessageEntityCustomEmoji{" +
                    "offset=" + offset +
                    ", length=" + length +
                    ", documentId=" + documentId +
                    '}';

        }
    }


    public static class InputChannelEmpty extends ApiScheme.InputChannel {
        public static final int ID = 0xee8c1e86;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChannelEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputChannelEmpty{" +
                    '}';

        }
    }


    public static class InputChannel2 extends ApiScheme.InputChannel {
        public static final int ID = 0xf35aec28;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChannel";
        public long channelId;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(channelId);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channelId = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputChannel{" +
                    "channelId=" + channelId +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputChannelFromMessage extends ApiScheme.InputChannel {
        public static final int ID = 0x5b934f9d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputChannelFromMessage";
        public ApiScheme.InputPeer peer;
        public int msgId;
        public long channelId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);
            outputStream.writeLong(channelId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            msgId = inputStream.readInt();
            channelId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputChannelFromMessage{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    ", channelId=" + channelId +
                    '}';

        }
    }


    public static class MessageRange2 extends ApiScheme.MessageRange {
        public static final int ID = 0xae30253;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageRange";
        public int minId;
        public int maxId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(minId);
            outputStream.writeInt(maxId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            minId = inputStream.readInt();
            maxId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageRange{" +
                    "minId=" + minId +
                    ", maxId=" + maxId +
                    '}';

        }
    }


    public static class ChannelMessagesFilterEmpty extends ApiScheme.ChannelMessagesFilter {
        public static final int ID = 0x94d42ee7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelMessagesFilterEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelMessagesFilterEmpty{" +
                    '}';

        }
    }


    public static class ChannelMessagesFilter2 extends ApiScheme.ChannelMessagesFilter {
        public static final int ID = 0xcd77d957;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelMessagesFilter";
        public int flags;
        public True excludeNewMessages = null;
        public TLVector<ApiScheme.MessageRange> ranges;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = excludeNewMessages != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && excludeNewMessages != null) {
                excludeNewMessages.isBareType = true;
                excludeNewMessages.write(outputStream);
            }

            ranges.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                excludeNewMessages = new True();
                excludeNewMessages.isBareType = true;
                excludeNewMessages.read(inputStream);
            }

            ranges = new TLVector<ApiScheme.MessageRange>(ApiScheme.MessageRange.class);
            ranges.read(inputStream);


        }

        @Override
        public String toString() {
            return "ChannelMessagesFilter{" +
                    "flags=" + flags +
                    ", excludeNewMessages=" + excludeNewMessages +
                    ", ranges=" + ranges +
                    '}';

        }
    }


    public static class ChannelParticipant2 extends ApiScheme.ChannelParticipant {
        public static final int ID = 0xc00c07c0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipant";
        public long userId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChannelParticipant{" +
                    "userId=" + userId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class ChannelParticipantSelf extends ApiScheme.ChannelParticipant {
        public static final int ID = 0x35a8bfa7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantSelf";
        public int flags;
        public True viaRequest = null;
        public long userId;
        public long inviterId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = viaRequest != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && viaRequest != null) {
                viaRequest.isBareType = true;
                viaRequest.write(outputStream);
            }

            outputStream.writeLong(userId);
            outputStream.writeLong(inviterId);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                viaRequest = new True();
                viaRequest.isBareType = true;
                viaRequest.read(inputStream);
            }

            userId = inputStream.readLong();
            inviterId = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChannelParticipantSelf{" +
                    "flags=" + flags +
                    ", viaRequest=" + viaRequest +
                    ", userId=" + userId +
                    ", inviterId=" + inviterId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class ChannelParticipantCreator extends ApiScheme.ChannelParticipant {
        public static final int ID = 0x2fe601d3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantCreator";
        public int flags;
        public long userId;
        public ApiScheme.ChatAdminRights adminRights;
        public String rank = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = rank != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(userId);
            adminRights.write(outputStream);

            if ((flags & 1) != 0 && rank != null) {
                outputStream.writeTLString(rank);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            userId = inputStream.readLong();
            adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            if ((flags & 1) != 0) {
                rank = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "ChannelParticipantCreator{" +
                    "flags=" + flags +
                    ", userId=" + userId +
                    ", adminRights=" + adminRights +
                    ", rank=" + rank +
                    '}';

        }
    }


    public static class ChannelParticipantAdmin extends ApiScheme.ChannelParticipant {
        public static final int ID = 0x34c3bb53;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantAdmin";
        public int flags;
        public True canEdit = null;
        public True self = null;
        public long userId;
        public Long inviterId = null;
        public long promotedBy;
        public int date;
        public ApiScheme.ChatAdminRights adminRights;
        public String rank = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = canEdit != null ? (flags | 1) : (flags & ~1);
            flags = self != null ? (flags | 2) : (flags & ~2);
            flags = inviterId != null ? (flags | 2) : (flags & ~2);
            flags = rank != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && canEdit != null) {
                canEdit.isBareType = true;
                canEdit.write(outputStream);
            }

            if ((flags & 2) != 0 && self != null) {
                self.isBareType = true;
                self.write(outputStream);
            }

            outputStream.writeLong(userId);
            if ((flags & 2) != 0 && inviterId != null) {
                outputStream.writeLong(inviterId);
            }

            outputStream.writeLong(promotedBy);
            outputStream.writeInt(date);
            adminRights.write(outputStream);

            if ((flags & 4) != 0 && rank != null) {
                outputStream.writeTLString(rank);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                canEdit = new True();
                canEdit.isBareType = true;
                canEdit.read(inputStream);
            }

            if ((flags & 2) != 0) {
                self = new True();
                self.isBareType = true;
                self.read(inputStream);
            }

            userId = inputStream.readLong();
            if ((flags & 2) != 0) {
                inviterId = inputStream.readLong();
            }

            promotedBy = inputStream.readLong();
            date = inputStream.readInt();
            adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
            if ((flags & 4) != 0) {
                rank = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "ChannelParticipantAdmin{" +
                    "flags=" + flags +
                    ", canEdit=" + canEdit +
                    ", self=" + self +
                    ", userId=" + userId +
                    ", inviterId=" + inviterId +
                    ", promotedBy=" + promotedBy +
                    ", date=" + date +
                    ", adminRights=" + adminRights +
                    ", rank=" + rank +
                    '}';

        }
    }


    public static class ChannelParticipantBanned extends ApiScheme.ChannelParticipant {
        public static final int ID = 0x6df8014e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantBanned";
        public int flags;
        public True left = null;
        public ApiScheme.Peer peer;
        public long kickedBy;
        public int date;
        public ApiScheme.ChatBannedRights bannedRights;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = left != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && left != null) {
                left.isBareType = true;
                left.write(outputStream);
            }

            peer.write(outputStream);

            outputStream.writeLong(kickedBy);
            outputStream.writeInt(date);
            bannedRights.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                left = new True();
                left.isBareType = true;
                left.read(inputStream);
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            kickedBy = inputStream.readLong();
            date = inputStream.readInt();
            bannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelParticipantBanned{" +
                    "flags=" + flags +
                    ", left=" + left +
                    ", peer=" + peer +
                    ", kickedBy=" + kickedBy +
                    ", date=" + date +
                    ", bannedRights=" + bannedRights +
                    '}';

        }
    }


    public static class ChannelParticipantLeft extends ApiScheme.ChannelParticipant {
        public static final int ID = 0x1b03f006;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantLeft";
        public ApiScheme.Peer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelParticipantLeft{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class ChannelParticipantsRecent extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xde3f3c79;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsRecent";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelParticipantsRecent{" +
                    '}';

        }
    }


    public static class ChannelParticipantsAdmins extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xb4608969;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsAdmins";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelParticipantsAdmins{" +
                    '}';

        }
    }


    public static class ChannelParticipantsKicked extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xa3b54985;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsKicked";
        public String q;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(q);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            q = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelParticipantsKicked{" +
                    "q=" + q +
                    '}';

        }
    }


    public static class ChannelParticipantsBots extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xb0d1865b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsBots";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelParticipantsBots{" +
                    '}';

        }
    }


    public static class ChannelParticipantsBanned extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0x1427a5e1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsBanned";
        public String q;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(q);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            q = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelParticipantsBanned{" +
                    "q=" + q +
                    '}';

        }
    }


    public static class ChannelParticipantsSearch extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0x656ac4b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsSearch";
        public String q;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(q);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            q = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelParticipantsSearch{" +
                    "q=" + q +
                    '}';

        }
    }


    public static class ChannelParticipantsContacts extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xbb6ae88d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsContacts";
        public String q;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(q);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            q = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelParticipantsContacts{" +
                    "q=" + q +
                    '}';

        }
    }


    public static class ChannelParticipantsMentions extends ApiScheme.ChannelParticipantsFilter {
        public static final int ID = 0xe04b5ceb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelParticipantsMentions";
        public int flags;
        public String q = null;
        public Integer topMsgId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = q != null ? (flags | 1) : (flags & ~1);
            flags = topMsgId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && q != null) {
                outputStream.writeTLString(q);
            }

            if ((flags & 2) != 0 && topMsgId != null) {
                outputStream.writeInt(topMsgId);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                q = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                topMsgId = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "ChannelParticipantsMentions{" +
                    "flags=" + flags +
                    ", q=" + q +
                    ", topMsgId=" + topMsgId +
                    '}';

        }
    }


    public static class InputBotInlineMessageMediaAuto extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0x3380c786;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageMediaAuto";
        public int flags;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = entities != null ? (flags | 2) : (flags & ~2);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(message);
            if ((flags & 2) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            message = inputStream.readTLString();
            if ((flags & 2) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageMediaAuto{" +
                    "flags=" + flags +
                    ", message=" + message +
                    ", entities=" + entities +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageText extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0x3dcd7a87;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageText";
        public int flags;
        public True noWebpage = null;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = noWebpage != null ? (flags | 1) : (flags & ~1);
            flags = entities != null ? (flags | 2) : (flags & ~2);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && noWebpage != null) {
                noWebpage.isBareType = true;
                noWebpage.write(outputStream);
            }

            outputStream.writeTLString(message);
            if ((flags & 2) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                noWebpage = new True();
                noWebpage.isBareType = true;
                noWebpage.read(inputStream);
            }

            message = inputStream.readTLString();
            if ((flags & 2) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageText{" +
                    "flags=" + flags +
                    ", noWebpage=" + noWebpage +
                    ", message=" + message +
                    ", entities=" + entities +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageMediaGeo extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0x96929a85;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageMediaGeo";
        public int flags;
        public ApiScheme.InputGeoPoint geoPoint;
        public Integer heading = null;
        public Integer period = null;
        public Integer proximityNotificationRadius = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = heading != null ? (flags | 1) : (flags & ~1);
            flags = period != null ? (flags | 2) : (flags & ~2);
            flags = proximityNotificationRadius != null ? (flags | 8) : (flags & ~8);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            geoPoint.write(outputStream);

            if ((flags & 1) != 0 && heading != null) {
                outputStream.writeInt(heading);
            }

            if ((flags & 2) != 0 && period != null) {
                outputStream.writeInt(period);
            }

            if ((flags & 8) != 0 && proximityNotificationRadius != null) {
                outputStream.writeInt(proximityNotificationRadius);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
            if ((flags & 1) != 0) {
                heading = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                period = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                proximityNotificationRadius = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageMediaGeo{" +
                    "flags=" + flags +
                    ", geoPoint=" + geoPoint +
                    ", heading=" + heading +
                    ", period=" + period +
                    ", proximityNotificationRadius=" + proximityNotificationRadius +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageMediaVenue extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0x417bbf11;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageMediaVenue";
        public int flags;
        public ApiScheme.InputGeoPoint geoPoint;
        public String title;
        public String address;
        public String provider;
        public String venueId;
        public String venueType;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            geoPoint.write(outputStream);

            outputStream.writeTLString(title);
            outputStream.writeTLString(address);
            outputStream.writeTLString(provider);
            outputStream.writeTLString(venueId);
            outputStream.writeTLString(venueType);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
            title = inputStream.readTLString();
            address = inputStream.readTLString();
            provider = inputStream.readTLString();
            venueId = inputStream.readTLString();
            venueType = inputStream.readTLString();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageMediaVenue{" +
                    "flags=" + flags +
                    ", geoPoint=" + geoPoint +
                    ", title=" + title +
                    ", address=" + address +
                    ", provider=" + provider +
                    ", venueId=" + venueId +
                    ", venueType=" + venueType +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageMediaContact extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0xa6edbffd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageMediaContact";
        public int flags;
        public String phoneNumber;
        public String firstName;
        public String lastName;
        public String vcard;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(phoneNumber);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeTLString(vcard);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            phoneNumber = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            vcard = inputStream.readTLString();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageMediaContact{" +
                    "flags=" + flags +
                    ", phoneNumber=" + phoneNumber +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", vcard=" + vcard +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageGame extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0x4b425864;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageGame";
        public int flags;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageGame{" +
                    "flags=" + flags +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineMessageMediaInvoice extends ApiScheme.InputBotInlineMessage {
        public static final int ID = 0xd7e78225;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageMediaInvoice";
        public int flags;
        public String title;
        public String description;
        public ApiScheme.InputWebDocument photo = null;
        public ApiScheme.Invoice invoice;
        public byte[] payload;
        public String provider;
        public ApiScheme.DataJSON providerData;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(title);
            outputStream.writeTLString(description);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            invoice.write(outputStream);

            outputStream.writeTLBytes(payload);
            outputStream.writeTLString(provider);
            providerData.write(outputStream);

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            title = inputStream.readTLString();
            description = inputStream.readTLString();
            if ((flags & 1) != 0) {
                photo = ApiScheme.InputWebDocument.readObject(inputStream);
            }

            invoice = ApiScheme.Invoice.readObject(inputStream);
            payload = inputStream.readTLBytes();
            provider = inputStream.readTLString();
            providerData = ApiScheme.DataJSON.readObject(inputStream);
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputBotInlineMessageMediaInvoice{" +
                    "flags=" + flags +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", invoice=" + invoice +
                    ", payload=" + payload +
                    ", provider=" + provider +
                    ", providerData=" + providerData +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class InputBotInlineResult2 extends ApiScheme.InputBotInlineResult {
        public static final int ID = 0x88bf9319;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineResult";
        public int flags;
        public String id;
        public String type;
        public String title = null;
        public String description = null;
        public String url = null;
        public ApiScheme.InputWebDocument thumb = null;
        public ApiScheme.InputWebDocument content = null;
        public ApiScheme.InputBotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = title != null ? (flags | 2) : (flags & ~2);
            flags = description != null ? (flags | 4) : (flags & ~4);
            flags = url != null ? (flags | 8) : (flags & ~8);
            flags = thumb != null ? (flags | 16) : (flags & ~16);
            flags = content != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            outputStream.writeTLString(id);
            outputStream.writeTLString(type);
            if ((flags & 2) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 4) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            if ((flags & 8) != 0 && url != null) {
                outputStream.writeTLString(url);
            }

            if ((flags & 16) != 0 && thumb != null) {
                thumb.write(outputStream);
            }

            if ((flags & 32) != 0 && content != null) {
                content.write(outputStream);
            }

            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readTLString();
            type = inputStream.readTLString();
            if ((flags & 2) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                description = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                url = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                thumb = ApiScheme.InputWebDocument.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                content = ApiScheme.InputWebDocument.readObject(inputStream);
            }

            sendMessage = ApiScheme.InputBotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputBotInlineResult{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", type=" + type +
                    ", title=" + title +
                    ", description=" + description +
                    ", url=" + url +
                    ", thumb=" + thumb +
                    ", content=" + content +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class InputBotInlineResultPhoto extends ApiScheme.InputBotInlineResult {
        public static final int ID = 0xa8d864a7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineResultPhoto";
        public String id;
        public String type;
        public ApiScheme.InputPhoto photo;
        public ApiScheme.InputBotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLString(type);
            photo.write(outputStream);

            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            type = inputStream.readTLString();
            photo = ApiScheme.InputPhoto.readObject(inputStream);
            sendMessage = ApiScheme.InputBotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputBotInlineResultPhoto{" +
                    "id=" + id +
                    ", type=" + type +
                    ", photo=" + photo +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class InputBotInlineResultDocument extends ApiScheme.InputBotInlineResult {
        public static final int ID = 0xfff8fdc4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineResultDocument";
        public int flags;
        public String id;
        public String type;
        public String title = null;
        public String description = null;
        public ApiScheme.InputDocument document;
        public ApiScheme.InputBotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = title != null ? (flags | 2) : (flags & ~2);
            flags = description != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(id);
            outputStream.writeTLString(type);
            if ((flags & 2) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 4) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            document.write(outputStream);

            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readTLString();
            type = inputStream.readTLString();
            if ((flags & 2) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                description = inputStream.readTLString();
            }

            document = ApiScheme.InputDocument.readObject(inputStream);
            sendMessage = ApiScheme.InputBotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputBotInlineResultDocument{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", type=" + type +
                    ", title=" + title +
                    ", description=" + description +
                    ", document=" + document +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class InputBotInlineResultGame extends ApiScheme.InputBotInlineResult {
        public static final int ID = 0x4fa417f2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineResultGame";
        public String id;
        public String shortName;
        public ApiScheme.InputBotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLString(shortName);
            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            shortName = inputStream.readTLString();
            sendMessage = ApiScheme.InputBotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputBotInlineResultGame{" +
                    "id=" + id +
                    ", shortName=" + shortName +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class BotInlineMessageMediaAuto extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x764cf810;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageMediaAuto";
        public int flags;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = entities != null ? (flags | 2) : (flags & ~2);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(message);
            if ((flags & 2) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            message = inputStream.readTLString();
            if ((flags & 2) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageMediaAuto{" +
                    "flags=" + flags +
                    ", message=" + message +
                    ", entities=" + entities +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineMessageText extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x8c7f65e2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageText";
        public int flags;
        public True noWebpage = null;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = noWebpage != null ? (flags | 1) : (flags & ~1);
            flags = entities != null ? (flags | 2) : (flags & ~2);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && noWebpage != null) {
                noWebpage.isBareType = true;
                noWebpage.write(outputStream);
            }

            outputStream.writeTLString(message);
            if ((flags & 2) != 0 && entities != null) {
                entities.write(outputStream);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                noWebpage = new True();
                noWebpage.isBareType = true;
                noWebpage.read(inputStream);
            }

            message = inputStream.readTLString();
            if ((flags & 2) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageText{" +
                    "flags=" + flags +
                    ", noWebpage=" + noWebpage +
                    ", message=" + message +
                    ", entities=" + entities +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineMessageMediaGeo extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x51846fd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageMediaGeo";
        public int flags;
        public ApiScheme.GeoPoint geo;
        public Integer heading = null;
        public Integer period = null;
        public Integer proximityNotificationRadius = null;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = heading != null ? (flags | 1) : (flags & ~1);
            flags = period != null ? (flags | 2) : (flags & ~2);
            flags = proximityNotificationRadius != null ? (flags | 8) : (flags & ~8);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            geo.write(outputStream);

            if ((flags & 1) != 0 && heading != null) {
                outputStream.writeInt(heading);
            }

            if ((flags & 2) != 0 && period != null) {
                outputStream.writeInt(period);
            }

            if ((flags & 8) != 0 && proximityNotificationRadius != null) {
                outputStream.writeInt(proximityNotificationRadius);
            }

            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            geo = ApiScheme.GeoPoint.readObject(inputStream);
            if ((flags & 1) != 0) {
                heading = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                period = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                proximityNotificationRadius = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageMediaGeo{" +
                    "flags=" + flags +
                    ", geo=" + geo +
                    ", heading=" + heading +
                    ", period=" + period +
                    ", proximityNotificationRadius=" + proximityNotificationRadius +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineMessageMediaVenue extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x8a86659c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageMediaVenue";
        public int flags;
        public ApiScheme.GeoPoint geo;
        public String title;
        public String address;
        public String provider;
        public String venueId;
        public String venueType;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            geo.write(outputStream);

            outputStream.writeTLString(title);
            outputStream.writeTLString(address);
            outputStream.writeTLString(provider);
            outputStream.writeTLString(venueId);
            outputStream.writeTLString(venueType);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            geo = ApiScheme.GeoPoint.readObject(inputStream);
            title = inputStream.readTLString();
            address = inputStream.readTLString();
            provider = inputStream.readTLString();
            venueId = inputStream.readTLString();
            venueType = inputStream.readTLString();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageMediaVenue{" +
                    "flags=" + flags +
                    ", geo=" + geo +
                    ", title=" + title +
                    ", address=" + address +
                    ", provider=" + provider +
                    ", venueId=" + venueId +
                    ", venueType=" + venueType +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineMessageMediaContact extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x18d1cdc2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageMediaContact";
        public int flags;
        public String phoneNumber;
        public String firstName;
        public String lastName;
        public String vcard;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            outputStream.writeTLString(phoneNumber);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeTLString(vcard);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            phoneNumber = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            vcard = inputStream.readTLString();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageMediaContact{" +
                    "flags=" + flags +
                    ", phoneNumber=" + phoneNumber +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", vcard=" + vcard +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineMessageMediaInvoice extends ApiScheme.BotInlineMessage {
        public static final int ID = 0x354a9b09;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMessageMediaInvoice";
        public int flags;
        public True shippingAddressRequested = null;
        public True test = null;
        public String title;
        public String description;
        public ApiScheme.WebDocument photo = null;
        public String currency;
        public long totalAmount;
        public ApiScheme.ReplyMarkup replyMarkup = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = shippingAddressRequested != null ? (flags | 2) : (flags & ~2);
            flags = test != null ? (flags | 8) : (flags & ~8);
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && shippingAddressRequested != null) {
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.write(outputStream);
            }

            if ((flags & 8) != 0 && test != null) {
                test.isBareType = true;
                test.write(outputStream);
            }

            outputStream.writeTLString(title);
            outputStream.writeTLString(description);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            outputStream.writeTLString(currency);
            outputStream.writeLong(totalAmount);
            if ((flags & 4) != 0 && replyMarkup != null) {
                replyMarkup.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                shippingAddressRequested = new True();
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.read(inputStream);
            }

            if ((flags & 8) != 0) {
                test = new True();
                test.isBareType = true;
                test.read(inputStream);
            }

            title = inputStream.readTLString();
            description = inputStream.readTLString();
            if ((flags & 1) != 0) {
                photo = ApiScheme.WebDocument.readObject(inputStream);
            }

            currency = inputStream.readTLString();
            totalAmount = inputStream.readLong();
            if ((flags & 4) != 0) {
                replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "BotInlineMessageMediaInvoice{" +
                    "flags=" + flags +
                    ", shippingAddressRequested=" + shippingAddressRequested +
                    ", test=" + test +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", currency=" + currency +
                    ", totalAmount=" + totalAmount +
                    ", replyMarkup=" + replyMarkup +
                    '}';

        }
    }


    public static class BotInlineResult2 extends ApiScheme.BotInlineResult {
        public static final int ID = 0x11965f3a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineResult";
        public int flags;
        public String id;
        public String type;
        public String title = null;
        public String description = null;
        public String url = null;
        public ApiScheme.WebDocument thumb = null;
        public ApiScheme.WebDocument content = null;
        public ApiScheme.BotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = title != null ? (flags | 2) : (flags & ~2);
            flags = description != null ? (flags | 4) : (flags & ~4);
            flags = url != null ? (flags | 8) : (flags & ~8);
            flags = thumb != null ? (flags | 16) : (flags & ~16);
            flags = content != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            outputStream.writeTLString(id);
            outputStream.writeTLString(type);
            if ((flags & 2) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 4) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            if ((flags & 8) != 0 && url != null) {
                outputStream.writeTLString(url);
            }

            if ((flags & 16) != 0 && thumb != null) {
                thumb.write(outputStream);
            }

            if ((flags & 32) != 0 && content != null) {
                content.write(outputStream);
            }

            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readTLString();
            type = inputStream.readTLString();
            if ((flags & 2) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                description = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                url = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                thumb = ApiScheme.WebDocument.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                content = ApiScheme.WebDocument.readObject(inputStream);
            }

            sendMessage = ApiScheme.BotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "BotInlineResult{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", type=" + type +
                    ", title=" + title +
                    ", description=" + description +
                    ", url=" + url +
                    ", thumb=" + thumb +
                    ", content=" + content +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class BotInlineMediaResult extends ApiScheme.BotInlineResult {
        public static final int ID = 0x17db940b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botInlineMediaResult";
        public int flags;
        public String id;
        public String type;
        public ApiScheme.Photo photo = null;
        public ApiScheme.Document document = null;
        public String title = null;
        public String description = null;
        public ApiScheme.BotInlineMessage sendMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = photo != null ? (flags | 1) : (flags & ~1);
            flags = document != null ? (flags | 2) : (flags & ~2);
            flags = title != null ? (flags | 4) : (flags & ~4);
            flags = description != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            outputStream.writeTLString(id);
            outputStream.writeTLString(type);
            if ((flags & 1) != 0 && photo != null) {
                photo.write(outputStream);
            }

            if ((flags & 2) != 0 && document != null) {
                document.write(outputStream);
            }

            if ((flags & 4) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 8) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            sendMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readTLString();
            type = inputStream.readTLString();
            if ((flags & 1) != 0) {
                photo = ApiScheme.Photo.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                document = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                description = inputStream.readTLString();
            }

            sendMessage = ApiScheme.BotInlineMessage.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "BotInlineMediaResult{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", type=" + type +
                    ", photo=" + photo +
                    ", document=" + document +
                    ", title=" + title +
                    ", description=" + description +
                    ", sendMessage=" + sendMessage +
                    '}';

        }
    }


    public static class ExportedMessageLink2 extends ApiScheme.ExportedMessageLink {
        public static final int ID = 0x5dab1af4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "exportedMessageLink";
        public String link;
        public String html;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(link);
            outputStream.writeTLString(html);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            link = inputStream.readTLString();
            html = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ExportedMessageLink{" +
                    "link=" + link +
                    ", html=" + html +
                    '}';

        }
    }


    public static class MessageFwdHeader2 extends ApiScheme.MessageFwdHeader {
        public static final int ID = 0x5f777dce;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageFwdHeader";
        public int flags;
        public True imported = null;
        public ApiScheme.Peer fromId = null;
        public String fromName = null;
        public int date;
        public Integer channelPost = null;
        public String postAuthor = null;
        public ApiScheme.Peer savedFromPeer = null;
        public Integer savedFromMsgId = null;
        public String psaType = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = imported != null ? (flags | 128) : (flags & ~128);
            flags = fromId != null ? (flags | 1) : (flags & ~1);
            flags = fromName != null ? (flags | 32) : (flags & ~32);
            flags = channelPost != null ? (flags | 4) : (flags & ~4);
            flags = postAuthor != null ? (flags | 8) : (flags & ~8);
            flags = savedFromPeer != null ? (flags | 16) : (flags & ~16);
            flags = savedFromMsgId != null ? (flags | 16) : (flags & ~16);
            flags = psaType != null ? (flags | 64) : (flags & ~64);
            outputStream.writeInt(flags);
            if ((flags & 128) != 0 && imported != null) {
                imported.isBareType = true;
                imported.write(outputStream);
            }

            if ((flags & 1) != 0 && fromId != null) {
                fromId.write(outputStream);
            }

            if ((flags & 32) != 0 && fromName != null) {
                outputStream.writeTLString(fromName);
            }

            outputStream.writeInt(date);
            if ((flags & 4) != 0 && channelPost != null) {
                outputStream.writeInt(channelPost);
            }

            if ((flags & 8) != 0 && postAuthor != null) {
                outputStream.writeTLString(postAuthor);
            }

            if ((flags & 16) != 0 && savedFromPeer != null) {
                savedFromPeer.write(outputStream);
            }

            if ((flags & 16) != 0 && savedFromMsgId != null) {
                outputStream.writeInt(savedFromMsgId);
            }

            if ((flags & 64) != 0 && psaType != null) {
                outputStream.writeTLString(psaType);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 128) != 0) {
                imported = new True();
                imported.isBareType = true;
                imported.read(inputStream);
            }

            if ((flags & 1) != 0) {
                fromId = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 32) != 0) {
                fromName = inputStream.readTLString();
            }

            date = inputStream.readInt();
            if ((flags & 4) != 0) {
                channelPost = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                postAuthor = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                savedFromPeer = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 16) != 0) {
                savedFromMsgId = inputStream.readInt();
            }

            if ((flags & 64) != 0) {
                psaType = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "MessageFwdHeader{" +
                    "flags=" + flags +
                    ", imported=" + imported +
                    ", fromId=" + fromId +
                    ", fromName=" + fromName +
                    ", date=" + date +
                    ", channelPost=" + channelPost +
                    ", postAuthor=" + postAuthor +
                    ", savedFromPeer=" + savedFromPeer +
                    ", savedFromMsgId=" + savedFromMsgId +
                    ", psaType=" + psaType +
                    '}';

        }
    }


    public static class InputBotInlineMessageID2 extends ApiScheme.InputBotInlineMessageID {
        public static final int ID = 0x890c3d89;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageID";
        public int dcId;
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(dcId);
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            dcId = inputStream.readInt();
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputBotInlineMessageID{" +
                    "dcId=" + dcId +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputBotInlineMessageID64 extends ApiScheme.InputBotInlineMessageID {
        public static final int ID = 0xb6d915d7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputBotInlineMessageID64";
        public int dcId;
        public long ownerId;
        public int id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(dcId);
            outputStream.writeLong(ownerId);
            outputStream.writeInt(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            dcId = inputStream.readInt();
            ownerId = inputStream.readLong();
            id = inputStream.readInt();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputBotInlineMessageID64{" +
                    "dcId=" + dcId +
                    ", ownerId=" + ownerId +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InlineBotSwitchPM2 extends ApiScheme.InlineBotSwitchPM {
        public static final int ID = 0x3c20629f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineBotSwitchPM";
        public String text;
        public String startParam;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(startParam);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            startParam = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InlineBotSwitchPM{" +
                    "text=" + text +
                    ", startParam=" + startParam +
                    '}';

        }
    }


    public static class TopPeer2 extends ApiScheme.TopPeer {
        public static final int ID = 0xedcdc05b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeer";
        public ApiScheme.Peer peer;
        public double rating;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeDouble(rating);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            rating = inputStream.readDouble();

        }

        @Override
        public String toString() {
            return "TopPeer{" +
                    "peer=" + peer +
                    ", rating=" + rating +
                    '}';

        }
    }


    public static class TopPeerCategoryBotsPM extends ApiScheme.TopPeerCategory {
        public static final int ID = 0xab661b5b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryBotsPM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryBotsPM{" +
                    '}';

        }
    }


    public static class TopPeerCategoryBotsInline extends ApiScheme.TopPeerCategory {
        public static final int ID = 0x148677e2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryBotsInline";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryBotsInline{" +
                    '}';

        }
    }


    public static class TopPeerCategoryCorrespondents extends ApiScheme.TopPeerCategory {
        public static final int ID = 0x637b7ed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryCorrespondents";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryCorrespondents{" +
                    '}';

        }
    }


    public static class TopPeerCategoryGroups extends ApiScheme.TopPeerCategory {
        public static final int ID = 0xbd17a14a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryGroups";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryGroups{" +
                    '}';

        }
    }


    public static class TopPeerCategoryChannels extends ApiScheme.TopPeerCategory {
        public static final int ID = 0x161d9628;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryChannels";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryChannels{" +
                    '}';

        }
    }


    public static class TopPeerCategoryPhoneCalls extends ApiScheme.TopPeerCategory {
        public static final int ID = 0x1e76a78c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryPhoneCalls";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryPhoneCalls{" +
                    '}';

        }
    }


    public static class TopPeerCategoryForwardUsers extends ApiScheme.TopPeerCategory {
        public static final int ID = 0xa8406ca9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryForwardUsers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryForwardUsers{" +
                    '}';

        }
    }


    public static class TopPeerCategoryForwardChats extends ApiScheme.TopPeerCategory {
        public static final int ID = 0xfbeec0f0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryForwardChats";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TopPeerCategoryForwardChats{" +
                    '}';

        }
    }


    public static class TopPeerCategoryPeers2 extends ApiScheme.TopPeerCategoryPeers {
        public static final int ID = 0xfb834291;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "topPeerCategoryPeers";
        public ApiScheme.TopPeerCategory category;
        public int count;
        public TLVector<ApiScheme.TopPeer> peers;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            category.write(outputStream);

            outputStream.writeInt(count);
            peers.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            category = ApiScheme.TopPeerCategory.readObject(inputStream);
            count = inputStream.readInt();
            peers = new TLVector<ApiScheme.TopPeer>(ApiScheme.TopPeer.class);
            peers.read(inputStream);


        }

        @Override
        public String toString() {
            return "TopPeerCategoryPeers{" +
                    "category=" + category +
                    ", count=" + count +
                    ", peers=" + peers +
                    '}';

        }
    }


    public static class DraftMessageEmpty extends ApiScheme.DraftMessage {
        public static final int ID = 0x1b0c841a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "draftMessageEmpty";
        public int flags;
        public Integer date = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = date != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && date != null) {
                outputStream.writeInt(date);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                date = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "DraftMessageEmpty{" +
                    "flags=" + flags +
                    ", date=" + date +
                    '}';

        }
    }


    public static class DraftMessage2 extends ApiScheme.DraftMessage {
        public static final int ID = 0xfd8e711f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "draftMessage";
        public int flags;
        public True noWebpage = null;
        public Integer replyToMsgId = null;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = noWebpage != null ? (flags | 2) : (flags & ~2);
            flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
            flags = entities != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && noWebpage != null) {
                noWebpage.isBareType = true;
                noWebpage.write(outputStream);
            }

            if ((flags & 1) != 0 && replyToMsgId != null) {
                outputStream.writeInt(replyToMsgId);
            }

            outputStream.writeTLString(message);
            if ((flags & 8) != 0 && entities != null) {
                entities.write(outputStream);
            }

            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                noWebpage = new True();
                noWebpage.isBareType = true;
                noWebpage.read(inputStream);
            }

            if ((flags & 1) != 0) {
                replyToMsgId = inputStream.readInt();
            }

            message = inputStream.readTLString();
            if ((flags & 8) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }

            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "DraftMessage{" +
                    "flags=" + flags +
                    ", noWebpage=" + noWebpage +
                    ", replyToMsgId=" + replyToMsgId +
                    ", message=" + message +
                    ", entities=" + entities +
                    ", date=" + date +
                    '}';

        }
    }


    public static class StickerSetCovered2 extends ApiScheme.StickerSetCovered {
        public static final int ID = 0x6410a5d2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "stickerSetCovered";
        public ApiScheme.StickerSet set;
        public ApiScheme.Document cover;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            set.write(outputStream);

            cover.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            set = ApiScheme.StickerSet.readObject(inputStream);
            cover = ApiScheme.Document.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "StickerSetCovered{" +
                    "set=" + set +
                    ", cover=" + cover +
                    '}';

        }
    }


    public static class StickerSetMultiCovered extends ApiScheme.StickerSetCovered {
        public static final int ID = 0x3407e51b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "stickerSetMultiCovered";
        public ApiScheme.StickerSet set;
        public TLVector<ApiScheme.Document> covers;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            set.write(outputStream);

            covers.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            set = ApiScheme.StickerSet.readObject(inputStream);
            covers = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
            covers.read(inputStream);


        }

        @Override
        public String toString() {
            return "StickerSetMultiCovered{" +
                    "set=" + set +
                    ", covers=" + covers +
                    '}';

        }
    }


    public static class StickerSetFullCovered extends ApiScheme.StickerSetCovered {
        public static final int ID = 0x1aed5ee5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "stickerSetFullCovered";
        public ApiScheme.StickerSet set;
        public TLVector<ApiScheme.StickerPack> packs;
        public TLVector<ApiScheme.Document> documents;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            set.write(outputStream);

            packs.write(outputStream);

            documents.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            set = ApiScheme.StickerSet.readObject(inputStream);
            packs = new TLVector<ApiScheme.StickerPack>(ApiScheme.StickerPack.class);
            packs.read(inputStream);

            documents = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
            documents.read(inputStream);


        }

        @Override
        public String toString() {
            return "StickerSetFullCovered{" +
                    "set=" + set +
                    ", packs=" + packs +
                    ", documents=" + documents +
                    '}';

        }
    }


    public static class MaskCoords2 extends ApiScheme.MaskCoords {
        public static final int ID = 0xaed6dbb2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "maskCoords";
        public int n;
        public double x;
        public double y;
        public double zoom;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(n);
            outputStream.writeDouble(x);
            outputStream.writeDouble(y);
            outputStream.writeDouble(zoom);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            n = inputStream.readInt();
            x = inputStream.readDouble();
            y = inputStream.readDouble();
            zoom = inputStream.readDouble();

        }

        @Override
        public String toString() {
            return "MaskCoords{" +
                    "n=" + n +
                    ", x=" + x +
                    ", y=" + y +
                    ", zoom=" + zoom +
                    '}';

        }
    }


    public static class InputStickeredMediaPhoto extends ApiScheme.InputStickeredMedia {
        public static final int ID = 0x4a992157;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickeredMediaPhoto";
        public ApiScheme.InputPhoto id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            id.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = ApiScheme.InputPhoto.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputStickeredMediaPhoto{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class InputStickeredMediaDocument extends ApiScheme.InputStickeredMedia {
        public static final int ID = 0x438865b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickeredMediaDocument";
        public ApiScheme.InputDocument id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            id.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = ApiScheme.InputDocument.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputStickeredMediaDocument{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class Game2 extends ApiScheme.Game {
        public static final int ID = 0xbdf9653b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "game";
        public int flags;
        public long id;
        public long accessHash;
        public String shortName;
        public String title;
        public String description;
        public ApiScheme.Photo photo;
        public ApiScheme.Document document = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = document != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLString(shortName);
            outputStream.writeTLString(title);
            outputStream.writeTLString(description);
            photo.write(outputStream);

            if ((flags & 1) != 0 && document != null) {
                document.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            shortName = inputStream.readTLString();
            title = inputStream.readTLString();
            description = inputStream.readTLString();
            photo = ApiScheme.Photo.readObject(inputStream);
            if ((flags & 1) != 0) {
                document = ApiScheme.Document.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "Game{" +
                    "flags=" + flags +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", shortName=" + shortName +
                    ", title=" + title +
                    ", description=" + description +
                    ", photo=" + photo +
                    ", document=" + document +
                    '}';

        }
    }


    public static class InputGameID extends ApiScheme.InputGame {
        public static final int ID = 0x32c3e77;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGameID";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputGameID{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputGameShortName extends ApiScheme.InputGame {
        public static final int ID = 0xc331e80a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGameShortName";
        public ApiScheme.InputUser botId;
        public String shortName;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            botId.write(outputStream);

            outputStream.writeTLString(shortName);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            botId = ApiScheme.InputUser.readObject(inputStream);
            shortName = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputGameShortName{" +
                    "botId=" + botId +
                    ", shortName=" + shortName +
                    '}';

        }
    }


    public static class HighScore2 extends ApiScheme.HighScore {
        public static final int ID = 0x73a379eb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "highScore";
        public int pos;
        public long userId;
        public int score;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(pos);
            outputStream.writeLong(userId);
            outputStream.writeInt(score);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            pos = inputStream.readInt();
            userId = inputStream.readLong();
            score = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "HighScore{" +
                    "pos=" + pos +
                    ", userId=" + userId +
                    ", score=" + score +
                    '}';

        }
    }


    public static class TextEmpty extends ApiScheme.RichText {
        public static final int ID = 0xdc3d824f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "TextEmpty{" +
                    '}';

        }
    }


    public static class TextPlain extends ApiScheme.RichText {
        public static final int ID = 0x744694e0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textPlain";
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "TextPlain{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextBold extends ApiScheme.RichText {
        public static final int ID = 0x6724abc4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textBold";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextBold{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextItalic extends ApiScheme.RichText {
        public static final int ID = 0xd912a59c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textItalic";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextItalic{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextUnderline extends ApiScheme.RichText {
        public static final int ID = 0xc12622c4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textUnderline";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextUnderline{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextStrike extends ApiScheme.RichText {
        public static final int ID = 0x9bf8bb95;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textStrike";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextStrike{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextFixed extends ApiScheme.RichText {
        public static final int ID = 0x6c3f19b9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textFixed";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextFixed{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextUrl extends ApiScheme.RichText {
        public static final int ID = 0x3c2884c1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textUrl";
        public ApiScheme.RichText text;
        public String url;
        public long webpageId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            outputStream.writeTLString(url);
            outputStream.writeLong(webpageId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            url = inputStream.readTLString();
            webpageId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "TextUrl{" +
                    "text=" + text +
                    ", url=" + url +
                    ", webpageId=" + webpageId +
                    '}';

        }
    }


    public static class TextEmail extends ApiScheme.RichText {
        public static final int ID = 0xde5a0dd6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textEmail";
        public ApiScheme.RichText text;
        public String email;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            outputStream.writeTLString(email);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            email = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "TextEmail{" +
                    "text=" + text +
                    ", email=" + email +
                    '}';

        }
    }


    public static class TextConcat extends ApiScheme.RichText {
        public static final int ID = 0x7e6260d7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textConcat";
        public TLVector<ApiScheme.RichText> texts;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            texts.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            texts = new TLVector<ApiScheme.RichText>(ApiScheme.RichText.class);
            texts.read(inputStream);


        }

        @Override
        public String toString() {
            return "TextConcat{" +
                    "texts=" + texts +
                    '}';

        }
    }


    public static class TextSubscript extends ApiScheme.RichText {
        public static final int ID = 0xed6a8504;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textSubscript";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextSubscript{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextSuperscript extends ApiScheme.RichText {
        public static final int ID = 0xc7fb5e01;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textSuperscript";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextSuperscript{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextMarked extends ApiScheme.RichText {
        public static final int ID = 0x34b8621;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textMarked";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "TextMarked{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class TextPhone extends ApiScheme.RichText {
        public static final int ID = 0x1ccb966a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textPhone";
        public ApiScheme.RichText text;
        public String phone;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            outputStream.writeTLString(phone);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            phone = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "TextPhone{" +
                    "text=" + text +
                    ", phone=" + phone +
                    '}';

        }
    }


    public static class TextImage extends ApiScheme.RichText {
        public static final int ID = 0x81ccf4f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textImage";
        public long documentId;
        public int w;
        public int h;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(documentId);
            outputStream.writeInt(w);
            outputStream.writeInt(h);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            documentId = inputStream.readLong();
            w = inputStream.readInt();
            h = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "TextImage{" +
                    "documentId=" + documentId +
                    ", w=" + w +
                    ", h=" + h +
                    '}';

        }
    }


    public static class TextAnchor extends ApiScheme.RichText {
        public static final int ID = 0x35553762;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "textAnchor";
        public ApiScheme.RichText text;
        public String name;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            outputStream.writeTLString(name);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            name = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "TextAnchor{" +
                    "text=" + text +
                    ", name=" + name +
                    '}';

        }
    }


    public static class PageBlockUnsupported extends ApiScheme.PageBlock {
        public static final int ID = 0x13567e8a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockUnsupported";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PageBlockUnsupported{" +
                    '}';

        }
    }


    public static class PageBlockTitle extends ApiScheme.PageBlock {
        public static final int ID = 0x70abc3fd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockTitle";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockTitle{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockSubtitle extends ApiScheme.PageBlock {
        public static final int ID = 0x8ffa9a1f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockSubtitle";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockSubtitle{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockAuthorDate extends ApiScheme.PageBlock {
        public static final int ID = 0xbaafe5e0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockAuthorDate";
        public ApiScheme.RichText author;
        public int publishedDate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            author.write(outputStream);

            outputStream.writeInt(publishedDate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            author = ApiScheme.RichText.readObject(inputStream);
            publishedDate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PageBlockAuthorDate{" +
                    "author=" + author +
                    ", publishedDate=" + publishedDate +
                    '}';

        }
    }


    public static class PageBlockHeader extends ApiScheme.PageBlock {
        public static final int ID = 0xbfd064ec;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockHeader";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockHeader{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockSubheader extends ApiScheme.PageBlock {
        public static final int ID = 0xf12bb6e1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockSubheader";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockSubheader{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockParagraph extends ApiScheme.PageBlock {
        public static final int ID = 0x467a0766;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockParagraph";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockParagraph{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockPreformatted extends ApiScheme.PageBlock {
        public static final int ID = 0xc070d93e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockPreformatted";
        public ApiScheme.RichText text;
        public String language;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            outputStream.writeTLString(language);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            language = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PageBlockPreformatted{" +
                    "text=" + text +
                    ", language=" + language +
                    '}';

        }
    }


    public static class PageBlockFooter extends ApiScheme.PageBlock {
        public static final int ID = 0x48870999;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockFooter";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockFooter{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockDivider extends ApiScheme.PageBlock {
        public static final int ID = 0xdb20b188;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockDivider";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PageBlockDivider{" +
                    '}';

        }
    }


    public static class PageBlockAnchor extends ApiScheme.PageBlock {
        public static final int ID = 0xce0d37b0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockAnchor";
        public String name;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(name);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            name = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PageBlockAnchor{" +
                    "name=" + name +
                    '}';

        }
    }


    public static class PageBlockList extends ApiScheme.PageBlock {
        public static final int ID = 0xe4e88011;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockList";
        public TLVector<ApiScheme.PageListItem> items;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            items.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            items = new TLVector<ApiScheme.PageListItem>(ApiScheme.PageListItem.class);
            items.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageBlockList{" +
                    "items=" + items +
                    '}';

        }
    }


    public static class PageBlockBlockquote extends ApiScheme.PageBlock {
        public static final int ID = 0x263d7c26;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockBlockquote";
        public ApiScheme.RichText text;
        public ApiScheme.RichText caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            caption = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockBlockquote{" +
                    "text=" + text +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockPullquote extends ApiScheme.PageBlock {
        public static final int ID = 0x4f4456d3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockPullquote";
        public ApiScheme.RichText text;
        public ApiScheme.RichText caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            caption = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockPullquote{" +
                    "text=" + text +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockPhoto extends ApiScheme.PageBlock {
        public static final int ID = 0x1759c560;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockPhoto";
        public int flags;
        public long photoId;
        public ApiScheme.PageCaption caption;
        public String url = null;
        public Long webpageId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = url != null ? (flags | 1) : (flags & ~1);
            flags = webpageId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeLong(photoId);
            caption.write(outputStream);

            if ((flags & 1) != 0 && url != null) {
                outputStream.writeTLString(url);
            }

            if ((flags & 1) != 0 && webpageId != null) {
                outputStream.writeLong(webpageId);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            photoId = inputStream.readLong();
            caption = ApiScheme.PageCaption.readObject(inputStream);
            if ((flags & 1) != 0) {
                url = inputStream.readTLString();
            }

            if ((flags & 1) != 0) {
                webpageId = inputStream.readLong();
            }


        }

        @Override
        public String toString() {
            return "PageBlockPhoto{" +
                    "flags=" + flags +
                    ", photoId=" + photoId +
                    ", caption=" + caption +
                    ", url=" + url +
                    ", webpageId=" + webpageId +
                    '}';

        }
    }


    public static class PageBlockVideo extends ApiScheme.PageBlock {
        public static final int ID = 0x7c8fe7b6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockVideo";
        public int flags;
        public True autoplay = null;
        public True loop = null;
        public long videoId;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = autoplay != null ? (flags | 1) : (flags & ~1);
            flags = loop != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && autoplay != null) {
                autoplay.isBareType = true;
                autoplay.write(outputStream);
            }

            if ((flags & 2) != 0 && loop != null) {
                loop.isBareType = true;
                loop.write(outputStream);
            }

            outputStream.writeLong(videoId);
            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                autoplay = new True();
                autoplay.isBareType = true;
                autoplay.read(inputStream);
            }

            if ((flags & 2) != 0) {
                loop = new True();
                loop.isBareType = true;
                loop.read(inputStream);
            }

            videoId = inputStream.readLong();
            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockVideo{" +
                    "flags=" + flags +
                    ", autoplay=" + autoplay +
                    ", loop=" + loop +
                    ", videoId=" + videoId +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockCover extends ApiScheme.PageBlock {
        public static final int ID = 0x39f23300;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockCover";
        public ApiScheme.PageBlock cover;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            cover.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            cover = ApiScheme.PageBlock.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockCover{" +
                    "cover=" + cover +
                    '}';

        }
    }


    public static class PageBlockEmbed extends ApiScheme.PageBlock {
        public static final int ID = 0xa8718dc5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockEmbed";
        public int flags;
        public True fullWidth = null;
        public True allowScrolling = null;
        public String url = null;
        public String html = null;
        public Long posterPhotoId = null;
        public Integer w = null;
        public Integer h = null;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = fullWidth != null ? (flags | 1) : (flags & ~1);
            flags = allowScrolling != null ? (flags | 8) : (flags & ~8);
            flags = url != null ? (flags | 2) : (flags & ~2);
            flags = html != null ? (flags | 4) : (flags & ~4);
            flags = posterPhotoId != null ? (flags | 16) : (flags & ~16);
            flags = w != null ? (flags | 32) : (flags & ~32);
            flags = h != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && fullWidth != null) {
                fullWidth.isBareType = true;
                fullWidth.write(outputStream);
            }

            if ((flags & 8) != 0 && allowScrolling != null) {
                allowScrolling.isBareType = true;
                allowScrolling.write(outputStream);
            }

            if ((flags & 2) != 0 && url != null) {
                outputStream.writeTLString(url);
            }

            if ((flags & 4) != 0 && html != null) {
                outputStream.writeTLString(html);
            }

            if ((flags & 16) != 0 && posterPhotoId != null) {
                outputStream.writeLong(posterPhotoId);
            }

            if ((flags & 32) != 0 && w != null) {
                outputStream.writeInt(w);
            }

            if ((flags & 32) != 0 && h != null) {
                outputStream.writeInt(h);
            }

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                fullWidth = new True();
                fullWidth.isBareType = true;
                fullWidth.read(inputStream);
            }

            if ((flags & 8) != 0) {
                allowScrolling = new True();
                allowScrolling.isBareType = true;
                allowScrolling.read(inputStream);
            }

            if ((flags & 2) != 0) {
                url = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                html = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                posterPhotoId = inputStream.readLong();
            }

            if ((flags & 32) != 0) {
                w = inputStream.readInt();
            }

            if ((flags & 32) != 0) {
                h = inputStream.readInt();
            }

            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockEmbed{" +
                    "flags=" + flags +
                    ", fullWidth=" + fullWidth +
                    ", allowScrolling=" + allowScrolling +
                    ", url=" + url +
                    ", html=" + html +
                    ", posterPhotoId=" + posterPhotoId +
                    ", w=" + w +
                    ", h=" + h +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockEmbedPost extends ApiScheme.PageBlock {
        public static final int ID = 0xf259a80b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockEmbedPost";
        public String url;
        public long webpageId;
        public long authorPhotoId;
        public String author;
        public int date;
        public TLVector<ApiScheme.PageBlock> blocks;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeLong(webpageId);
            outputStream.writeLong(authorPhotoId);
            outputStream.writeTLString(author);
            outputStream.writeInt(date);
            blocks.write(outputStream);

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            webpageId = inputStream.readLong();
            authorPhotoId = inputStream.readLong();
            author = inputStream.readTLString();
            date = inputStream.readInt();
            blocks = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            blocks.read(inputStream);

            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockEmbedPost{" +
                    "url=" + url +
                    ", webpageId=" + webpageId +
                    ", authorPhotoId=" + authorPhotoId +
                    ", author=" + author +
                    ", date=" + date +
                    ", blocks=" + blocks +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockCollage extends ApiScheme.PageBlock {
        public static final int ID = 0x65a0fa4d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockCollage";
        public TLVector<ApiScheme.PageBlock> items;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            items.write(outputStream);

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            items = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            items.read(inputStream);

            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockCollage{" +
                    "items=" + items +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockSlideshow extends ApiScheme.PageBlock {
        public static final int ID = 0x31f9590;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockSlideshow";
        public TLVector<ApiScheme.PageBlock> items;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            items.write(outputStream);

            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            items = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            items.read(inputStream);

            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockSlideshow{" +
                    "items=" + items +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockChannel extends ApiScheme.PageBlock {
        public static final int ID = 0xef1751b5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockChannel";
        public ApiScheme.Chat channel;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            channel.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channel = ApiScheme.Chat.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockChannel{" +
                    "channel=" + channel +
                    '}';

        }
    }


    public static class PageBlockAudio extends ApiScheme.PageBlock {
        public static final int ID = 0x804361ea;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockAudio";
        public long audioId;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(audioId);
            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            audioId = inputStream.readLong();
            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockAudio{" +
                    "audioId=" + audioId +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PageBlockKicker extends ApiScheme.PageBlock {
        public static final int ID = 0x1e148390;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockKicker";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockKicker{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageBlockTable extends ApiScheme.PageBlock {
        public static final int ID = 0xbf4dea82;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockTable";
        public int flags;
        public True bordered = null;
        public True striped = null;
        public ApiScheme.RichText title;
        public TLVector<ApiScheme.PageTableRow> rows;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = bordered != null ? (flags | 1) : (flags & ~1);
            flags = striped != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && bordered != null) {
                bordered.isBareType = true;
                bordered.write(outputStream);
            }

            if ((flags & 2) != 0 && striped != null) {
                striped.isBareType = true;
                striped.write(outputStream);
            }

            title.write(outputStream);

            rows.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                bordered = new True();
                bordered.isBareType = true;
                bordered.read(inputStream);
            }

            if ((flags & 2) != 0) {
                striped = new True();
                striped.isBareType = true;
                striped.read(inputStream);
            }

            title = ApiScheme.RichText.readObject(inputStream);
            rows = new TLVector<ApiScheme.PageTableRow>(ApiScheme.PageTableRow.class);
            rows.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageBlockTable{" +
                    "flags=" + flags +
                    ", bordered=" + bordered +
                    ", striped=" + striped +
                    ", title=" + title +
                    ", rows=" + rows +
                    '}';

        }
    }


    public static class PageBlockOrderedList extends ApiScheme.PageBlock {
        public static final int ID = 0x9a8ae1e1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockOrderedList";
        public TLVector<ApiScheme.PageListOrderedItem> items;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            items.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            items = new TLVector<ApiScheme.PageListOrderedItem>(ApiScheme.PageListOrderedItem.class);
            items.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageBlockOrderedList{" +
                    "items=" + items +
                    '}';

        }
    }


    public static class PageBlockDetails extends ApiScheme.PageBlock {
        public static final int ID = 0x76768bed;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockDetails";
        public int flags;
        public True open = null;
        public TLVector<ApiScheme.PageBlock> blocks;
        public ApiScheme.RichText title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = open != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && open != null) {
                open.isBareType = true;
                open.write(outputStream);
            }

            blocks.write(outputStream);

            title.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                open = new True();
                open.isBareType = true;
                open.read(inputStream);
            }

            blocks = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            blocks.read(inputStream);

            title = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockDetails{" +
                    "flags=" + flags +
                    ", open=" + open +
                    ", blocks=" + blocks +
                    ", title=" + title +
                    '}';

        }
    }


    public static class PageBlockRelatedArticles extends ApiScheme.PageBlock {
        public static final int ID = 0x16115a96;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockRelatedArticles";
        public ApiScheme.RichText title;
        public TLVector<ApiScheme.PageRelatedArticle> articles;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            title.write(outputStream);

            articles.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = ApiScheme.RichText.readObject(inputStream);
            articles = new TLVector<ApiScheme.PageRelatedArticle>(ApiScheme.PageRelatedArticle.class);
            articles.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageBlockRelatedArticles{" +
                    "title=" + title +
                    ", articles=" + articles +
                    '}';

        }
    }


    public static class PageBlockMap extends ApiScheme.PageBlock {
        public static final int ID = 0xa44f3ef6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageBlockMap";
        public ApiScheme.GeoPoint geo;
        public int zoom;
        public int w;
        public int h;
        public ApiScheme.PageCaption caption;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geo.write(outputStream);

            outputStream.writeInt(zoom);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            caption.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geo = ApiScheme.GeoPoint.readObject(inputStream);
            zoom = inputStream.readInt();
            w = inputStream.readInt();
            h = inputStream.readInt();
            caption = ApiScheme.PageCaption.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageBlockMap{" +
                    "geo=" + geo +
                    ", zoom=" + zoom +
                    ", w=" + w +
                    ", h=" + h +
                    ", caption=" + caption +
                    '}';

        }
    }


    public static class PhoneCallDiscardReasonMissed extends ApiScheme.PhoneCallDiscardReason {
        public static final int ID = 0x85e42301;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallDiscardReasonMissed";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PhoneCallDiscardReasonMissed{" +
                    '}';

        }
    }


    public static class PhoneCallDiscardReasonDisconnect extends ApiScheme.PhoneCallDiscardReason {
        public static final int ID = 0xe095c1a0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallDiscardReasonDisconnect";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PhoneCallDiscardReasonDisconnect{" +
                    '}';

        }
    }


    public static class PhoneCallDiscardReasonHangup extends ApiScheme.PhoneCallDiscardReason {
        public static final int ID = 0x57adc690;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallDiscardReasonHangup";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PhoneCallDiscardReasonHangup{" +
                    '}';

        }
    }


    public static class PhoneCallDiscardReasonBusy extends ApiScheme.PhoneCallDiscardReason {
        public static final int ID = 0xfaf7e8c9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallDiscardReasonBusy";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PhoneCallDiscardReasonBusy{" +
                    '}';

        }
    }


    public static class DataJSON2 extends ApiScheme.DataJSON {
        public static final int ID = 0x7d748d04;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dataJSON";
        public String data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(data);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            data = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "DataJSON{" +
                    "data=" + data +
                    '}';

        }
    }


    public static class LabeledPrice2 extends ApiScheme.LabeledPrice {
        public static final int ID = 0xcb296bf8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "labeledPrice";
        public String label;
        public long amount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(label);
            outputStream.writeLong(amount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            label = inputStream.readTLString();
            amount = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "LabeledPrice{" +
                    "label=" + label +
                    ", amount=" + amount +
                    '}';

        }
    }


    public static class Invoice2 extends ApiScheme.Invoice {
        public static final int ID = 0x3e85a91b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "invoice";
        public int flags;
        public True test = null;
        public True nameRequested = null;
        public True phoneRequested = null;
        public True emailRequested = null;
        public True shippingAddressRequested = null;
        public True flexible = null;
        public True phoneToProvider = null;
        public True emailToProvider = null;
        public True recurring = null;
        public String currency;
        public TLVector<ApiScheme.LabeledPrice> prices;
        public Long maxTipAmount = null;
        public TLVector<TLLong> suggestedTipAmounts = null;
        public String recurringTermsUrl = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = test != null ? (flags | 1) : (flags & ~1);
            flags = nameRequested != null ? (flags | 2) : (flags & ~2);
            flags = phoneRequested != null ? (flags | 4) : (flags & ~4);
            flags = emailRequested != null ? (flags | 8) : (flags & ~8);
            flags = shippingAddressRequested != null ? (flags | 16) : (flags & ~16);
            flags = flexible != null ? (flags | 32) : (flags & ~32);
            flags = phoneToProvider != null ? (flags | 64) : (flags & ~64);
            flags = emailToProvider != null ? (flags | 128) : (flags & ~128);
            flags = recurring != null ? (flags | 512) : (flags & ~512);
            flags = maxTipAmount != null ? (flags | 256) : (flags & ~256);
            flags = suggestedTipAmounts != null ? (flags | 256) : (flags & ~256);
            flags = recurringTermsUrl != null ? (flags | 512) : (flags & ~512);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && test != null) {
                test.isBareType = true;
                test.write(outputStream);
            }

            if ((flags & 2) != 0 && nameRequested != null) {
                nameRequested.isBareType = true;
                nameRequested.write(outputStream);
            }

            if ((flags & 4) != 0 && phoneRequested != null) {
                phoneRequested.isBareType = true;
                phoneRequested.write(outputStream);
            }

            if ((flags & 8) != 0 && emailRequested != null) {
                emailRequested.isBareType = true;
                emailRequested.write(outputStream);
            }

            if ((flags & 16) != 0 && shippingAddressRequested != null) {
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.write(outputStream);
            }

            if ((flags & 32) != 0 && flexible != null) {
                flexible.isBareType = true;
                flexible.write(outputStream);
            }

            if ((flags & 64) != 0 && phoneToProvider != null) {
                phoneToProvider.isBareType = true;
                phoneToProvider.write(outputStream);
            }

            if ((flags & 128) != 0 && emailToProvider != null) {
                emailToProvider.isBareType = true;
                emailToProvider.write(outputStream);
            }

            if ((flags & 512) != 0 && recurring != null) {
                recurring.isBareType = true;
                recurring.write(outputStream);
            }

            outputStream.writeTLString(currency);
            prices.write(outputStream);

            if ((flags & 256) != 0 && maxTipAmount != null) {
                outputStream.writeLong(maxTipAmount);
            }

            if ((flags & 256) != 0 && suggestedTipAmounts != null) {
                suggestedTipAmounts.isBareTypeItem = true;
                suggestedTipAmounts.write(outputStream);
            }

            if ((flags & 512) != 0 && recurringTermsUrl != null) {
                outputStream.writeTLString(recurringTermsUrl);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                test = new True();
                test.isBareType = true;
                test.read(inputStream);
            }

            if ((flags & 2) != 0) {
                nameRequested = new True();
                nameRequested.isBareType = true;
                nameRequested.read(inputStream);
            }

            if ((flags & 4) != 0) {
                phoneRequested = new True();
                phoneRequested.isBareType = true;
                phoneRequested.read(inputStream);
            }

            if ((flags & 8) != 0) {
                emailRequested = new True();
                emailRequested.isBareType = true;
                emailRequested.read(inputStream);
            }

            if ((flags & 16) != 0) {
                shippingAddressRequested = new True();
                shippingAddressRequested.isBareType = true;
                shippingAddressRequested.read(inputStream);
            }

            if ((flags & 32) != 0) {
                flexible = new True();
                flexible.isBareType = true;
                flexible.read(inputStream);
            }

            if ((flags & 64) != 0) {
                phoneToProvider = new True();
                phoneToProvider.isBareType = true;
                phoneToProvider.read(inputStream);
            }

            if ((flags & 128) != 0) {
                emailToProvider = new True();
                emailToProvider.isBareType = true;
                emailToProvider.read(inputStream);
            }

            if ((flags & 512) != 0) {
                recurring = new True();
                recurring.isBareType = true;
                recurring.read(inputStream);
            }

            currency = inputStream.readTLString();
            prices = new TLVector<ApiScheme.LabeledPrice>(ApiScheme.LabeledPrice.class);
            prices.read(inputStream);

            if ((flags & 256) != 0) {
                maxTipAmount = inputStream.readLong();
            }

            if ((flags & 256) != 0) {
                suggestedTipAmounts = new TLVector<TLLong>(TLLong.class);
                suggestedTipAmounts.isBareTypeItem = true;
                suggestedTipAmounts.read(inputStream);
            }

            if ((flags & 512) != 0) {
                recurringTermsUrl = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "Invoice{" +
                    "flags=" + flags +
                    ", test=" + test +
                    ", nameRequested=" + nameRequested +
                    ", phoneRequested=" + phoneRequested +
                    ", emailRequested=" + emailRequested +
                    ", shippingAddressRequested=" + shippingAddressRequested +
                    ", flexible=" + flexible +
                    ", phoneToProvider=" + phoneToProvider +
                    ", emailToProvider=" + emailToProvider +
                    ", recurring=" + recurring +
                    ", currency=" + currency +
                    ", prices=" + prices +
                    ", maxTipAmount=" + maxTipAmount +
                    ", suggestedTipAmounts=" + suggestedTipAmounts +
                    ", recurringTermsUrl=" + recurringTermsUrl +
                    '}';

        }
    }


    public static class PaymentCharge2 extends ApiScheme.PaymentCharge {
        public static final int ID = 0xea02c27e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "paymentCharge";
        public String id;
        public String providerChargeId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLString(providerChargeId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            providerChargeId = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PaymentCharge{" +
                    "id=" + id +
                    ", providerChargeId=" + providerChargeId +
                    '}';

        }
    }


    public static class PostAddress2 extends ApiScheme.PostAddress {
        public static final int ID = 0x1e8caaeb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "postAddress";
        public String streetLine1;
        public String streetLine2;
        public String city;
        public String state;
        public String countryIso2;
        public String postCode;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(streetLine1);
            outputStream.writeTLString(streetLine2);
            outputStream.writeTLString(city);
            outputStream.writeTLString(state);
            outputStream.writeTLString(countryIso2);
            outputStream.writeTLString(postCode);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            streetLine1 = inputStream.readTLString();
            streetLine2 = inputStream.readTLString();
            city = inputStream.readTLString();
            state = inputStream.readTLString();
            countryIso2 = inputStream.readTLString();
            postCode = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PostAddress{" +
                    "streetLine1=" + streetLine1 +
                    ", streetLine2=" + streetLine2 +
                    ", city=" + city +
                    ", state=" + state +
                    ", countryIso2=" + countryIso2 +
                    ", postCode=" + postCode +
                    '}';

        }
    }


    public static class PaymentRequestedInfo2 extends ApiScheme.PaymentRequestedInfo {
        public static final int ID = 0x909c3f94;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "paymentRequestedInfo";
        public int flags;
        public String name = null;
        public String phone = null;
        public String email = null;
        public ApiScheme.PostAddress shippingAddress = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = name != null ? (flags | 1) : (flags & ~1);
            flags = phone != null ? (flags | 2) : (flags & ~2);
            flags = email != null ? (flags | 4) : (flags & ~4);
            flags = shippingAddress != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && name != null) {
                outputStream.writeTLString(name);
            }

            if ((flags & 2) != 0 && phone != null) {
                outputStream.writeTLString(phone);
            }

            if ((flags & 4) != 0 && email != null) {
                outputStream.writeTLString(email);
            }

            if ((flags & 8) != 0 && shippingAddress != null) {
                shippingAddress.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                name = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                phone = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                email = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                shippingAddress = ApiScheme.PostAddress.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "PaymentRequestedInfo{" +
                    "flags=" + flags +
                    ", name=" + name +
                    ", phone=" + phone +
                    ", email=" + email +
                    ", shippingAddress=" + shippingAddress +
                    '}';

        }
    }


    public static class PaymentSavedCredentialsCard extends ApiScheme.PaymentSavedCredentials {
        public static final int ID = 0xcdc27a1f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "paymentSavedCredentialsCard";
        public String id;
        public String title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLString(title);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            title = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PaymentSavedCredentialsCard{" +
                    "id=" + id +
                    ", title=" + title +
                    '}';

        }
    }


    public static class WebDocument2 extends ApiScheme.WebDocument {
        public static final int ID = 0x1c570ed1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webDocument";
        public String url;
        public long accessHash;
        public int size;
        public String mimeType;
        public TLVector<ApiScheme.DocumentAttribute> attributes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(size);
            outputStream.writeTLString(mimeType);
            attributes.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            accessHash = inputStream.readLong();
            size = inputStream.readInt();
            mimeType = inputStream.readTLString();
            attributes = new TLVector<ApiScheme.DocumentAttribute>(ApiScheme.DocumentAttribute.class);
            attributes.read(inputStream);


        }

        @Override
        public String toString() {
            return "WebDocument{" +
                    "url=" + url +
                    ", accessHash=" + accessHash +
                    ", size=" + size +
                    ", mimeType=" + mimeType +
                    ", attributes=" + attributes +
                    '}';

        }
    }


    public static class WebDocumentNoProxy extends ApiScheme.WebDocument {
        public static final int ID = 0xf9c8bcc6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webDocumentNoProxy";
        public String url;
        public int size;
        public String mimeType;
        public TLVector<ApiScheme.DocumentAttribute> attributes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeInt(size);
            outputStream.writeTLString(mimeType);
            attributes.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            size = inputStream.readInt();
            mimeType = inputStream.readTLString();
            attributes = new TLVector<ApiScheme.DocumentAttribute>(ApiScheme.DocumentAttribute.class);
            attributes.read(inputStream);


        }

        @Override
        public String toString() {
            return "WebDocumentNoProxy{" +
                    "url=" + url +
                    ", size=" + size +
                    ", mimeType=" + mimeType +
                    ", attributes=" + attributes +
                    '}';

        }
    }


    public static class InputWebDocument2 extends ApiScheme.InputWebDocument {
        public static final int ID = 0x9bed434d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWebDocument";
        public String url;
        public int size;
        public String mimeType;
        public TLVector<ApiScheme.DocumentAttribute> attributes;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeInt(size);
            outputStream.writeTLString(mimeType);
            attributes.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            size = inputStream.readInt();
            mimeType = inputStream.readTLString();
            attributes = new TLVector<ApiScheme.DocumentAttribute>(ApiScheme.DocumentAttribute.class);
            attributes.read(inputStream);


        }

        @Override
        public String toString() {
            return "InputWebDocument{" +
                    "url=" + url +
                    ", size=" + size +
                    ", mimeType=" + mimeType +
                    ", attributes=" + attributes +
                    '}';

        }
    }


    public static class InputWebFileLocation2 extends ApiScheme.InputWebFileLocation {
        public static final int ID = 0xc239d686;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWebFileLocation";
        public String url;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputWebFileLocation{" +
                    "url=" + url +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputWebFileGeoPointLocation extends ApiScheme.InputWebFileLocation {
        public static final int ID = 0x9f2221c9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWebFileGeoPointLocation";
        public ApiScheme.InputGeoPoint geoPoint;
        public long accessHash;
        public int w;
        public int h;
        public int zoom;
        public int scale;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geoPoint.write(outputStream);

            outputStream.writeLong(accessHash);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            outputStream.writeInt(zoom);
            outputStream.writeInt(scale);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
            accessHash = inputStream.readLong();
            w = inputStream.readInt();
            h = inputStream.readInt();
            zoom = inputStream.readInt();
            scale = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputWebFileGeoPointLocation{" +
                    "geoPoint=" + geoPoint +
                    ", accessHash=" + accessHash +
                    ", w=" + w +
                    ", h=" + h +
                    ", zoom=" + zoom +
                    ", scale=" + scale +
                    '}';

        }
    }


    public static class InputWebFileAudioAlbumThumbLocation extends ApiScheme.InputWebFileLocation {
        public static final int ID = 0xf46fe924;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWebFileAudioAlbumThumbLocation";
        public int flags;
        public True small = null;
        public ApiScheme.InputDocument document = null;
        public String title = null;
        public String performer = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = small != null ? (flags | 4) : (flags & ~4);
            flags = document != null ? (flags | 1) : (flags & ~1);
            flags = title != null ? (flags | 2) : (flags & ~2);
            flags = performer != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && small != null) {
                small.isBareType = true;
                small.write(outputStream);
            }

            if ((flags & 1) != 0 && document != null) {
                document.write(outputStream);
            }

            if ((flags & 2) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 2) != 0 && performer != null) {
                outputStream.writeTLString(performer);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                small = new True();
                small.isBareType = true;
                small.read(inputStream);
            }

            if ((flags & 1) != 0) {
                document = ApiScheme.InputDocument.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                performer = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "InputWebFileAudioAlbumThumbLocation{" +
                    "flags=" + flags +
                    ", small=" + small +
                    ", document=" + document +
                    ", title=" + title +
                    ", performer=" + performer +
                    '}';

        }
    }


    public static class InputPaymentCredentialsSaved extends ApiScheme.InputPaymentCredentials {
        public static final int ID = 0xc10eb2cf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPaymentCredentialsSaved";
        public String id;
        public byte[] tmpPassword;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLBytes(tmpPassword);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            tmpPassword = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputPaymentCredentialsSaved{" +
                    "id=" + id +
                    ", tmpPassword=" + tmpPassword +
                    '}';

        }
    }


    public static class InputPaymentCredentials2 extends ApiScheme.InputPaymentCredentials {
        public static final int ID = 0x3417d728;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPaymentCredentials";
        public int flags;
        public True save = null;
        public ApiScheme.DataJSON data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = save != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && save != null) {
                save.isBareType = true;
                save.write(outputStream);
            }

            data.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                save = new True();
                save.isBareType = true;
                save.read(inputStream);
            }

            data = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputPaymentCredentials{" +
                    "flags=" + flags +
                    ", save=" + save +
                    ", data=" + data +
                    '}';

        }
    }


    public static class InputPaymentCredentialsApplePay extends ApiScheme.InputPaymentCredentials {
        public static final int ID = 0xaa1c39f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPaymentCredentialsApplePay";
        public ApiScheme.DataJSON paymentData;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            paymentData.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            paymentData = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputPaymentCredentialsApplePay{" +
                    "paymentData=" + paymentData +
                    '}';

        }
    }


    public static class InputPaymentCredentialsGooglePay extends ApiScheme.InputPaymentCredentials {
        public static final int ID = 0x8ac32801;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPaymentCredentialsGooglePay";
        public ApiScheme.DataJSON paymentToken;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            paymentToken.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            paymentToken = ApiScheme.DataJSON.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputPaymentCredentialsGooglePay{" +
                    "paymentToken=" + paymentToken +
                    '}';

        }
    }


    public static class ShippingOption2 extends ApiScheme.ShippingOption {
        public static final int ID = 0xb6213cdf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "shippingOption";
        public String id;
        public String title;
        public TLVector<ApiScheme.LabeledPrice> prices;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(id);
            outputStream.writeTLString(title);
            prices.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readTLString();
            title = inputStream.readTLString();
            prices = new TLVector<ApiScheme.LabeledPrice>(ApiScheme.LabeledPrice.class);
            prices.read(inputStream);


        }

        @Override
        public String toString() {
            return "ShippingOption{" +
                    "id=" + id +
                    ", title=" + title +
                    ", prices=" + prices +
                    '}';

        }
    }


    public static class InputStickerSetItem2 extends ApiScheme.InputStickerSetItem {
        public static final int ID = 0xffa0a496;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStickerSetItem";
        public int flags;
        public ApiScheme.InputDocument document;
        public String emoji;
        public ApiScheme.MaskCoords maskCoords = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = maskCoords != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            document.write(outputStream);

            outputStream.writeTLString(emoji);
            if ((flags & 1) != 0 && maskCoords != null) {
                maskCoords.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            document = ApiScheme.InputDocument.readObject(inputStream);
            emoji = inputStream.readTLString();
            if ((flags & 1) != 0) {
                maskCoords = ApiScheme.MaskCoords.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputStickerSetItem{" +
                    "flags=" + flags +
                    ", document=" + document +
                    ", emoji=" + emoji +
                    ", maskCoords=" + maskCoords +
                    '}';

        }
    }


    public static class InputPhoneCall2 extends ApiScheme.InputPhoneCall {
        public static final int ID = 0x1e36fded;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputPhoneCall";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputPhoneCall{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class PhoneCallEmpty extends ApiScheme.PhoneCall {
        public static final int ID = 0x5366c915;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallEmpty";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "PhoneCallEmpty{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class PhoneCallWaiting extends ApiScheme.PhoneCall {
        public static final int ID = 0xc5226f17;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallWaiting";
        public int flags;
        public True video = null;
        public long id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public ApiScheme.PhoneCallProtocol protocol;
        public Integer receiveDate = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = video != null ? (flags | 64) : (flags & ~64);
            flags = receiveDate != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 64) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            protocol.write(outputStream);

            if ((flags & 1) != 0 && receiveDate != null) {
                outputStream.writeInt(receiveDate);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 64) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);
            if ((flags & 1) != 0) {
                receiveDate = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "PhoneCallWaiting{" +
                    "flags=" + flags +
                    ", video=" + video +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", protocol=" + protocol +
                    ", receiveDate=" + receiveDate +
                    '}';

        }
    }


    public static class PhoneCallRequested extends ApiScheme.PhoneCall {
        public static final int ID = 0x14b0ed0c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallRequested";
        public int flags;
        public True video = null;
        public long id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public byte[] gAHash;
        public ApiScheme.PhoneCallProtocol protocol;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = video != null ? (flags | 64) : (flags & ~64);
            outputStream.writeInt(flags);
            if ((flags & 64) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            outputStream.writeTLBytes(gAHash);
            protocol.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 64) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            gAHash = inputStream.readTLBytes();
            protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PhoneCallRequested{" +
                    "flags=" + flags +
                    ", video=" + video +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", gAHash=" + gAHash +
                    ", protocol=" + protocol +
                    '}';

        }
    }


    public static class PhoneCallAccepted extends ApiScheme.PhoneCall {
        public static final int ID = 0x3660c311;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallAccepted";
        public int flags;
        public True video = null;
        public long id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public byte[] gB;
        public ApiScheme.PhoneCallProtocol protocol;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = video != null ? (flags | 64) : (flags & ~64);
            outputStream.writeInt(flags);
            if ((flags & 64) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            outputStream.writeTLBytes(gB);
            protocol.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 64) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            gB = inputStream.readTLBytes();
            protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PhoneCallAccepted{" +
                    "flags=" + flags +
                    ", video=" + video +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", gB=" + gB +
                    ", protocol=" + protocol +
                    '}';

        }
    }


    public static class PhoneCall2 extends ApiScheme.PhoneCall {
        public static final int ID = 0x967f7c67;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCall";
        public int flags;
        public True p2pAllowed = null;
        public True video = null;
        public long id;
        public long accessHash;
        public int date;
        public long adminId;
        public long participantId;
        public byte[] gAOrB;
        public long keyFingerprint;
        public ApiScheme.PhoneCallProtocol protocol;
        public TLVector<ApiScheme.PhoneConnection> connections;
        public int startDate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = p2pAllowed != null ? (flags | 32) : (flags & ~32);
            flags = video != null ? (flags | 64) : (flags & ~64);
            outputStream.writeInt(flags);
            if ((flags & 32) != 0 && p2pAllowed != null) {
                p2pAllowed.isBareType = true;
                p2pAllowed.write(outputStream);
            }

            if ((flags & 64) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(date);
            outputStream.writeLong(adminId);
            outputStream.writeLong(participantId);
            outputStream.writeTLBytes(gAOrB);
            outputStream.writeLong(keyFingerprint);
            protocol.write(outputStream);

            connections.write(outputStream);

            outputStream.writeInt(startDate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 32) != 0) {
                p2pAllowed = new True();
                p2pAllowed.isBareType = true;
                p2pAllowed.read(inputStream);
            }

            if ((flags & 64) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            date = inputStream.readInt();
            adminId = inputStream.readLong();
            participantId = inputStream.readLong();
            gAOrB = inputStream.readTLBytes();
            keyFingerprint = inputStream.readLong();
            protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);
            connections = new TLVector<ApiScheme.PhoneConnection>(ApiScheme.PhoneConnection.class);
            connections.read(inputStream);

            startDate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PhoneCall{" +
                    "flags=" + flags +
                    ", p2pAllowed=" + p2pAllowed +
                    ", video=" + video +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", date=" + date +
                    ", adminId=" + adminId +
                    ", participantId=" + participantId +
                    ", gAOrB=" + gAOrB +
                    ", keyFingerprint=" + keyFingerprint +
                    ", protocol=" + protocol +
                    ", connections=" + connections +
                    ", startDate=" + startDate +
                    '}';

        }
    }


    public static class PhoneCallDiscarded extends ApiScheme.PhoneCall {
        public static final int ID = 0x50ca4de1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallDiscarded";
        public int flags;
        public True needRating = null;
        public True needDebug = null;
        public True video = null;
        public long id;
        public ApiScheme.PhoneCallDiscardReason reason = null;
        public Integer duration = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = needRating != null ? (flags | 4) : (flags & ~4);
            flags = needDebug != null ? (flags | 8) : (flags & ~8);
            flags = video != null ? (flags | 64) : (flags & ~64);
            flags = reason != null ? (flags | 1) : (flags & ~1);
            flags = duration != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && needRating != null) {
                needRating.isBareType = true;
                needRating.write(outputStream);
            }

            if ((flags & 8) != 0 && needDebug != null) {
                needDebug.isBareType = true;
                needDebug.write(outputStream);
            }

            if ((flags & 64) != 0 && video != null) {
                video.isBareType = true;
                video.write(outputStream);
            }

            outputStream.writeLong(id);
            if ((flags & 1) != 0 && reason != null) {
                reason.write(outputStream);
            }

            if ((flags & 2) != 0 && duration != null) {
                outputStream.writeInt(duration);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                needRating = new True();
                needRating.isBareType = true;
                needRating.read(inputStream);
            }

            if ((flags & 8) != 0) {
                needDebug = new True();
                needDebug.isBareType = true;
                needDebug.read(inputStream);
            }

            if ((flags & 64) != 0) {
                video = new True();
                video.isBareType = true;
                video.read(inputStream);
            }

            id = inputStream.readLong();
            if ((flags & 1) != 0) {
                reason = ApiScheme.PhoneCallDiscardReason.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                duration = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "PhoneCallDiscarded{" +
                    "flags=" + flags +
                    ", needRating=" + needRating +
                    ", needDebug=" + needDebug +
                    ", video=" + video +
                    ", id=" + id +
                    ", reason=" + reason +
                    ", duration=" + duration +
                    '}';

        }
    }


    public static class PhoneConnection2 extends ApiScheme.PhoneConnection {
        public static final int ID = 0x9cc123c7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneConnection";
        public int flags;
        public True tcp = null;
        public long id;
        public String ip;
        public String ipv6;
        public int port;
        public byte[] peerTag;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = tcp != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && tcp != null) {
                tcp.isBareType = true;
                tcp.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeTLString(ip);
            outputStream.writeTLString(ipv6);
            outputStream.writeInt(port);
            outputStream.writeTLBytes(peerTag);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                tcp = new True();
                tcp.isBareType = true;
                tcp.read(inputStream);
            }

            id = inputStream.readLong();
            ip = inputStream.readTLString();
            ipv6 = inputStream.readTLString();
            port = inputStream.readInt();
            peerTag = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PhoneConnection{" +
                    "flags=" + flags +
                    ", tcp=" + tcp +
                    ", id=" + id +
                    ", ip=" + ip +
                    ", ipv6=" + ipv6 +
                    ", port=" + port +
                    ", peerTag=" + peerTag +
                    '}';

        }
    }


    public static class PhoneConnectionWebrtc extends ApiScheme.PhoneConnection {
        public static final int ID = 0x635fe375;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneConnectionWebrtc";
        public int flags;
        public True turn = null;
        public True stun = null;
        public long id;
        public String ip;
        public String ipv6;
        public int port;
        public String username;
        public String password;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = turn != null ? (flags | 1) : (flags & ~1);
            flags = stun != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && turn != null) {
                turn.isBareType = true;
                turn.write(outputStream);
            }

            if ((flags & 2) != 0 && stun != null) {
                stun.isBareType = true;
                stun.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeTLString(ip);
            outputStream.writeTLString(ipv6);
            outputStream.writeInt(port);
            outputStream.writeTLString(username);
            outputStream.writeTLString(password);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                turn = new True();
                turn.isBareType = true;
                turn.read(inputStream);
            }

            if ((flags & 2) != 0) {
                stun = new True();
                stun.isBareType = true;
                stun.read(inputStream);
            }

            id = inputStream.readLong();
            ip = inputStream.readTLString();
            ipv6 = inputStream.readTLString();
            port = inputStream.readInt();
            username = inputStream.readTLString();
            password = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PhoneConnectionWebrtc{" +
                    "flags=" + flags +
                    ", turn=" + turn +
                    ", stun=" + stun +
                    ", id=" + id +
                    ", ip=" + ip +
                    ", ipv6=" + ipv6 +
                    ", port=" + port +
                    ", username=" + username +
                    ", password=" + password +
                    '}';

        }
    }


    public static class PhoneCallProtocol2 extends ApiScheme.PhoneCallProtocol {
        public static final int ID = 0xfc878fc8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "phoneCallProtocol";
        public int flags;
        public True udpP2p = null;
        public True udpReflector = null;
        public int minLayer;
        public int maxLayer;
        public TLVector<TLString> libraryVersions;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = udpP2p != null ? (flags | 1) : (flags & ~1);
            flags = udpReflector != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && udpP2p != null) {
                udpP2p.isBareType = true;
                udpP2p.write(outputStream);
            }

            if ((flags & 2) != 0 && udpReflector != null) {
                udpReflector.isBareType = true;
                udpReflector.write(outputStream);
            }

            outputStream.writeInt(minLayer);
            outputStream.writeInt(maxLayer);
            libraryVersions.isBareTypeItem = true;
            libraryVersions.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                udpP2p = new True();
                udpP2p.isBareType = true;
                udpP2p.read(inputStream);
            }

            if ((flags & 2) != 0) {
                udpReflector = new True();
                udpReflector.isBareType = true;
                udpReflector.read(inputStream);
            }

            minLayer = inputStream.readInt();
            maxLayer = inputStream.readInt();
            libraryVersions = new TLVector<TLString>(TLString.class);
            libraryVersions.isBareTypeItem = true;
            libraryVersions.read(inputStream);


        }

        @Override
        public String toString() {
            return "PhoneCallProtocol{" +
                    "flags=" + flags +
                    ", udpP2p=" + udpP2p +
                    ", udpReflector=" + udpReflector +
                    ", minLayer=" + minLayer +
                    ", maxLayer=" + maxLayer +
                    ", libraryVersions=" + libraryVersions +
                    '}';

        }
    }


    public static class CdnPublicKey2 extends ApiScheme.CdnPublicKey {
        public static final int ID = 0xc982eaba;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "cdnPublicKey";
        public int dcId;
        public String publicKey;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(dcId);
            outputStream.writeTLString(publicKey);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            dcId = inputStream.readInt();
            publicKey = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "CdnPublicKey{" +
                    "dcId=" + dcId +
                    ", publicKey=" + publicKey +
                    '}';

        }
    }


    public static class CdnConfig2 extends ApiScheme.CdnConfig {
        public static final int ID = 0x5725e40a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "cdnConfig";
        public TLVector<ApiScheme.CdnPublicKey> publicKeys;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            publicKeys.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            publicKeys = new TLVector<ApiScheme.CdnPublicKey>(ApiScheme.CdnPublicKey.class);
            publicKeys.read(inputStream);


        }

        @Override
        public String toString() {
            return "CdnConfig{" +
                    "publicKeys=" + publicKeys +
                    '}';

        }
    }


    public static class LangPackString2 extends ApiScheme.LangPackString {
        public static final int ID = 0xcad181f6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "langPackString";
        public String key;
        public String value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(key);
            outputStream.writeTLString(value);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            key = inputStream.readTLString();
            value = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "LangPackString{" +
                    "key=" + key +
                    ", value=" + value +
                    '}';

        }
    }


    public static class LangPackStringPluralized extends ApiScheme.LangPackString {
        public static final int ID = 0x6c47ac9f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "langPackStringPluralized";
        public int flags;
        public String key;
        public String zeroValue = null;
        public String oneValue = null;
        public String twoValue = null;
        public String fewValue = null;
        public String manyValue = null;
        public String otherValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = zeroValue != null ? (flags | 1) : (flags & ~1);
            flags = oneValue != null ? (flags | 2) : (flags & ~2);
            flags = twoValue != null ? (flags | 4) : (flags & ~4);
            flags = fewValue != null ? (flags | 8) : (flags & ~8);
            flags = manyValue != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            outputStream.writeTLString(key);
            if ((flags & 1) != 0 && zeroValue != null) {
                outputStream.writeTLString(zeroValue);
            }

            if ((flags & 2) != 0 && oneValue != null) {
                outputStream.writeTLString(oneValue);
            }

            if ((flags & 4) != 0 && twoValue != null) {
                outputStream.writeTLString(twoValue);
            }

            if ((flags & 8) != 0 && fewValue != null) {
                outputStream.writeTLString(fewValue);
            }

            if ((flags & 16) != 0 && manyValue != null) {
                outputStream.writeTLString(manyValue);
            }

            outputStream.writeTLString(otherValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            key = inputStream.readTLString();
            if ((flags & 1) != 0) {
                zeroValue = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                oneValue = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                twoValue = inputStream.readTLString();
            }

            if ((flags & 8) != 0) {
                fewValue = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                manyValue = inputStream.readTLString();
            }

            otherValue = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "LangPackStringPluralized{" +
                    "flags=" + flags +
                    ", key=" + key +
                    ", zeroValue=" + zeroValue +
                    ", oneValue=" + oneValue +
                    ", twoValue=" + twoValue +
                    ", fewValue=" + fewValue +
                    ", manyValue=" + manyValue +
                    ", otherValue=" + otherValue +
                    '}';

        }
    }


    public static class LangPackStringDeleted extends ApiScheme.LangPackString {
        public static final int ID = 0x2979eeb2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "langPackStringDeleted";
        public String key;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(key);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            key = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "LangPackStringDeleted{" +
                    "key=" + key +
                    '}';

        }
    }


    public static class LangPackDifference2 extends ApiScheme.LangPackDifference {
        public static final int ID = 0xf385c1f6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "langPackDifference";
        public String langCode;
        public int fromVersion;
        public int version;
        public TLVector<ApiScheme.LangPackString> strings;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(langCode);
            outputStream.writeInt(fromVersion);
            outputStream.writeInt(version);
            strings.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            langCode = inputStream.readTLString();
            fromVersion = inputStream.readInt();
            version = inputStream.readInt();
            strings = new TLVector<ApiScheme.LangPackString>(ApiScheme.LangPackString.class);
            strings.read(inputStream);


        }

        @Override
        public String toString() {
            return "LangPackDifference{" +
                    "langCode=" + langCode +
                    ", fromVersion=" + fromVersion +
                    ", version=" + version +
                    ", strings=" + strings +
                    '}';

        }
    }


    public static class LangPackLanguage2 extends ApiScheme.LangPackLanguage {
        public static final int ID = 0xeeca5ce3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "langPackLanguage";
        public int flags;
        public True official = null;
        public True rtl = null;
        public True beta = null;
        public String name;
        public String nativeName;
        public String langCode;
        public String baseLangCode = null;
        public String pluralCode;
        public int stringsCount;
        public int translatedCount;
        public String translationsUrl;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = official != null ? (flags | 1) : (flags & ~1);
            flags = rtl != null ? (flags | 4) : (flags & ~4);
            flags = beta != null ? (flags | 8) : (flags & ~8);
            flags = baseLangCode != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && official != null) {
                official.isBareType = true;
                official.write(outputStream);
            }

            if ((flags & 4) != 0 && rtl != null) {
                rtl.isBareType = true;
                rtl.write(outputStream);
            }

            if ((flags & 8) != 0 && beta != null) {
                beta.isBareType = true;
                beta.write(outputStream);
            }

            outputStream.writeTLString(name);
            outputStream.writeTLString(nativeName);
            outputStream.writeTLString(langCode);
            if ((flags & 2) != 0 && baseLangCode != null) {
                outputStream.writeTLString(baseLangCode);
            }

            outputStream.writeTLString(pluralCode);
            outputStream.writeInt(stringsCount);
            outputStream.writeInt(translatedCount);
            outputStream.writeTLString(translationsUrl);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                official = new True();
                official.isBareType = true;
                official.read(inputStream);
            }

            if ((flags & 4) != 0) {
                rtl = new True();
                rtl.isBareType = true;
                rtl.read(inputStream);
            }

            if ((flags & 8) != 0) {
                beta = new True();
                beta.isBareType = true;
                beta.read(inputStream);
            }

            name = inputStream.readTLString();
            nativeName = inputStream.readTLString();
            langCode = inputStream.readTLString();
            if ((flags & 2) != 0) {
                baseLangCode = inputStream.readTLString();
            }

            pluralCode = inputStream.readTLString();
            stringsCount = inputStream.readInt();
            translatedCount = inputStream.readInt();
            translationsUrl = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "LangPackLanguage{" +
                    "flags=" + flags +
                    ", official=" + official +
                    ", rtl=" + rtl +
                    ", beta=" + beta +
                    ", name=" + name +
                    ", nativeName=" + nativeName +
                    ", langCode=" + langCode +
                    ", baseLangCode=" + baseLangCode +
                    ", pluralCode=" + pluralCode +
                    ", stringsCount=" + stringsCount +
                    ", translatedCount=" + translatedCount +
                    ", translationsUrl=" + translationsUrl +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeTitle extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe6dfb825;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeTitle";
        public String prevValue;
        public String newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(prevValue);
            outputStream.writeTLString(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readTLString();
            newValue = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeTitle{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeAbout extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x55188a2e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeAbout";
        public String prevValue;
        public String newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(prevValue);
            outputStream.writeTLString(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readTLString();
            newValue = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeAbout{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeUsername extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x6a4afc38;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeUsername";
        public String prevValue;
        public String newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(prevValue);
            outputStream.writeTLString(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readTLString();
            newValue = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeUsername{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangePhoto extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x434bd2af;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangePhoto";
        public ApiScheme.Photo prevPhoto;
        public ApiScheme.Photo newPhoto;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevPhoto.write(outputStream);

            newPhoto.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevPhoto = ApiScheme.Photo.readObject(inputStream);
            newPhoto = ApiScheme.Photo.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangePhoto{" +
                    "prevPhoto=" + prevPhoto +
                    ", newPhoto=" + newPhoto +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionToggleInvites extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x1b7907ae;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionToggleInvites";
        public ApiScheme.Bool newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            newValue = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionToggleInvites{" +
                    "newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionToggleSignatures extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x26ae0971;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionToggleSignatures";
        public ApiScheme.Bool newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            newValue = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionToggleSignatures{" +
                    "newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionUpdatePinned extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe9e82c18;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionUpdatePinned";
        public ApiScheme.Message message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionUpdatePinned{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionEditMessage extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x709b2405;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionEditMessage";
        public ApiScheme.Message prevMessage;
        public ApiScheme.Message newMessage;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevMessage.write(outputStream);

            newMessage.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevMessage = ApiScheme.Message.readObject(inputStream);
            newMessage = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionEditMessage{" +
                    "prevMessage=" + prevMessage +
                    ", newMessage=" + newMessage +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionDeleteMessage extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x42e047bb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionDeleteMessage";
        public ApiScheme.Message message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionDeleteMessage{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantJoin extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x183040d3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantJoin";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantJoin{" +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantLeave extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xf89777f2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantLeave";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantLeave{" +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantInvite extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe31c34d8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantInvite";
        public ApiScheme.ChannelParticipant participant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            participant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            participant = ApiScheme.ChannelParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantInvite{" +
                    "participant=" + participant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantToggleBan extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe6d83d7e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantToggleBan";
        public ApiScheme.ChannelParticipant prevParticipant;
        public ApiScheme.ChannelParticipant newParticipant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevParticipant.write(outputStream);

            newParticipant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);
            newParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantToggleBan{" +
                    "prevParticipant=" + prevParticipant +
                    ", newParticipant=" + newParticipant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantToggleAdmin extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xd5676710;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantToggleAdmin";
        public ApiScheme.ChannelParticipant prevParticipant;
        public ApiScheme.ChannelParticipant newParticipant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevParticipant.write(outputStream);

            newParticipant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);
            newParticipant = ApiScheme.ChannelParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantToggleAdmin{" +
                    "prevParticipant=" + prevParticipant +
                    ", newParticipant=" + newParticipant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeStickerSet extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xb1c3caa7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeStickerSet";
        public ApiScheme.InputStickerSet prevStickerset;
        public ApiScheme.InputStickerSet newStickerset;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevStickerset.write(outputStream);

            newStickerset.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevStickerset = ApiScheme.InputStickerSet.readObject(inputStream);
            newStickerset = ApiScheme.InputStickerSet.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeStickerSet{" +
                    "prevStickerset=" + prevStickerset +
                    ", newStickerset=" + newStickerset +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionTogglePreHistoryHidden extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x5f5c95f1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionTogglePreHistoryHidden";
        public ApiScheme.Bool newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            newValue = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionTogglePreHistoryHidden{" +
                    "newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionDefaultBannedRights extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x2df5fc0a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionDefaultBannedRights";
        public ApiScheme.ChatBannedRights prevBannedRights;
        public ApiScheme.ChatBannedRights newBannedRights;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevBannedRights.write(outputStream);

            newBannedRights.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevBannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);
            newBannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionDefaultBannedRights{" +
                    "prevBannedRights=" + prevBannedRights +
                    ", newBannedRights=" + newBannedRights +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionStopPoll extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x8f079643;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionStopPoll";
        public ApiScheme.Message message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionStopPoll{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeLinkedChat extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x50c7ac8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeLinkedChat";
        public long prevValue;
        public long newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(prevValue);
            outputStream.writeLong(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readLong();
            newValue = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeLinkedChat{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeLocation extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe6b76ae;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeLocation";
        public ApiScheme.ChannelLocation prevValue;
        public ApiScheme.ChannelLocation newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevValue.write(outputStream);

            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = ApiScheme.ChannelLocation.readObject(inputStream);
            newValue = ApiScheme.ChannelLocation.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeLocation{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionToggleSlowMode extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x53909779;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionToggleSlowMode";
        public int prevValue;
        public int newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(prevValue);
            outputStream.writeInt(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readInt();
            newValue = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionToggleSlowMode{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionStartGroupCall extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x23209745;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionStartGroupCall";
        public ApiScheme.InputGroupCall call;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            call.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            call = ApiScheme.InputGroupCall.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionStartGroupCall{" +
                    "call=" + call +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionDiscardGroupCall extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xdb9f9140;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionDiscardGroupCall";
        public ApiScheme.InputGroupCall call;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            call.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            call = ApiScheme.InputGroupCall.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionDiscardGroupCall{" +
                    "call=" + call +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantMute extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xf92424d2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantMute";
        public ApiScheme.GroupCallParticipant participant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            participant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            participant = ApiScheme.GroupCallParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantMute{" +
                    "participant=" + participant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantUnmute extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe64429c0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantUnmute";
        public ApiScheme.GroupCallParticipant participant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            participant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            participant = ApiScheme.GroupCallParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantUnmute{" +
                    "participant=" + participant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionToggleGroupCallSetting extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x56d6a247;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionToggleGroupCallSetting";
        public ApiScheme.Bool joinMuted;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            joinMuted.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            joinMuted = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionToggleGroupCallSetting{" +
                    "joinMuted=" + joinMuted +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantJoinByInvite extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x5cdada77;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantJoinByInvite";
        public ApiScheme.ExportedChatInvite invite;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            invite.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            invite = ApiScheme.ExportedChatInvite.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantJoinByInvite{" +
                    "invite=" + invite +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionExportedInviteDelete extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x5a50fca4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionExportedInviteDelete";
        public ApiScheme.ExportedChatInvite invite;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            invite.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            invite = ApiScheme.ExportedChatInvite.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionExportedInviteDelete{" +
                    "invite=" + invite +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionExportedInviteRevoke extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x410a134e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionExportedInviteRevoke";
        public ApiScheme.ExportedChatInvite invite;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            invite.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            invite = ApiScheme.ExportedChatInvite.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionExportedInviteRevoke{" +
                    "invite=" + invite +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionExportedInviteEdit extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xe90ebb59;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionExportedInviteEdit";
        public ApiScheme.ExportedChatInvite prevInvite;
        public ApiScheme.ExportedChatInvite newInvite;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevInvite.write(outputStream);

            newInvite.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevInvite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            newInvite = ApiScheme.ExportedChatInvite.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionExportedInviteEdit{" +
                    "prevInvite=" + prevInvite +
                    ", newInvite=" + newInvite +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantVolume extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x3e7f6847;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantVolume";
        public ApiScheme.GroupCallParticipant participant;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            participant.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            participant = ApiScheme.GroupCallParticipant.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantVolume{" +
                    "participant=" + participant +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeHistoryTTL extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x6e941a38;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeHistoryTTL";
        public int prevValue;
        public int newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(prevValue);
            outputStream.writeInt(newValue);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = inputStream.readInt();
            newValue = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeHistoryTTL{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionParticipantJoinByRequest extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xafb6144a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionParticipantJoinByRequest";
        public ApiScheme.ExportedChatInvite invite;
        public long approvedBy;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            invite.write(outputStream);

            outputStream.writeLong(approvedBy);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
            approvedBy = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionParticipantJoinByRequest{" +
                    "invite=" + invite +
                    ", approvedBy=" + approvedBy +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionToggleNoForwards extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0xcb2ac766;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionToggleNoForwards";
        public ApiScheme.Bool newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            newValue = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionToggleNoForwards{" +
                    "newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionSendMessage extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x278f2868;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionSendMessage";
        public ApiScheme.Message message;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            message.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            message = ApiScheme.Message.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionSendMessage{" +
                    "message=" + message +
                    '}';

        }
    }


    public static class ChannelAdminLogEventActionChangeAvailableReactions extends ApiScheme.ChannelAdminLogEventAction {
        public static final int ID = 0x9cf7f76a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventActionChangeAvailableReactions";
        public TLVector<TLString> prevValue;
        public TLVector<TLString> newValue;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            prevValue.isBareTypeItem = true;
            prevValue.write(outputStream);

            newValue.isBareTypeItem = true;
            newValue.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            prevValue = new TLVector<TLString>(TLString.class);
            prevValue.isBareTypeItem = true;
            prevValue.read(inputStream);

            newValue = new TLVector<TLString>(TLString.class);
            newValue.isBareTypeItem = true;
            newValue.read(inputStream);


        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventActionChangeAvailableReactions{" +
                    "prevValue=" + prevValue +
                    ", newValue=" + newValue +
                    '}';

        }
    }


    public static class ChannelAdminLogEvent2 extends ApiScheme.ChannelAdminLogEvent {
        public static final int ID = 0x1fad68cd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEvent";
        public long id;
        public int date;
        public long userId;
        public ApiScheme.ChannelAdminLogEventAction action;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(date);
            outputStream.writeLong(userId);
            action.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            date = inputStream.readInt();
            userId = inputStream.readLong();
            action = ApiScheme.ChannelAdminLogEventAction.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "ChannelAdminLogEvent{" +
                    "id=" + id +
                    ", date=" + date +
                    ", userId=" + userId +
                    ", action=" + action +
                    '}';

        }
    }


    public static class ChannelAdminLogEventsFilter2 extends ApiScheme.ChannelAdminLogEventsFilter {
        public static final int ID = 0xea107ae4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelAdminLogEventsFilter";
        public int flags;
        public True join = null;
        public True leave = null;
        public True invite = null;
        public True ban = null;
        public True unban = null;
        public True kick = null;
        public True unkick = null;
        public True promote = null;
        public True demote = null;
        public True info = null;
        public True settings = null;
        public True pinned = null;
        public True edit = null;
        public True delete = null;
        public True groupCall = null;
        public True invites = null;
        public True send = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = join != null ? (flags | 1) : (flags & ~1);
            flags = leave != null ? (flags | 2) : (flags & ~2);
            flags = invite != null ? (flags | 4) : (flags & ~4);
            flags = ban != null ? (flags | 8) : (flags & ~8);
            flags = unban != null ? (flags | 16) : (flags & ~16);
            flags = kick != null ? (flags | 32) : (flags & ~32);
            flags = unkick != null ? (flags | 64) : (flags & ~64);
            flags = promote != null ? (flags | 128) : (flags & ~128);
            flags = demote != null ? (flags | 256) : (flags & ~256);
            flags = info != null ? (flags | 512) : (flags & ~512);
            flags = settings != null ? (flags | 1024) : (flags & ~1024);
            flags = pinned != null ? (flags | 2048) : (flags & ~2048);
            flags = edit != null ? (flags | 4096) : (flags & ~4096);
            flags = delete != null ? (flags | 8192) : (flags & ~8192);
            flags = groupCall != null ? (flags | 16384) : (flags & ~16384);
            flags = invites != null ? (flags | 32768) : (flags & ~32768);
            flags = send != null ? (flags | 65536) : (flags & ~65536);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && join != null) {
                join.isBareType = true;
                join.write(outputStream);
            }

            if ((flags & 2) != 0 && leave != null) {
                leave.isBareType = true;
                leave.write(outputStream);
            }

            if ((flags & 4) != 0 && invite != null) {
                invite.isBareType = true;
                invite.write(outputStream);
            }

            if ((flags & 8) != 0 && ban != null) {
                ban.isBareType = true;
                ban.write(outputStream);
            }

            if ((flags & 16) != 0 && unban != null) {
                unban.isBareType = true;
                unban.write(outputStream);
            }

            if ((flags & 32) != 0 && kick != null) {
                kick.isBareType = true;
                kick.write(outputStream);
            }

            if ((flags & 64) != 0 && unkick != null) {
                unkick.isBareType = true;
                unkick.write(outputStream);
            }

            if ((flags & 128) != 0 && promote != null) {
                promote.isBareType = true;
                promote.write(outputStream);
            }

            if ((flags & 256) != 0 && demote != null) {
                demote.isBareType = true;
                demote.write(outputStream);
            }

            if ((flags & 512) != 0 && info != null) {
                info.isBareType = true;
                info.write(outputStream);
            }

            if ((flags & 1024) != 0 && settings != null) {
                settings.isBareType = true;
                settings.write(outputStream);
            }

            if ((flags & 2048) != 0 && pinned != null) {
                pinned.isBareType = true;
                pinned.write(outputStream);
            }

            if ((flags & 4096) != 0 && edit != null) {
                edit.isBareType = true;
                edit.write(outputStream);
            }

            if ((flags & 8192) != 0 && delete != null) {
                delete.isBareType = true;
                delete.write(outputStream);
            }

            if ((flags & 16384) != 0 && groupCall != null) {
                groupCall.isBareType = true;
                groupCall.write(outputStream);
            }

            if ((flags & 32768) != 0 && invites != null) {
                invites.isBareType = true;
                invites.write(outputStream);
            }

            if ((flags & 65536) != 0 && send != null) {
                send.isBareType = true;
                send.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                join = new True();
                join.isBareType = true;
                join.read(inputStream);
            }

            if ((flags & 2) != 0) {
                leave = new True();
                leave.isBareType = true;
                leave.read(inputStream);
            }

            if ((flags & 4) != 0) {
                invite = new True();
                invite.isBareType = true;
                invite.read(inputStream);
            }

            if ((flags & 8) != 0) {
                ban = new True();
                ban.isBareType = true;
                ban.read(inputStream);
            }

            if ((flags & 16) != 0) {
                unban = new True();
                unban.isBareType = true;
                unban.read(inputStream);
            }

            if ((flags & 32) != 0) {
                kick = new True();
                kick.isBareType = true;
                kick.read(inputStream);
            }

            if ((flags & 64) != 0) {
                unkick = new True();
                unkick.isBareType = true;
                unkick.read(inputStream);
            }

            if ((flags & 128) != 0) {
                promote = new True();
                promote.isBareType = true;
                promote.read(inputStream);
            }

            if ((flags & 256) != 0) {
                demote = new True();
                demote.isBareType = true;
                demote.read(inputStream);
            }

            if ((flags & 512) != 0) {
                info = new True();
                info.isBareType = true;
                info.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                settings = new True();
                settings.isBareType = true;
                settings.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                pinned = new True();
                pinned.isBareType = true;
                pinned.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                edit = new True();
                edit.isBareType = true;
                edit.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                delete = new True();
                delete.isBareType = true;
                delete.read(inputStream);
            }

            if ((flags & 16384) != 0) {
                groupCall = new True();
                groupCall.isBareType = true;
                groupCall.read(inputStream);
            }

            if ((flags & 32768) != 0) {
                invites = new True();
                invites.isBareType = true;
                invites.read(inputStream);
            }

            if ((flags & 65536) != 0) {
                send = new True();
                send.isBareType = true;
                send.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChannelAdminLogEventsFilter{" +
                    "flags=" + flags +
                    ", join=" + join +
                    ", leave=" + leave +
                    ", invite=" + invite +
                    ", ban=" + ban +
                    ", unban=" + unban +
                    ", kick=" + kick +
                    ", unkick=" + unkick +
                    ", promote=" + promote +
                    ", demote=" + demote +
                    ", info=" + info +
                    ", settings=" + settings +
                    ", pinned=" + pinned +
                    ", edit=" + edit +
                    ", delete=" + delete +
                    ", groupCall=" + groupCall +
                    ", invites=" + invites +
                    ", send=" + send +
                    '}';

        }
    }


    public static class PopularContact2 extends ApiScheme.PopularContact {
        public static final int ID = 0x5ce14175;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "popularContact";
        public long clientId;
        public int importers;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(clientId);
            outputStream.writeInt(importers);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            clientId = inputStream.readLong();
            importers = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PopularContact{" +
                    "clientId=" + clientId +
                    ", importers=" + importers +
                    '}';

        }
    }


    public static class RecentMeUrlUnknown extends ApiScheme.RecentMeUrl {
        public static final int ID = 0x46e1d13d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "recentMeUrlUnknown";
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "RecentMeUrlUnknown{" +
                    "url=" + url +
                    '}';

        }
    }


    public static class RecentMeUrlUser extends ApiScheme.RecentMeUrl {
        public static final int ID = 0xb92c09e2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "recentMeUrlUser";
        public String url;
        public long userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeLong(userId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            userId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "RecentMeUrlUser{" +
                    "url=" + url +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class RecentMeUrlChat extends ApiScheme.RecentMeUrl {
        public static final int ID = 0xb2da71d2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "recentMeUrlChat";
        public String url;
        public long chatId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeLong(chatId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            chatId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "RecentMeUrlChat{" +
                    "url=" + url +
                    ", chatId=" + chatId +
                    '}';

        }
    }


    public static class RecentMeUrlChatInvite extends ApiScheme.RecentMeUrl {
        public static final int ID = 0xeb49081d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "recentMeUrlChatInvite";
        public String url;
        public ApiScheme.ChatInvite chatInvite;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            chatInvite.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            chatInvite = ApiScheme.ChatInvite.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "RecentMeUrlChatInvite{" +
                    "url=" + url +
                    ", chatInvite=" + chatInvite +
                    '}';

        }
    }


    public static class RecentMeUrlStickerSet extends ApiScheme.RecentMeUrl {
        public static final int ID = 0xbc0a57dc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "recentMeUrlStickerSet";
        public String url;
        public ApiScheme.StickerSetCovered set;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            set.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            set = ApiScheme.StickerSetCovered.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "RecentMeUrlStickerSet{" +
                    "url=" + url +
                    ", set=" + set +
                    '}';

        }
    }


    public static class InputSingleMedia2 extends ApiScheme.InputSingleMedia {
        public static final int ID = 0x1cc6e91f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputSingleMedia";
        public int flags;
        public ApiScheme.InputMedia media;
        public long randomId;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = entities != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            media.write(outputStream);

            outputStream.writeLong(randomId);
            outputStream.writeTLString(message);
            if ((flags & 1) != 0 && entities != null) {
                entities.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            media = ApiScheme.InputMedia.readObject(inputStream);
            randomId = inputStream.readLong();
            message = inputStream.readTLString();
            if ((flags & 1) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputSingleMedia{" +
                    "flags=" + flags +
                    ", media=" + media +
                    ", randomId=" + randomId +
                    ", message=" + message +
                    ", entities=" + entities +
                    '}';

        }
    }


    public static class WebAuthorization2 extends ApiScheme.WebAuthorization {
        public static final int ID = 0xa6f8f452;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webAuthorization";
        public long hash;
        public long botId;
        public String domain;
        public String browser;
        public String platform;
        public int dateCreated;
        public int dateActive;
        public String ip;
        public String region;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(hash);
            outputStream.writeLong(botId);
            outputStream.writeTLString(domain);
            outputStream.writeTLString(browser);
            outputStream.writeTLString(platform);
            outputStream.writeInt(dateCreated);
            outputStream.writeInt(dateActive);
            outputStream.writeTLString(ip);
            outputStream.writeTLString(region);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            hash = inputStream.readLong();
            botId = inputStream.readLong();
            domain = inputStream.readTLString();
            browser = inputStream.readTLString();
            platform = inputStream.readTLString();
            dateCreated = inputStream.readInt();
            dateActive = inputStream.readInt();
            ip = inputStream.readTLString();
            region = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "WebAuthorization{" +
                    "hash=" + hash +
                    ", botId=" + botId +
                    ", domain=" + domain +
                    ", browser=" + browser +
                    ", platform=" + platform +
                    ", dateCreated=" + dateCreated +
                    ", dateActive=" + dateActive +
                    ", ip=" + ip +
                    ", region=" + region +
                    '}';

        }
    }


    public static class InputMessageID extends ApiScheme.InputMessage {
        public static final int ID = 0xa676a322;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessageID";
        public int id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputMessageID{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class InputMessageReplyTo extends ApiScheme.InputMessage {
        public static final int ID = 0xbad88395;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessageReplyTo";
        public int id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputMessageReplyTo{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class InputMessagePinned extends ApiScheme.InputMessage {
        public static final int ID = 0x86872538;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessagePinned";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputMessagePinned{" +
                    '}';

        }
    }


    public static class InputMessageCallbackQuery extends ApiScheme.InputMessage {
        public static final int ID = 0xacfa1a7e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputMessageCallbackQuery";
        public int id;
        public long queryId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(id);
            outputStream.writeLong(queryId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readInt();
            queryId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputMessageCallbackQuery{" +
                    "id=" + id +
                    ", queryId=" + queryId +
                    '}';

        }
    }


    public static class InputDialogPeer2 extends ApiScheme.InputDialogPeer {
        public static final int ID = 0xfcaafeb7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputDialogPeer";
        public ApiScheme.InputPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputDialogPeer{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class InputDialogPeerFolder extends ApiScheme.InputDialogPeer {
        public static final int ID = 0x64600527;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputDialogPeerFolder";
        public int folderId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(folderId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            folderId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputDialogPeerFolder{" +
                    "folderId=" + folderId +
                    '}';

        }
    }


    public static class DialogPeer2 extends ApiScheme.DialogPeer {
        public static final int ID = 0xe56dbf05;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogPeer";
        public ApiScheme.Peer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "DialogPeer{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class DialogPeerFolder extends ApiScheme.DialogPeer {
        public static final int ID = 0x514519e2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogPeerFolder";
        public int folderId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(folderId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            folderId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "DialogPeerFolder{" +
                    "folderId=" + folderId +
                    '}';

        }
    }


    public static class FileHash2 extends ApiScheme.FileHash {
        public static final int ID = 0xf39b035c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "fileHash";
        public long offset;
        public int limit;
        public byte[] hash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(offset);
            outputStream.writeInt(limit);
            outputStream.writeTLBytes(hash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            offset = inputStream.readLong();
            limit = inputStream.readInt();
            hash = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "FileHash{" +
                    "offset=" + offset +
                    ", limit=" + limit +
                    ", hash=" + hash +
                    '}';

        }
    }


    public static class InputClientProxy2 extends ApiScheme.InputClientProxy {
        public static final int ID = 0x75588b3f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputClientProxy";
        public String address;
        public int port;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(address);
            outputStream.writeInt(port);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            address = inputStream.readTLString();
            port = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputClientProxy{" +
                    "address=" + address +
                    ", port=" + port +
                    '}';

        }
    }


    public static class InputSecureFileUploaded extends ApiScheme.InputSecureFile {
        public static final int ID = 0x3334b0f0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputSecureFileUploaded";
        public long id;
        public int parts;
        public String md5Checksum;
        public byte[] fileHash;
        public byte[] secret;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeInt(parts);
            outputStream.writeTLString(md5Checksum);
            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLBytes(secret);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            parts = inputStream.readInt();
            md5Checksum = inputStream.readTLString();
            fileHash = inputStream.readTLBytes();
            secret = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputSecureFileUploaded{" +
                    "id=" + id +
                    ", parts=" + parts +
                    ", md5Checksum=" + md5Checksum +
                    ", fileHash=" + fileHash +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class InputSecureFile2 extends ApiScheme.InputSecureFile {
        public static final int ID = 0x5367e5be;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputSecureFile";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputSecureFile{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class SecureFileEmpty extends ApiScheme.SecureFile {
        public static final int ID = 0x64199744;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureFileEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureFileEmpty{" +
                    '}';

        }
    }


    public static class SecureFile2 extends ApiScheme.SecureFile {
        public static final int ID = 0x7d09c27e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureFile";
        public long id;
        public long accessHash;
        public long size;
        public int dcId;
        public int date;
        public byte[] fileHash;
        public byte[] secret;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeLong(size);
            outputStream.writeInt(dcId);
            outputStream.writeInt(date);
            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLBytes(secret);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            size = inputStream.readLong();
            dcId = inputStream.readInt();
            date = inputStream.readInt();
            fileHash = inputStream.readTLBytes();
            secret = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecureFile{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", size=" + size +
                    ", dcId=" + dcId +
                    ", date=" + date +
                    ", fileHash=" + fileHash +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class SecureData2 extends ApiScheme.SecureData {
        public static final int ID = 0x8aeabec3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureData";
        public byte[] data;
        public byte[] dataHash;
        public byte[] secret;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLBytes(data);
            outputStream.writeTLBytes(dataHash);
            outputStream.writeTLBytes(secret);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            data = inputStream.readTLBytes();
            dataHash = inputStream.readTLBytes();
            secret = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecureData{" +
                    "data=" + data +
                    ", dataHash=" + dataHash +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class SecurePlainPhone extends ApiScheme.SecurePlainData {
        public static final int ID = 0x7d6099dd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "securePlainPhone";
        public String phone;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(phone);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phone = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecurePlainPhone{" +
                    "phone=" + phone +
                    '}';

        }
    }


    public static class SecurePlainEmail extends ApiScheme.SecurePlainData {
        public static final int ID = 0x21ec5a5f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "securePlainEmail";
        public String email;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(email);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            email = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecurePlainEmail{" +
                    "email=" + email +
                    '}';

        }
    }


    public static class SecureValueTypePersonalDetails extends ApiScheme.SecureValueType {
        public static final int ID = 0x9d2a81e3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypePersonalDetails";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypePersonalDetails{" +
                    '}';

        }
    }


    public static class SecureValueTypePassport extends ApiScheme.SecureValueType {
        public static final int ID = 0x3dac6a00;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypePassport";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypePassport{" +
                    '}';

        }
    }


    public static class SecureValueTypeDriverLicense extends ApiScheme.SecureValueType {
        public static final int ID = 0x6e425c4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeDriverLicense";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeDriverLicense{" +
                    '}';

        }
    }


    public static class SecureValueTypeIdentityCard extends ApiScheme.SecureValueType {
        public static final int ID = 0xa0d0744b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeIdentityCard";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeIdentityCard{" +
                    '}';

        }
    }


    public static class SecureValueTypeInternalPassport extends ApiScheme.SecureValueType {
        public static final int ID = 0x99a48f23;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeInternalPassport";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeInternalPassport{" +
                    '}';

        }
    }


    public static class SecureValueTypeAddress extends ApiScheme.SecureValueType {
        public static final int ID = 0xcbe31e26;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeAddress";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeAddress{" +
                    '}';

        }
    }


    public static class SecureValueTypeUtilityBill extends ApiScheme.SecureValueType {
        public static final int ID = 0xfc36954e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeUtilityBill";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeUtilityBill{" +
                    '}';

        }
    }


    public static class SecureValueTypeBankStatement extends ApiScheme.SecureValueType {
        public static final int ID = 0x89137c0d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeBankStatement";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeBankStatement{" +
                    '}';

        }
    }


    public static class SecureValueTypeRentalAgreement extends ApiScheme.SecureValueType {
        public static final int ID = 0x8b883488;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeRentalAgreement";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeRentalAgreement{" +
                    '}';

        }
    }


    public static class SecureValueTypePassportRegistration extends ApiScheme.SecureValueType {
        public static final int ID = 0x99e3806a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypePassportRegistration";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypePassportRegistration{" +
                    '}';

        }
    }


    public static class SecureValueTypeTemporaryRegistration extends ApiScheme.SecureValueType {
        public static final int ID = 0xea02ec33;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeTemporaryRegistration";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeTemporaryRegistration{" +
                    '}';

        }
    }


    public static class SecureValueTypePhone extends ApiScheme.SecureValueType {
        public static final int ID = 0xb320aadb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypePhone";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypePhone{" +
                    '}';

        }
    }


    public static class SecureValueTypeEmail extends ApiScheme.SecureValueType {
        public static final int ID = 0x8e3ca7ee;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueTypeEmail";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecureValueTypeEmail{" +
                    '}';

        }
    }


    public static class SecureValue2 extends ApiScheme.SecureValue {
        public static final int ID = 0x187fa0ca;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValue";
        public int flags;
        public ApiScheme.SecureValueType type;
        public ApiScheme.SecureData data = null;
        public ApiScheme.SecureFile frontSide = null;
        public ApiScheme.SecureFile reverseSide = null;
        public ApiScheme.SecureFile selfie = null;
        public TLVector<ApiScheme.SecureFile> translation = null;
        public TLVector<ApiScheme.SecureFile> files = null;
        public ApiScheme.SecurePlainData plainData = null;
        public byte[] hash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = data != null ? (flags | 1) : (flags & ~1);
            flags = frontSide != null ? (flags | 2) : (flags & ~2);
            flags = reverseSide != null ? (flags | 4) : (flags & ~4);
            flags = selfie != null ? (flags | 8) : (flags & ~8);
            flags = translation != null ? (flags | 64) : (flags & ~64);
            flags = files != null ? (flags | 16) : (flags & ~16);
            flags = plainData != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            type.write(outputStream);

            if ((flags & 1) != 0 && data != null) {
                data.write(outputStream);
            }

            if ((flags & 2) != 0 && frontSide != null) {
                frontSide.write(outputStream);
            }

            if ((flags & 4) != 0 && reverseSide != null) {
                reverseSide.write(outputStream);
            }

            if ((flags & 8) != 0 && selfie != null) {
                selfie.write(outputStream);
            }

            if ((flags & 64) != 0 && translation != null) {
                translation.write(outputStream);
            }

            if ((flags & 16) != 0 && files != null) {
                files.write(outputStream);
            }

            if ((flags & 32) != 0 && plainData != null) {
                plainData.write(outputStream);
            }

            outputStream.writeTLBytes(hash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            type = ApiScheme.SecureValueType.readObject(inputStream);
            if ((flags & 1) != 0) {
                data = ApiScheme.SecureData.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                frontSide = ApiScheme.SecureFile.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                reverseSide = ApiScheme.SecureFile.readObject(inputStream);
            }

            if ((flags & 8) != 0) {
                selfie = ApiScheme.SecureFile.readObject(inputStream);
            }

            if ((flags & 64) != 0) {
                translation = new TLVector<ApiScheme.SecureFile>(ApiScheme.SecureFile.class);
                translation.read(inputStream);
            }

            if ((flags & 16) != 0) {
                files = new TLVector<ApiScheme.SecureFile>(ApiScheme.SecureFile.class);
                files.read(inputStream);
            }

            if ((flags & 32) != 0) {
                plainData = ApiScheme.SecurePlainData.readObject(inputStream);
            }

            hash = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecureValue{" +
                    "flags=" + flags +
                    ", type=" + type +
                    ", data=" + data +
                    ", frontSide=" + frontSide +
                    ", reverseSide=" + reverseSide +
                    ", selfie=" + selfie +
                    ", translation=" + translation +
                    ", files=" + files +
                    ", plainData=" + plainData +
                    ", hash=" + hash +
                    '}';

        }
    }


    public static class InputSecureValue2 extends ApiScheme.InputSecureValue {
        public static final int ID = 0xdb21d0a7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputSecureValue";
        public int flags;
        public ApiScheme.SecureValueType type;
        public ApiScheme.SecureData data = null;
        public ApiScheme.InputSecureFile frontSide = null;
        public ApiScheme.InputSecureFile reverseSide = null;
        public ApiScheme.InputSecureFile selfie = null;
        public TLVector<ApiScheme.InputSecureFile> translation = null;
        public TLVector<ApiScheme.InputSecureFile> files = null;
        public ApiScheme.SecurePlainData plainData = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = data != null ? (flags | 1) : (flags & ~1);
            flags = frontSide != null ? (flags | 2) : (flags & ~2);
            flags = reverseSide != null ? (flags | 4) : (flags & ~4);
            flags = selfie != null ? (flags | 8) : (flags & ~8);
            flags = translation != null ? (flags | 64) : (flags & ~64);
            flags = files != null ? (flags | 16) : (flags & ~16);
            flags = plainData != null ? (flags | 32) : (flags & ~32);
            outputStream.writeInt(flags);
            type.write(outputStream);

            if ((flags & 1) != 0 && data != null) {
                data.write(outputStream);
            }

            if ((flags & 2) != 0 && frontSide != null) {
                frontSide.write(outputStream);
            }

            if ((flags & 4) != 0 && reverseSide != null) {
                reverseSide.write(outputStream);
            }

            if ((flags & 8) != 0 && selfie != null) {
                selfie.write(outputStream);
            }

            if ((flags & 64) != 0 && translation != null) {
                translation.write(outputStream);
            }

            if ((flags & 16) != 0 && files != null) {
                files.write(outputStream);
            }

            if ((flags & 32) != 0 && plainData != null) {
                plainData.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            type = ApiScheme.SecureValueType.readObject(inputStream);
            if ((flags & 1) != 0) {
                data = ApiScheme.SecureData.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                frontSide = ApiScheme.InputSecureFile.readObject(inputStream);
            }

            if ((flags & 4) != 0) {
                reverseSide = ApiScheme.InputSecureFile.readObject(inputStream);
            }

            if ((flags & 8) != 0) {
                selfie = ApiScheme.InputSecureFile.readObject(inputStream);
            }

            if ((flags & 64) != 0) {
                translation = new TLVector<ApiScheme.InputSecureFile>(ApiScheme.InputSecureFile.class);
                translation.read(inputStream);
            }

            if ((flags & 16) != 0) {
                files = new TLVector<ApiScheme.InputSecureFile>(ApiScheme.InputSecureFile.class);
                files.read(inputStream);
            }

            if ((flags & 32) != 0) {
                plainData = ApiScheme.SecurePlainData.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputSecureValue{" +
                    "flags=" + flags +
                    ", type=" + type +
                    ", data=" + data +
                    ", frontSide=" + frontSide +
                    ", reverseSide=" + reverseSide +
                    ", selfie=" + selfie +
                    ", translation=" + translation +
                    ", files=" + files +
                    ", plainData=" + plainData +
                    '}';

        }
    }


    public static class SecureValueHash2 extends ApiScheme.SecureValueHash {
        public static final int ID = 0xed1ecdb0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueHash";
        public ApiScheme.SecureValueType type;
        public byte[] hash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(hash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            hash = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecureValueHash{" +
                    "type=" + type +
                    ", hash=" + hash +
                    '}';

        }
    }


    public static class SecureValueErrorData extends ApiScheme.SecureValueError {
        public static final int ID = 0xe8a40bd9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorData";
        public ApiScheme.SecureValueType type;
        public byte[] dataHash;
        public String field;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(dataHash);
            outputStream.writeTLString(field);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            dataHash = inputStream.readTLBytes();
            field = inputStream.readTLString();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorData{" +
                    "type=" + type +
                    ", dataHash=" + dataHash +
                    ", field=" + field +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorFrontSide extends ApiScheme.SecureValueError {
        public static final int ID = 0xbe3dfa;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorFrontSide";
        public ApiScheme.SecureValueType type;
        public byte[] fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorFrontSide{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorReverseSide extends ApiScheme.SecureValueError {
        public static final int ID = 0x868a2aa5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorReverseSide";
        public ApiScheme.SecureValueType type;
        public byte[] fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorReverseSide{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorSelfie extends ApiScheme.SecureValueError {
        public static final int ID = 0xe537ced6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorSelfie";
        public ApiScheme.SecureValueType type;
        public byte[] fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorSelfie{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorFile extends ApiScheme.SecureValueError {
        public static final int ID = 0x7a700873;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorFile";
        public ApiScheme.SecureValueType type;
        public byte[] fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorFile{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorFiles extends ApiScheme.SecureValueError {
        public static final int ID = 0x666220e9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorFiles";
        public ApiScheme.SecureValueType type;
        public TLVector<TLBytes> fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            fileHash.isBareTypeItem = true;
            fileHash.write(outputStream);

            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = new TLVector<TLBytes>(TLBytes.class);
            fileHash.isBareTypeItem = true;
            fileHash.read(inputStream);

            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorFiles{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueError2 extends ApiScheme.SecureValueError {
        public static final int ID = 0x869d758f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueError";
        public ApiScheme.SecureValueType type;
        public byte[] hash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(hash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            hash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueError{" +
                    "type=" + type +
                    ", hash=" + hash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorTranslationFile extends ApiScheme.SecureValueError {
        public static final int ID = 0xa1144770;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorTranslationFile";
        public ApiScheme.SecureValueType type;
        public byte[] fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            outputStream.writeTLBytes(fileHash);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = inputStream.readTLBytes();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorTranslationFile{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureValueErrorTranslationFiles extends ApiScheme.SecureValueError {
        public static final int ID = 0x34636dd8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureValueErrorTranslationFiles";
        public ApiScheme.SecureValueType type;
        public TLVector<TLBytes> fileHash;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            type.write(outputStream);

            fileHash.isBareTypeItem = true;
            fileHash.write(outputStream);

            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            type = ApiScheme.SecureValueType.readObject(inputStream);
            fileHash = new TLVector<TLBytes>(TLBytes.class);
            fileHash.isBareTypeItem = true;
            fileHash.read(inputStream);

            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SecureValueErrorTranslationFiles{" +
                    "type=" + type +
                    ", fileHash=" + fileHash +
                    ", text=" + text +
                    '}';

        }
    }


    public static class SecureCredentialsEncrypted2 extends ApiScheme.SecureCredentialsEncrypted {
        public static final int ID = 0x33f0ea47;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureCredentialsEncrypted";
        public byte[] data;
        public byte[] hash;
        public byte[] secret;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLBytes(data);
            outputStream.writeTLBytes(hash);
            outputStream.writeTLBytes(secret);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            data = inputStream.readTLBytes();
            hash = inputStream.readTLBytes();
            secret = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecureCredentialsEncrypted{" +
                    "data=" + data +
                    ", hash=" + hash +
                    ", secret=" + secret +
                    '}';

        }
    }


    public static class SavedPhoneContact extends ApiScheme.SavedContact {
        public static final int ID = 0x1142bd56;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "savedPhoneContact";
        public String phone;
        public String firstName;
        public String lastName;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(phone);
            outputStream.writeTLString(firstName);
            outputStream.writeTLString(lastName);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            phone = inputStream.readTLString();
            firstName = inputStream.readTLString();
            lastName = inputStream.readTLString();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SavedPhoneContact{" +
                    "phone=" + phone +
                    ", firstName=" + firstName +
                    ", lastName=" + lastName +
                    ", date=" + date +
                    '}';

        }
    }


    public static class PasswordKdfAlgoUnknown extends ApiScheme.PasswordKdfAlgo {
        public static final int ID = 0xd45ab096;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "passwordKdfAlgoUnknown";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "PasswordKdfAlgoUnknown{" +
                    '}';

        }
    }


    public static class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends ApiScheme.PasswordKdfAlgo {
        public static final int ID = 0x3a912d4a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow";
        public byte[] salt1;
        public byte[] salt2;
        public int g;
        public byte[] p;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLBytes(salt1);
            outputStream.writeTLBytes(salt2);
            outputStream.writeInt(g);
            outputStream.writeTLBytes(p);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            salt1 = inputStream.readTLBytes();
            salt2 = inputStream.readTLBytes();
            g = inputStream.readInt();
            p = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{" +
                    "salt1=" + salt1 +
                    ", salt2=" + salt2 +
                    ", g=" + g +
                    ", p=" + p +
                    '}';

        }
    }


    public static class SecurePasswordKdfAlgoUnknown extends ApiScheme.SecurePasswordKdfAlgo {
        public static final int ID = 0x4a8537;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "securePasswordKdfAlgoUnknown";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "SecurePasswordKdfAlgoUnknown{" +
                    '}';

        }
    }


    public static class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends ApiScheme.SecurePasswordKdfAlgo {
        public static final int ID = 0xbbf2dda0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000";
        public byte[] salt;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLBytes(salt);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            salt = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{" +
                    "salt=" + salt +
                    '}';

        }
    }


    public static class SecurePasswordKdfAlgoSHA512 extends ApiScheme.SecurePasswordKdfAlgo {
        public static final int ID = 0x86471d92;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "securePasswordKdfAlgoSHA512";
        public byte[] salt;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLBytes(salt);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            salt = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "SecurePasswordKdfAlgoSHA512{" +
                    "salt=" + salt +
                    '}';

        }
    }


    public static class SecureSecretSettings2 extends ApiScheme.SecureSecretSettings {
        public static final int ID = 0x1527bcac;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureSecretSettings";
        public ApiScheme.SecurePasswordKdfAlgo secureAlgo;
        public byte[] secureSecret;
        public long secureSecretId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            secureAlgo.write(outputStream);

            outputStream.writeTLBytes(secureSecret);
            outputStream.writeLong(secureSecretId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            secureAlgo = ApiScheme.SecurePasswordKdfAlgo.readObject(inputStream);
            secureSecret = inputStream.readTLBytes();
            secureSecretId = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "SecureSecretSettings{" +
                    "secureAlgo=" + secureAlgo +
                    ", secureSecret=" + secureSecret +
                    ", secureSecretId=" + secureSecretId +
                    '}';

        }
    }


    public static class InputCheckPasswordEmpty extends ApiScheme.InputCheckPasswordSRP {
        public static final int ID = 0x9880f658;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputCheckPasswordEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InputCheckPasswordEmpty{" +
                    '}';

        }
    }


    public static class InputCheckPasswordSRP2 extends ApiScheme.InputCheckPasswordSRP {
        public static final int ID = 0xd27ff082;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputCheckPasswordSRP";
        public long srpId;
        public byte[] A;
        public byte[] M1;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(srpId);
            outputStream.writeTLBytes(A);
            outputStream.writeTLBytes(M1);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            srpId = inputStream.readLong();
            A = inputStream.readTLBytes();
            M1 = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "InputCheckPasswordSRP{" +
                    "srpId=" + srpId +
                    ", A=" + A +
                    ", M1=" + M1 +
                    '}';

        }
    }


    public static class SecureRequiredType2 extends ApiScheme.SecureRequiredType {
        public static final int ID = 0x829d99da;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureRequiredType";
        public int flags;
        public True nativeNames = null;
        public True selfieRequired = null;
        public True translationRequired = null;
        public ApiScheme.SecureValueType type;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = nativeNames != null ? (flags | 1) : (flags & ~1);
            flags = selfieRequired != null ? (flags | 2) : (flags & ~2);
            flags = translationRequired != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && nativeNames != null) {
                nativeNames.isBareType = true;
                nativeNames.write(outputStream);
            }

            if ((flags & 2) != 0 && selfieRequired != null) {
                selfieRequired.isBareType = true;
                selfieRequired.write(outputStream);
            }

            if ((flags & 4) != 0 && translationRequired != null) {
                translationRequired.isBareType = true;
                translationRequired.write(outputStream);
            }

            type.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                nativeNames = new True();
                nativeNames.isBareType = true;
                nativeNames.read(inputStream);
            }

            if ((flags & 2) != 0) {
                selfieRequired = new True();
                selfieRequired.isBareType = true;
                selfieRequired.read(inputStream);
            }

            if ((flags & 4) != 0) {
                translationRequired = new True();
                translationRequired.isBareType = true;
                translationRequired.read(inputStream);
            }

            type = ApiScheme.SecureValueType.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "SecureRequiredType{" +
                    "flags=" + flags +
                    ", nativeNames=" + nativeNames +
                    ", selfieRequired=" + selfieRequired +
                    ", translationRequired=" + translationRequired +
                    ", type=" + type +
                    '}';

        }
    }


    public static class SecureRequiredTypeOneOf extends ApiScheme.SecureRequiredType {
        public static final int ID = 0x27477b4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "secureRequiredTypeOneOf";
        public TLVector<ApiScheme.SecureRequiredType> types;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            types.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            types = new TLVector<ApiScheme.SecureRequiredType>(ApiScheme.SecureRequiredType.class);
            types.read(inputStream);


        }

        @Override
        public String toString() {
            return "SecureRequiredTypeOneOf{" +
                    "types=" + types +
                    '}';

        }
    }


    public static class InputAppEvent2 extends ApiScheme.InputAppEvent {
        public static final int ID = 0x1d1b1245;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputAppEvent";
        public double time;
        public String type;
        public long peer;
        public ApiScheme.JSONValue data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeDouble(time);
            outputStream.writeTLString(type);
            outputStream.writeLong(peer);
            data.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            time = inputStream.readDouble();
            type = inputStream.readTLString();
            peer = inputStream.readLong();
            data = ApiScheme.JSONValue.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "InputAppEvent{" +
                    "time=" + time +
                    ", type=" + type +
                    ", peer=" + peer +
                    ", data=" + data +
                    '}';

        }
    }


    public static class JsonObjectValue2 extends ApiScheme.JSONObjectValue {
        public static final int ID = 0xc0de1bd9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonObjectValue";
        public String key;
        public ApiScheme.JSONValue value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(key);
            value.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            key = inputStream.readTLString();
            value = ApiScheme.JSONValue.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "JsonObjectValue{" +
                    "key=" + key +
                    ", value=" + value +
                    '}';

        }
    }


    public static class JsonNull extends ApiScheme.JSONValue {
        public static final int ID = 0x3f6d7b68;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonNull";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "JsonNull{" +
                    '}';

        }
    }


    public static class JsonBool extends ApiScheme.JSONValue {
        public static final int ID = 0xc7345e6a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonBool";
        public ApiScheme.Bool value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            value.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = ApiScheme.Bool.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "JsonBool{" +
                    "value=" + value +
                    '}';

        }
    }


    public static class JsonNumber extends ApiScheme.JSONValue {
        public static final int ID = 0x2be0dfa4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonNumber";
        public double value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeDouble(value);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = inputStream.readDouble();

        }

        @Override
        public String toString() {
            return "JsonNumber{" +
                    "value=" + value +
                    '}';

        }
    }


    public static class JsonString extends ApiScheme.JSONValue {
        public static final int ID = 0xb71e767a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonString";
        public String value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(value);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "JsonString{" +
                    "value=" + value +
                    '}';

        }
    }


    public static class JsonArray extends ApiScheme.JSONValue {
        public static final int ID = 0xf7444763;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonArray";
        public TLVector<ApiScheme.JSONValue> value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            value.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = new TLVector<ApiScheme.JSONValue>(ApiScheme.JSONValue.class);
            value.read(inputStream);


        }

        @Override
        public String toString() {
            return "JsonArray{" +
                    "value=" + value +
                    '}';

        }
    }


    public static class JsonObject extends ApiScheme.JSONValue {
        public static final int ID = 0x99c1d49d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "jsonObject";
        public TLVector<ApiScheme.JSONObjectValue> value;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            value.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            value = new TLVector<ApiScheme.JSONObjectValue>(ApiScheme.JSONObjectValue.class);
            value.read(inputStream);


        }

        @Override
        public String toString() {
            return "JsonObject{" +
                    "value=" + value +
                    '}';

        }
    }


    public static class PageTableCell2 extends ApiScheme.PageTableCell {
        public static final int ID = 0x34566b6a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageTableCell";
        public int flags;
        public True header = null;
        public True alignCenter = null;
        public True alignRight = null;
        public True valignMiddle = null;
        public True valignBottom = null;
        public ApiScheme.RichText text = null;
        public Integer colspan = null;
        public Integer rowspan = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = header != null ? (flags | 1) : (flags & ~1);
            flags = alignCenter != null ? (flags | 8) : (flags & ~8);
            flags = alignRight != null ? (flags | 16) : (flags & ~16);
            flags = valignMiddle != null ? (flags | 32) : (flags & ~32);
            flags = valignBottom != null ? (flags | 64) : (flags & ~64);
            flags = text != null ? (flags | 128) : (flags & ~128);
            flags = colspan != null ? (flags | 2) : (flags & ~2);
            flags = rowspan != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && header != null) {
                header.isBareType = true;
                header.write(outputStream);
            }

            if ((flags & 8) != 0 && alignCenter != null) {
                alignCenter.isBareType = true;
                alignCenter.write(outputStream);
            }

            if ((flags & 16) != 0 && alignRight != null) {
                alignRight.isBareType = true;
                alignRight.write(outputStream);
            }

            if ((flags & 32) != 0 && valignMiddle != null) {
                valignMiddle.isBareType = true;
                valignMiddle.write(outputStream);
            }

            if ((flags & 64) != 0 && valignBottom != null) {
                valignBottom.isBareType = true;
                valignBottom.write(outputStream);
            }

            if ((flags & 128) != 0 && text != null) {
                text.write(outputStream);
            }

            if ((flags & 2) != 0 && colspan != null) {
                outputStream.writeInt(colspan);
            }

            if ((flags & 4) != 0 && rowspan != null) {
                outputStream.writeInt(rowspan);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                header = new True();
                header.isBareType = true;
                header.read(inputStream);
            }

            if ((flags & 8) != 0) {
                alignCenter = new True();
                alignCenter.isBareType = true;
                alignCenter.read(inputStream);
            }

            if ((flags & 16) != 0) {
                alignRight = new True();
                alignRight.isBareType = true;
                alignRight.read(inputStream);
            }

            if ((flags & 32) != 0) {
                valignMiddle = new True();
                valignMiddle.isBareType = true;
                valignMiddle.read(inputStream);
            }

            if ((flags & 64) != 0) {
                valignBottom = new True();
                valignBottom.isBareType = true;
                valignBottom.read(inputStream);
            }

            if ((flags & 128) != 0) {
                text = ApiScheme.RichText.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                colspan = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                rowspan = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "PageTableCell{" +
                    "flags=" + flags +
                    ", header=" + header +
                    ", alignCenter=" + alignCenter +
                    ", alignRight=" + alignRight +
                    ", valignMiddle=" + valignMiddle +
                    ", valignBottom=" + valignBottom +
                    ", text=" + text +
                    ", colspan=" + colspan +
                    ", rowspan=" + rowspan +
                    '}';

        }
    }


    public static class PageTableRow2 extends ApiScheme.PageTableRow {
        public static final int ID = 0xe0c0c5e5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageTableRow";
        public TLVector<ApiScheme.PageTableCell> cells;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            cells.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            cells = new TLVector<ApiScheme.PageTableCell>(ApiScheme.PageTableCell.class);
            cells.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageTableRow{" +
                    "cells=" + cells +
                    '}';

        }
    }


    public static class PageCaption2 extends ApiScheme.PageCaption {
        public static final int ID = 0x6f747657;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageCaption";
        public ApiScheme.RichText text;
        public ApiScheme.RichText credit;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);

            credit.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);
            credit = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageCaption{" +
                    "text=" + text +
                    ", credit=" + credit +
                    '}';

        }
    }


    public static class PageListItemText extends ApiScheme.PageListItem {
        public static final int ID = 0xb92fb6cd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageListItemText";
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageListItemText{" +
                    "text=" + text +
                    '}';

        }
    }


    public static class PageListItemBlocks extends ApiScheme.PageListItem {
        public static final int ID = 0x25e073fc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageListItemBlocks";
        public TLVector<ApiScheme.PageBlock> blocks;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            blocks.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            blocks = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            blocks.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageListItemBlocks{" +
                    "blocks=" + blocks +
                    '}';

        }
    }


    public static class PageListOrderedItemText extends ApiScheme.PageListOrderedItem {
        public static final int ID = 0x5e068047;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageListOrderedItemText";
        public String num;
        public ApiScheme.RichText text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(num);
            text.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            num = inputStream.readTLString();
            text = ApiScheme.RichText.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "PageListOrderedItemText{" +
                    "num=" + num +
                    ", text=" + text +
                    '}';

        }
    }


    public static class PageListOrderedItemBlocks extends ApiScheme.PageListOrderedItem {
        public static final int ID = 0x98dd8936;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageListOrderedItemBlocks";
        public String num;
        public TLVector<ApiScheme.PageBlock> blocks;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(num);
            blocks.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            num = inputStream.readTLString();
            blocks = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            blocks.read(inputStream);


        }

        @Override
        public String toString() {
            return "PageListOrderedItemBlocks{" +
                    "num=" + num +
                    ", blocks=" + blocks +
                    '}';

        }
    }


    public static class PageRelatedArticle2 extends ApiScheme.PageRelatedArticle {
        public static final int ID = 0xb390dc08;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pageRelatedArticle";
        public int flags;
        public String url;
        public long webpageId;
        public String title = null;
        public String description = null;
        public Long photoId = null;
        public String author = null;
        public Integer publishedDate = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = title != null ? (flags | 1) : (flags & ~1);
            flags = description != null ? (flags | 2) : (flags & ~2);
            flags = photoId != null ? (flags | 4) : (flags & ~4);
            flags = author != null ? (flags | 8) : (flags & ~8);
            flags = publishedDate != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            outputStream.writeTLString(url);
            outputStream.writeLong(webpageId);
            if ((flags & 1) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 2) != 0 && description != null) {
                outputStream.writeTLString(description);
            }

            if ((flags & 4) != 0 && photoId != null) {
                outputStream.writeLong(photoId);
            }

            if ((flags & 8) != 0 && author != null) {
                outputStream.writeTLString(author);
            }

            if ((flags & 16) != 0 && publishedDate != null) {
                outputStream.writeInt(publishedDate);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            url = inputStream.readTLString();
            webpageId = inputStream.readLong();
            if ((flags & 1) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                description = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                photoId = inputStream.readLong();
            }

            if ((flags & 8) != 0) {
                author = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                publishedDate = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "PageRelatedArticle{" +
                    "flags=" + flags +
                    ", url=" + url +
                    ", webpageId=" + webpageId +
                    ", title=" + title +
                    ", description=" + description +
                    ", photoId=" + photoId +
                    ", author=" + author +
                    ", publishedDate=" + publishedDate +
                    '}';

        }
    }


    public static class Page2 extends ApiScheme.Page {
        public static final int ID = 0x98657f0d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "page";
        public int flags;
        public True part = null;
        public True rtl = null;
        public True v2 = null;
        public String url;
        public TLVector<ApiScheme.PageBlock> blocks;
        public TLVector<ApiScheme.Photo> photos;
        public TLVector<ApiScheme.Document> documents;
        public Integer views = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = part != null ? (flags | 1) : (flags & ~1);
            flags = rtl != null ? (flags | 2) : (flags & ~2);
            flags = v2 != null ? (flags | 4) : (flags & ~4);
            flags = views != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && part != null) {
                part.isBareType = true;
                part.write(outputStream);
            }

            if ((flags & 2) != 0 && rtl != null) {
                rtl.isBareType = true;
                rtl.write(outputStream);
            }

            if ((flags & 4) != 0 && v2 != null) {
                v2.isBareType = true;
                v2.write(outputStream);
            }

            outputStream.writeTLString(url);
            blocks.write(outputStream);

            photos.write(outputStream);

            documents.write(outputStream);

            if ((flags & 8) != 0 && views != null) {
                outputStream.writeInt(views);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                part = new True();
                part.isBareType = true;
                part.read(inputStream);
            }

            if ((flags & 2) != 0) {
                rtl = new True();
                rtl.isBareType = true;
                rtl.read(inputStream);
            }

            if ((flags & 4) != 0) {
                v2 = new True();
                v2.isBareType = true;
                v2.read(inputStream);
            }

            url = inputStream.readTLString();
            blocks = new TLVector<ApiScheme.PageBlock>(ApiScheme.PageBlock.class);
            blocks.read(inputStream);

            photos = new TLVector<ApiScheme.Photo>(ApiScheme.Photo.class);
            photos.read(inputStream);

            documents = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
            documents.read(inputStream);

            if ((flags & 8) != 0) {
                views = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Page{" +
                    "flags=" + flags +
                    ", part=" + part +
                    ", rtl=" + rtl +
                    ", v2=" + v2 +
                    ", url=" + url +
                    ", blocks=" + blocks +
                    ", photos=" + photos +
                    ", documents=" + documents +
                    ", views=" + views +
                    '}';

        }
    }


    public static class PollAnswer2 extends ApiScheme.PollAnswer {
        public static final int ID = 0x6ca9c2e9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pollAnswer";
        public String text;
        public byte[] option;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLBytes(option);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            option = inputStream.readTLBytes();

        }

        @Override
        public String toString() {
            return "PollAnswer{" +
                    "text=" + text +
                    ", option=" + option +
                    '}';

        }
    }


    public static class Poll2 extends ApiScheme.Poll {
        public static final int ID = 0x86e18161;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "poll";
        public long id;
        public int flags;
        public True closed = null;
        public True publicVoters = null;
        public True multipleChoice = null;
        public True quiz = null;
        public String question;
        public TLVector<ApiScheme.PollAnswer> answers;
        public Integer closePeriod = null;
        public Integer closeDate = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = closed != null ? (flags | 1) : (flags & ~1);
            flags = publicVoters != null ? (flags | 2) : (flags & ~2);
            flags = multipleChoice != null ? (flags | 4) : (flags & ~4);
            flags = quiz != null ? (flags | 8) : (flags & ~8);
            flags = closePeriod != null ? (flags | 16) : (flags & ~16);
            flags = closeDate != null ? (flags | 32) : (flags & ~32);
            outputStream.writeLong(id);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && closed != null) {
                closed.isBareType = true;
                closed.write(outputStream);
            }

            if ((flags & 2) != 0 && publicVoters != null) {
                publicVoters.isBareType = true;
                publicVoters.write(outputStream);
            }

            if ((flags & 4) != 0 && multipleChoice != null) {
                multipleChoice.isBareType = true;
                multipleChoice.write(outputStream);
            }

            if ((flags & 8) != 0 && quiz != null) {
                quiz.isBareType = true;
                quiz.write(outputStream);
            }

            outputStream.writeTLString(question);
            answers.write(outputStream);

            if ((flags & 16) != 0 && closePeriod != null) {
                outputStream.writeInt(closePeriod);
            }

            if ((flags & 32) != 0 && closeDate != null) {
                outputStream.writeInt(closeDate);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                closed = new True();
                closed.isBareType = true;
                closed.read(inputStream);
            }

            if ((flags & 2) != 0) {
                publicVoters = new True();
                publicVoters.isBareType = true;
                publicVoters.read(inputStream);
            }

            if ((flags & 4) != 0) {
                multipleChoice = new True();
                multipleChoice.isBareType = true;
                multipleChoice.read(inputStream);
            }

            if ((flags & 8) != 0) {
                quiz = new True();
                quiz.isBareType = true;
                quiz.read(inputStream);
            }

            question = inputStream.readTLString();
            answers = new TLVector<ApiScheme.PollAnswer>(ApiScheme.PollAnswer.class);
            answers.read(inputStream);

            if ((flags & 16) != 0) {
                closePeriod = inputStream.readInt();
            }

            if ((flags & 32) != 0) {
                closeDate = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Poll{" +
                    "id=" + id +
                    ", flags=" + flags +
                    ", closed=" + closed +
                    ", publicVoters=" + publicVoters +
                    ", multipleChoice=" + multipleChoice +
                    ", quiz=" + quiz +
                    ", question=" + question +
                    ", answers=" + answers +
                    ", closePeriod=" + closePeriod +
                    ", closeDate=" + closeDate +
                    '}';

        }
    }


    public static class PollAnswerVoters2 extends ApiScheme.PollAnswerVoters {
        public static final int ID = 0x3b6ddad2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pollAnswerVoters";
        public int flags;
        public True chosen = null;
        public True correct = null;
        public byte[] option;
        public int voters;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = chosen != null ? (flags | 1) : (flags & ~1);
            flags = correct != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && chosen != null) {
                chosen.isBareType = true;
                chosen.write(outputStream);
            }

            if ((flags & 2) != 0 && correct != null) {
                correct.isBareType = true;
                correct.write(outputStream);
            }

            outputStream.writeTLBytes(option);
            outputStream.writeInt(voters);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                chosen = new True();
                chosen.isBareType = true;
                chosen.read(inputStream);
            }

            if ((flags & 2) != 0) {
                correct = new True();
                correct.isBareType = true;
                correct.read(inputStream);
            }

            option = inputStream.readTLBytes();
            voters = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PollAnswerVoters{" +
                    "flags=" + flags +
                    ", chosen=" + chosen +
                    ", correct=" + correct +
                    ", option=" + option +
                    ", voters=" + voters +
                    '}';

        }
    }


    public static class PollResults2 extends ApiScheme.PollResults {
        public static final int ID = 0xdcb82ea3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "pollResults";
        public int flags;
        public True min = null;
        public TLVector<ApiScheme.PollAnswerVoters> results = null;
        public Integer totalVoters = null;
        public TLVector<TLLong> recentVoters = null;
        public String solution = null;
        public TLVector<ApiScheme.MessageEntity> solutionEntities = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = min != null ? (flags | 1) : (flags & ~1);
            flags = results != null ? (flags | 2) : (flags & ~2);
            flags = totalVoters != null ? (flags | 4) : (flags & ~4);
            flags = recentVoters != null ? (flags | 8) : (flags & ~8);
            flags = solution != null ? (flags | 16) : (flags & ~16);
            flags = solutionEntities != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && min != null) {
                min.isBareType = true;
                min.write(outputStream);
            }

            if ((flags & 2) != 0 && results != null) {
                results.write(outputStream);
            }

            if ((flags & 4) != 0 && totalVoters != null) {
                outputStream.writeInt(totalVoters);
            }

            if ((flags & 8) != 0 && recentVoters != null) {
                recentVoters.isBareTypeItem = true;
                recentVoters.write(outputStream);
            }

            if ((flags & 16) != 0 && solution != null) {
                outputStream.writeTLString(solution);
            }

            if ((flags & 16) != 0 && solutionEntities != null) {
                solutionEntities.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                min = new True();
                min.isBareType = true;
                min.read(inputStream);
            }

            if ((flags & 2) != 0) {
                results = new TLVector<ApiScheme.PollAnswerVoters>(ApiScheme.PollAnswerVoters.class);
                results.read(inputStream);
            }

            if ((flags & 4) != 0) {
                totalVoters = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                recentVoters = new TLVector<TLLong>(TLLong.class);
                recentVoters.isBareTypeItem = true;
                recentVoters.read(inputStream);
            }

            if ((flags & 16) != 0) {
                solution = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                solutionEntities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                solutionEntities.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "PollResults{" +
                    "flags=" + flags +
                    ", min=" + min +
                    ", results=" + results +
                    ", totalVoters=" + totalVoters +
                    ", recentVoters=" + recentVoters +
                    ", solution=" + solution +
                    ", solutionEntities=" + solutionEntities +
                    '}';

        }
    }


    public static class ChatOnlines2 extends ApiScheme.ChatOnlines {
        public static final int ID = 0xf041e250;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatOnlines";
        public int onlines;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(onlines);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            onlines = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatOnlines{" +
                    "onlines=" + onlines +
                    '}';

        }
    }


    public static class StatsURL2 extends ApiScheme.StatsURL {
        public static final int ID = 0x47a971e0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsURL";
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "StatsURL{" +
                    "url=" + url +
                    '}';

        }
    }


    public static class ChatAdminRights2 extends ApiScheme.ChatAdminRights {
        public static final int ID = 0x5fb224d5;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatAdminRights";
        public int flags;
        public True changeInfo = null;
        public True postMessages = null;
        public True editMessages = null;
        public True deleteMessages = null;
        public True banUsers = null;
        public True inviteUsers = null;
        public True pinMessages = null;
        public True addAdmins = null;
        public True anonymous = null;
        public True manageCall = null;
        public True other = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = changeInfo != null ? (flags | 1) : (flags & ~1);
            flags = postMessages != null ? (flags | 2) : (flags & ~2);
            flags = editMessages != null ? (flags | 4) : (flags & ~4);
            flags = deleteMessages != null ? (flags | 8) : (flags & ~8);
            flags = banUsers != null ? (flags | 16) : (flags & ~16);
            flags = inviteUsers != null ? (flags | 32) : (flags & ~32);
            flags = pinMessages != null ? (flags | 128) : (flags & ~128);
            flags = addAdmins != null ? (flags | 512) : (flags & ~512);
            flags = anonymous != null ? (flags | 1024) : (flags & ~1024);
            flags = manageCall != null ? (flags | 2048) : (flags & ~2048);
            flags = other != null ? (flags | 4096) : (flags & ~4096);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && changeInfo != null) {
                changeInfo.isBareType = true;
                changeInfo.write(outputStream);
            }

            if ((flags & 2) != 0 && postMessages != null) {
                postMessages.isBareType = true;
                postMessages.write(outputStream);
            }

            if ((flags & 4) != 0 && editMessages != null) {
                editMessages.isBareType = true;
                editMessages.write(outputStream);
            }

            if ((flags & 8) != 0 && deleteMessages != null) {
                deleteMessages.isBareType = true;
                deleteMessages.write(outputStream);
            }

            if ((flags & 16) != 0 && banUsers != null) {
                banUsers.isBareType = true;
                banUsers.write(outputStream);
            }

            if ((flags & 32) != 0 && inviteUsers != null) {
                inviteUsers.isBareType = true;
                inviteUsers.write(outputStream);
            }

            if ((flags & 128) != 0 && pinMessages != null) {
                pinMessages.isBareType = true;
                pinMessages.write(outputStream);
            }

            if ((flags & 512) != 0 && addAdmins != null) {
                addAdmins.isBareType = true;
                addAdmins.write(outputStream);
            }

            if ((flags & 1024) != 0 && anonymous != null) {
                anonymous.isBareType = true;
                anonymous.write(outputStream);
            }

            if ((flags & 2048) != 0 && manageCall != null) {
                manageCall.isBareType = true;
                manageCall.write(outputStream);
            }

            if ((flags & 4096) != 0 && other != null) {
                other.isBareType = true;
                other.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                changeInfo = new True();
                changeInfo.isBareType = true;
                changeInfo.read(inputStream);
            }

            if ((flags & 2) != 0) {
                postMessages = new True();
                postMessages.isBareType = true;
                postMessages.read(inputStream);
            }

            if ((flags & 4) != 0) {
                editMessages = new True();
                editMessages.isBareType = true;
                editMessages.read(inputStream);
            }

            if ((flags & 8) != 0) {
                deleteMessages = new True();
                deleteMessages.isBareType = true;
                deleteMessages.read(inputStream);
            }

            if ((flags & 16) != 0) {
                banUsers = new True();
                banUsers.isBareType = true;
                banUsers.read(inputStream);
            }

            if ((flags & 32) != 0) {
                inviteUsers = new True();
                inviteUsers.isBareType = true;
                inviteUsers.read(inputStream);
            }

            if ((flags & 128) != 0) {
                pinMessages = new True();
                pinMessages.isBareType = true;
                pinMessages.read(inputStream);
            }

            if ((flags & 512) != 0) {
                addAdmins = new True();
                addAdmins.isBareType = true;
                addAdmins.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                anonymous = new True();
                anonymous.isBareType = true;
                anonymous.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                manageCall = new True();
                manageCall.isBareType = true;
                manageCall.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                other = new True();
                other.isBareType = true;
                other.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ChatAdminRights{" +
                    "flags=" + flags +
                    ", changeInfo=" + changeInfo +
                    ", postMessages=" + postMessages +
                    ", editMessages=" + editMessages +
                    ", deleteMessages=" + deleteMessages +
                    ", banUsers=" + banUsers +
                    ", inviteUsers=" + inviteUsers +
                    ", pinMessages=" + pinMessages +
                    ", addAdmins=" + addAdmins +
                    ", anonymous=" + anonymous +
                    ", manageCall=" + manageCall +
                    ", other=" + other +
                    '}';

        }
    }


    public static class ChatBannedRights2 extends ApiScheme.ChatBannedRights {
        public static final int ID = 0x9f120418;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatBannedRights";
        public int flags;
        public True viewMessages = null;
        public True sendMessages = null;
        public True sendMedia = null;
        public True sendStickers = null;
        public True sendGifs = null;
        public True sendGames = null;
        public True sendInline = null;
        public True embedLinks = null;
        public True sendPolls = null;
        public True changeInfo = null;
        public True inviteUsers = null;
        public True pinMessages = null;
        public int untilDate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = viewMessages != null ? (flags | 1) : (flags & ~1);
            flags = sendMessages != null ? (flags | 2) : (flags & ~2);
            flags = sendMedia != null ? (flags | 4) : (flags & ~4);
            flags = sendStickers != null ? (flags | 8) : (flags & ~8);
            flags = sendGifs != null ? (flags | 16) : (flags & ~16);
            flags = sendGames != null ? (flags | 32) : (flags & ~32);
            flags = sendInline != null ? (flags | 64) : (flags & ~64);
            flags = embedLinks != null ? (flags | 128) : (flags & ~128);
            flags = sendPolls != null ? (flags | 256) : (flags & ~256);
            flags = changeInfo != null ? (flags | 1024) : (flags & ~1024);
            flags = inviteUsers != null ? (flags | 32768) : (flags & ~32768);
            flags = pinMessages != null ? (flags | 131072) : (flags & ~131072);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && viewMessages != null) {
                viewMessages.isBareType = true;
                viewMessages.write(outputStream);
            }

            if ((flags & 2) != 0 && sendMessages != null) {
                sendMessages.isBareType = true;
                sendMessages.write(outputStream);
            }

            if ((flags & 4) != 0 && sendMedia != null) {
                sendMedia.isBareType = true;
                sendMedia.write(outputStream);
            }

            if ((flags & 8) != 0 && sendStickers != null) {
                sendStickers.isBareType = true;
                sendStickers.write(outputStream);
            }

            if ((flags & 16) != 0 && sendGifs != null) {
                sendGifs.isBareType = true;
                sendGifs.write(outputStream);
            }

            if ((flags & 32) != 0 && sendGames != null) {
                sendGames.isBareType = true;
                sendGames.write(outputStream);
            }

            if ((flags & 64) != 0 && sendInline != null) {
                sendInline.isBareType = true;
                sendInline.write(outputStream);
            }

            if ((flags & 128) != 0 && embedLinks != null) {
                embedLinks.isBareType = true;
                embedLinks.write(outputStream);
            }

            if ((flags & 256) != 0 && sendPolls != null) {
                sendPolls.isBareType = true;
                sendPolls.write(outputStream);
            }

            if ((flags & 1024) != 0 && changeInfo != null) {
                changeInfo.isBareType = true;
                changeInfo.write(outputStream);
            }

            if ((flags & 32768) != 0 && inviteUsers != null) {
                inviteUsers.isBareType = true;
                inviteUsers.write(outputStream);
            }

            if ((flags & 131072) != 0 && pinMessages != null) {
                pinMessages.isBareType = true;
                pinMessages.write(outputStream);
            }

            outputStream.writeInt(untilDate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                viewMessages = new True();
                viewMessages.isBareType = true;
                viewMessages.read(inputStream);
            }

            if ((flags & 2) != 0) {
                sendMessages = new True();
                sendMessages.isBareType = true;
                sendMessages.read(inputStream);
            }

            if ((flags & 4) != 0) {
                sendMedia = new True();
                sendMedia.isBareType = true;
                sendMedia.read(inputStream);
            }

            if ((flags & 8) != 0) {
                sendStickers = new True();
                sendStickers.isBareType = true;
                sendStickers.read(inputStream);
            }

            if ((flags & 16) != 0) {
                sendGifs = new True();
                sendGifs.isBareType = true;
                sendGifs.read(inputStream);
            }

            if ((flags & 32) != 0) {
                sendGames = new True();
                sendGames.isBareType = true;
                sendGames.read(inputStream);
            }

            if ((flags & 64) != 0) {
                sendInline = new True();
                sendInline.isBareType = true;
                sendInline.read(inputStream);
            }

            if ((flags & 128) != 0) {
                embedLinks = new True();
                embedLinks.isBareType = true;
                embedLinks.read(inputStream);
            }

            if ((flags & 256) != 0) {
                sendPolls = new True();
                sendPolls.isBareType = true;
                sendPolls.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                changeInfo = new True();
                changeInfo.isBareType = true;
                changeInfo.read(inputStream);
            }

            if ((flags & 32768) != 0) {
                inviteUsers = new True();
                inviteUsers.isBareType = true;
                inviteUsers.read(inputStream);
            }

            if ((flags & 131072) != 0) {
                pinMessages = new True();
                pinMessages.isBareType = true;
                pinMessages.read(inputStream);
            }

            untilDate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatBannedRights{" +
                    "flags=" + flags +
                    ", viewMessages=" + viewMessages +
                    ", sendMessages=" + sendMessages +
                    ", sendMedia=" + sendMedia +
                    ", sendStickers=" + sendStickers +
                    ", sendGifs=" + sendGifs +
                    ", sendGames=" + sendGames +
                    ", sendInline=" + sendInline +
                    ", embedLinks=" + embedLinks +
                    ", sendPolls=" + sendPolls +
                    ", changeInfo=" + changeInfo +
                    ", inviteUsers=" + inviteUsers +
                    ", pinMessages=" + pinMessages +
                    ", untilDate=" + untilDate +
                    '}';

        }
    }


    public static class InputWallPaper2 extends ApiScheme.InputWallPaper {
        public static final int ID = 0xe630b979;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWallPaper";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputWallPaper{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputWallPaperSlug extends ApiScheme.InputWallPaper {
        public static final int ID = 0x72091c80;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWallPaperSlug";
        public String slug;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(slug);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            slug = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputWallPaperSlug{" +
                    "slug=" + slug +
                    '}';

        }
    }


    public static class InputWallPaperNoFile extends ApiScheme.InputWallPaper {
        public static final int ID = 0x967a462e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputWallPaperNoFile";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputWallPaperNoFile{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class CodeSettings2 extends ApiScheme.CodeSettings {
        public static final int ID = 0x8a6469c2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "codeSettings";
        public int flags;
        public True allowFlashcall = null;
        public True currentNumber = null;
        public True allowAppHash = null;
        public True allowMissedCall = null;
        public TLVector<TLBytes> logoutTokens = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = allowFlashcall != null ? (flags | 1) : (flags & ~1);
            flags = currentNumber != null ? (flags | 2) : (flags & ~2);
            flags = allowAppHash != null ? (flags | 16) : (flags & ~16);
            flags = allowMissedCall != null ? (flags | 32) : (flags & ~32);
            flags = logoutTokens != null ? (flags | 64) : (flags & ~64);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && allowFlashcall != null) {
                allowFlashcall.isBareType = true;
                allowFlashcall.write(outputStream);
            }

            if ((flags & 2) != 0 && currentNumber != null) {
                currentNumber.isBareType = true;
                currentNumber.write(outputStream);
            }

            if ((flags & 16) != 0 && allowAppHash != null) {
                allowAppHash.isBareType = true;
                allowAppHash.write(outputStream);
            }

            if ((flags & 32) != 0 && allowMissedCall != null) {
                allowMissedCall.isBareType = true;
                allowMissedCall.write(outputStream);
            }

            if ((flags & 64) != 0 && logoutTokens != null) {
                logoutTokens.isBareTypeItem = true;
                logoutTokens.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                allowFlashcall = new True();
                allowFlashcall.isBareType = true;
                allowFlashcall.read(inputStream);
            }

            if ((flags & 2) != 0) {
                currentNumber = new True();
                currentNumber.isBareType = true;
                currentNumber.read(inputStream);
            }

            if ((flags & 16) != 0) {
                allowAppHash = new True();
                allowAppHash.isBareType = true;
                allowAppHash.read(inputStream);
            }

            if ((flags & 32) != 0) {
                allowMissedCall = new True();
                allowMissedCall.isBareType = true;
                allowMissedCall.read(inputStream);
            }

            if ((flags & 64) != 0) {
                logoutTokens = new TLVector<TLBytes>(TLBytes.class);
                logoutTokens.isBareTypeItem = true;
                logoutTokens.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "CodeSettings{" +
                    "flags=" + flags +
                    ", allowFlashcall=" + allowFlashcall +
                    ", currentNumber=" + currentNumber +
                    ", allowAppHash=" + allowAppHash +
                    ", allowMissedCall=" + allowMissedCall +
                    ", logoutTokens=" + logoutTokens +
                    '}';

        }
    }


    public static class WallPaperSettings2 extends ApiScheme.WallPaperSettings {
        public static final int ID = 0x1dc1bca4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "wallPaperSettings";
        public int flags;
        public True blur = null;
        public True motion = null;
        public Integer backgroundColor = null;
        public Integer secondBackgroundColor = null;
        public Integer thirdBackgroundColor = null;
        public Integer fourthBackgroundColor = null;
        public Integer intensity = null;
        public Integer rotation = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = blur != null ? (flags | 2) : (flags & ~2);
            flags = motion != null ? (flags | 4) : (flags & ~4);
            flags = backgroundColor != null ? (flags | 1) : (flags & ~1);
            flags = secondBackgroundColor != null ? (flags | 16) : (flags & ~16);
            flags = thirdBackgroundColor != null ? (flags | 32) : (flags & ~32);
            flags = fourthBackgroundColor != null ? (flags | 64) : (flags & ~64);
            flags = intensity != null ? (flags | 8) : (flags & ~8);
            flags = rotation != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && blur != null) {
                blur.isBareType = true;
                blur.write(outputStream);
            }

            if ((flags & 4) != 0 && motion != null) {
                motion.isBareType = true;
                motion.write(outputStream);
            }

            if ((flags & 1) != 0 && backgroundColor != null) {
                outputStream.writeInt(backgroundColor);
            }

            if ((flags & 16) != 0 && secondBackgroundColor != null) {
                outputStream.writeInt(secondBackgroundColor);
            }

            if ((flags & 32) != 0 && thirdBackgroundColor != null) {
                outputStream.writeInt(thirdBackgroundColor);
            }

            if ((flags & 64) != 0 && fourthBackgroundColor != null) {
                outputStream.writeInt(fourthBackgroundColor);
            }

            if ((flags & 8) != 0 && intensity != null) {
                outputStream.writeInt(intensity);
            }

            if ((flags & 16) != 0 && rotation != null) {
                outputStream.writeInt(rotation);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                blur = new True();
                blur.isBareType = true;
                blur.read(inputStream);
            }

            if ((flags & 4) != 0) {
                motion = new True();
                motion.isBareType = true;
                motion.read(inputStream);
            }

            if ((flags & 1) != 0) {
                backgroundColor = inputStream.readInt();
            }

            if ((flags & 16) != 0) {
                secondBackgroundColor = inputStream.readInt();
            }

            if ((flags & 32) != 0) {
                thirdBackgroundColor = inputStream.readInt();
            }

            if ((flags & 64) != 0) {
                fourthBackgroundColor = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                intensity = inputStream.readInt();
            }

            if ((flags & 16) != 0) {
                rotation = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "WallPaperSettings{" +
                    "flags=" + flags +
                    ", blur=" + blur +
                    ", motion=" + motion +
                    ", backgroundColor=" + backgroundColor +
                    ", secondBackgroundColor=" + secondBackgroundColor +
                    ", thirdBackgroundColor=" + thirdBackgroundColor +
                    ", fourthBackgroundColor=" + fourthBackgroundColor +
                    ", intensity=" + intensity +
                    ", rotation=" + rotation +
                    '}';

        }
    }


    public static class AutoDownloadSettings2 extends ApiScheme.AutoDownloadSettings {
        public static final int ID = 0x8efab953;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "autoDownloadSettings";
        public int flags;
        public True disabled = null;
        public True videoPreloadLarge = null;
        public True audioPreloadNext = null;
        public True phonecallsLessData = null;
        public int photoSizeMax;
        public long videoSizeMax;
        public long fileSizeMax;
        public int videoUploadMaxbitrate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = disabled != null ? (flags | 1) : (flags & ~1);
            flags = videoPreloadLarge != null ? (flags | 2) : (flags & ~2);
            flags = audioPreloadNext != null ? (flags | 4) : (flags & ~4);
            flags = phonecallsLessData != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && disabled != null) {
                disabled.isBareType = true;
                disabled.write(outputStream);
            }

            if ((flags & 2) != 0 && videoPreloadLarge != null) {
                videoPreloadLarge.isBareType = true;
                videoPreloadLarge.write(outputStream);
            }

            if ((flags & 4) != 0 && audioPreloadNext != null) {
                audioPreloadNext.isBareType = true;
                audioPreloadNext.write(outputStream);
            }

            if ((flags & 8) != 0 && phonecallsLessData != null) {
                phonecallsLessData.isBareType = true;
                phonecallsLessData.write(outputStream);
            }

            outputStream.writeInt(photoSizeMax);
            outputStream.writeLong(videoSizeMax);
            outputStream.writeLong(fileSizeMax);
            outputStream.writeInt(videoUploadMaxbitrate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                disabled = new True();
                disabled.isBareType = true;
                disabled.read(inputStream);
            }

            if ((flags & 2) != 0) {
                videoPreloadLarge = new True();
                videoPreloadLarge.isBareType = true;
                videoPreloadLarge.read(inputStream);
            }

            if ((flags & 4) != 0) {
                audioPreloadNext = new True();
                audioPreloadNext.isBareType = true;
                audioPreloadNext.read(inputStream);
            }

            if ((flags & 8) != 0) {
                phonecallsLessData = new True();
                phonecallsLessData.isBareType = true;
                phonecallsLessData.read(inputStream);
            }

            photoSizeMax = inputStream.readInt();
            videoSizeMax = inputStream.readLong();
            fileSizeMax = inputStream.readLong();
            videoUploadMaxbitrate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "AutoDownloadSettings{" +
                    "flags=" + flags +
                    ", disabled=" + disabled +
                    ", videoPreloadLarge=" + videoPreloadLarge +
                    ", audioPreloadNext=" + audioPreloadNext +
                    ", phonecallsLessData=" + phonecallsLessData +
                    ", photoSizeMax=" + photoSizeMax +
                    ", videoSizeMax=" + videoSizeMax +
                    ", fileSizeMax=" + fileSizeMax +
                    ", videoUploadMaxbitrate=" + videoUploadMaxbitrate +
                    '}';

        }
    }


    public static class EmojiKeyword2 extends ApiScheme.EmojiKeyword {
        public static final int ID = 0xd5b3b9f9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "emojiKeyword";
        public String keyword;
        public TLVector<TLString> emoticons;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(keyword);
            emoticons.isBareTypeItem = true;
            emoticons.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            keyword = inputStream.readTLString();
            emoticons = new TLVector<TLString>(TLString.class);
            emoticons.isBareTypeItem = true;
            emoticons.read(inputStream);


        }

        @Override
        public String toString() {
            return "EmojiKeyword{" +
                    "keyword=" + keyword +
                    ", emoticons=" + emoticons +
                    '}';

        }
    }


    public static class EmojiKeywordDeleted extends ApiScheme.EmojiKeyword {
        public static final int ID = 0x236df622;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "emojiKeywordDeleted";
        public String keyword;
        public TLVector<TLString> emoticons;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(keyword);
            emoticons.isBareTypeItem = true;
            emoticons.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            keyword = inputStream.readTLString();
            emoticons = new TLVector<TLString>(TLString.class);
            emoticons.isBareTypeItem = true;
            emoticons.read(inputStream);


        }

        @Override
        public String toString() {
            return "EmojiKeywordDeleted{" +
                    "keyword=" + keyword +
                    ", emoticons=" + emoticons +
                    '}';

        }
    }


    public static class EmojiKeywordsDifference2 extends ApiScheme.EmojiKeywordsDifference {
        public static final int ID = 0x5cc761bd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "emojiKeywordsDifference";
        public String langCode;
        public int fromVersion;
        public int version;
        public TLVector<ApiScheme.EmojiKeyword> keywords;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(langCode);
            outputStream.writeInt(fromVersion);
            outputStream.writeInt(version);
            keywords.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            langCode = inputStream.readTLString();
            fromVersion = inputStream.readInt();
            version = inputStream.readInt();
            keywords = new TLVector<ApiScheme.EmojiKeyword>(ApiScheme.EmojiKeyword.class);
            keywords.read(inputStream);


        }

        @Override
        public String toString() {
            return "EmojiKeywordsDifference{" +
                    "langCode=" + langCode +
                    ", fromVersion=" + fromVersion +
                    ", version=" + version +
                    ", keywords=" + keywords +
                    '}';

        }
    }


    public static class EmojiURL2 extends ApiScheme.EmojiURL {
        public static final int ID = 0xa575739d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "emojiURL";
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "EmojiURL{" +
                    "url=" + url +
                    '}';

        }
    }


    public static class EmojiLanguage2 extends ApiScheme.EmojiLanguage {
        public static final int ID = 0xb3fb5361;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "emojiLanguage";
        public String langCode;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(langCode);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            langCode = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "EmojiLanguage{" +
                    "langCode=" + langCode +
                    '}';

        }
    }


    public static class Folder2 extends ApiScheme.Folder {
        public static final int ID = 0xff544e65;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "folder";
        public int flags;
        public True autofillNewBroadcasts = null;
        public True autofillPublicGroups = null;
        public True autofillNewCorrespondents = null;
        public int id;
        public String title;
        public ApiScheme.ChatPhoto photo = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = autofillNewBroadcasts != null ? (flags | 1) : (flags & ~1);
            flags = autofillPublicGroups != null ? (flags | 2) : (flags & ~2);
            flags = autofillNewCorrespondents != null ? (flags | 4) : (flags & ~4);
            flags = photo != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && autofillNewBroadcasts != null) {
                autofillNewBroadcasts.isBareType = true;
                autofillNewBroadcasts.write(outputStream);
            }

            if ((flags & 2) != 0 && autofillPublicGroups != null) {
                autofillPublicGroups.isBareType = true;
                autofillPublicGroups.write(outputStream);
            }

            if ((flags & 4) != 0 && autofillNewCorrespondents != null) {
                autofillNewCorrespondents.isBareType = true;
                autofillNewCorrespondents.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeTLString(title);
            if ((flags & 8) != 0 && photo != null) {
                photo.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                autofillNewBroadcasts = new True();
                autofillNewBroadcasts.isBareType = true;
                autofillNewBroadcasts.read(inputStream);
            }

            if ((flags & 2) != 0) {
                autofillPublicGroups = new True();
                autofillPublicGroups.isBareType = true;
                autofillPublicGroups.read(inputStream);
            }

            if ((flags & 4) != 0) {
                autofillNewCorrespondents = new True();
                autofillNewCorrespondents.isBareType = true;
                autofillNewCorrespondents.read(inputStream);
            }

            id = inputStream.readInt();
            title = inputStream.readTLString();
            if ((flags & 8) != 0) {
                photo = ApiScheme.ChatPhoto.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "Folder{" +
                    "flags=" + flags +
                    ", autofillNewBroadcasts=" + autofillNewBroadcasts +
                    ", autofillPublicGroups=" + autofillPublicGroups +
                    ", autofillNewCorrespondents=" + autofillNewCorrespondents +
                    ", id=" + id +
                    ", title=" + title +
                    ", photo=" + photo +
                    '}';

        }
    }


    public static class InputFolderPeer2 extends ApiScheme.InputFolderPeer {
        public static final int ID = 0xfbd2c296;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputFolderPeer";
        public ApiScheme.InputPeer peer;
        public int folderId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(folderId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            folderId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputFolderPeer{" +
                    "peer=" + peer +
                    ", folderId=" + folderId +
                    '}';

        }
    }


    public static class FolderPeer2 extends ApiScheme.FolderPeer {
        public static final int ID = 0xe9baa668;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "folderPeer";
        public ApiScheme.Peer peer;
        public int folderId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(folderId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            folderId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "FolderPeer{" +
                    "peer=" + peer +
                    ", folderId=" + folderId +
                    '}';

        }
    }


    public static class UrlAuthResultRequest extends ApiScheme.UrlAuthResult {
        public static final int ID = 0x92d33a0e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "urlAuthResultRequest";
        public int flags;
        public True requestWriteAccess = null;
        public ApiScheme.User bot;
        public String domain;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = requestWriteAccess != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && requestWriteAccess != null) {
                requestWriteAccess.isBareType = true;
                requestWriteAccess.write(outputStream);
            }

            bot.write(outputStream);

            outputStream.writeTLString(domain);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                requestWriteAccess = new True();
                requestWriteAccess.isBareType = true;
                requestWriteAccess.read(inputStream);
            }

            bot = ApiScheme.User.readObject(inputStream);
            domain = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UrlAuthResultRequest{" +
                    "flags=" + flags +
                    ", requestWriteAccess=" + requestWriteAccess +
                    ", bot=" + bot +
                    ", domain=" + domain +
                    '}';

        }
    }


    public static class UrlAuthResultAccepted extends ApiScheme.UrlAuthResult {
        public static final int ID = 0x8f8c0e4e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "urlAuthResultAccepted";
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "UrlAuthResultAccepted{" +
                    "url=" + url +
                    '}';

        }
    }


    public static class UrlAuthResultDefault extends ApiScheme.UrlAuthResult {
        public static final int ID = 0xa9d6db1f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "urlAuthResultDefault";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "UrlAuthResultDefault{" +
                    '}';

        }
    }


    public static class ChannelLocationEmpty extends ApiScheme.ChannelLocation {
        public static final int ID = 0xbfb5ad8b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelLocationEmpty";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "ChannelLocationEmpty{" +
                    '}';

        }
    }


    public static class ChannelLocation2 extends ApiScheme.ChannelLocation {
        public static final int ID = 0x209b82db;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "channelLocation";
        public ApiScheme.GeoPoint geoPoint;
        public String address;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            geoPoint.write(outputStream);

            outputStream.writeTLString(address);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            geoPoint = ApiScheme.GeoPoint.readObject(inputStream);
            address = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "ChannelLocation{" +
                    "geoPoint=" + geoPoint +
                    ", address=" + address +
                    '}';

        }
    }


    public static class PeerLocated2 extends ApiScheme.PeerLocated {
        public static final int ID = 0xca461b5d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerLocated";
        public ApiScheme.Peer peer;
        public int expires;
        public int distance;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(expires);
            outputStream.writeInt(distance);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.Peer.readObject(inputStream);
            expires = inputStream.readInt();
            distance = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PeerLocated{" +
                    "peer=" + peer +
                    ", expires=" + expires +
                    ", distance=" + distance +
                    '}';

        }
    }


    public static class PeerSelfLocated extends ApiScheme.PeerLocated {
        public static final int ID = 0xf8ec284b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerSelfLocated";
        public int expires;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(expires);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            expires = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PeerSelfLocated{" +
                    "expires=" + expires +
                    '}';

        }
    }


    public static class RestrictionReason2 extends ApiScheme.RestrictionReason {
        public static final int ID = 0xd072acb4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "restrictionReason";
        public String platform;
        public String reason;
        public String text;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(platform);
            outputStream.writeTLString(reason);
            outputStream.writeTLString(text);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            platform = inputStream.readTLString();
            reason = inputStream.readTLString();
            text = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "RestrictionReason{" +
                    "platform=" + platform +
                    ", reason=" + reason +
                    ", text=" + text +
                    '}';

        }
    }


    public static class InputTheme2 extends ApiScheme.InputTheme {
        public static final int ID = 0x3c5693e9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputTheme";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputTheme{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class InputThemeSlug extends ApiScheme.InputTheme {
        public static final int ID = 0xf5890df1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputThemeSlug";
        public String slug;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(slug);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            slug = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputThemeSlug{" +
                    "slug=" + slug +
                    '}';

        }
    }


    public static class Theme2 extends ApiScheme.Theme {
        public static final int ID = 0xa00e67d6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "theme";
        public int flags;
        public True creator = null;
        public True mDefault = null;
        public True forChat = null;
        public long id;
        public long accessHash;
        public String slug;
        public String title;
        public ApiScheme.Document document = null;
        public TLVector<ApiScheme.ThemeSettings> settings = null;
        public String emoticon = null;
        public Integer installsCount = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = creator != null ? (flags | 1) : (flags & ~1);
            flags = mDefault != null ? (flags | 2) : (flags & ~2);
            flags = forChat != null ? (flags | 32) : (flags & ~32);
            flags = document != null ? (flags | 4) : (flags & ~4);
            flags = settings != null ? (flags | 8) : (flags & ~8);
            flags = emoticon != null ? (flags | 64) : (flags & ~64);
            flags = installsCount != null ? (flags | 16) : (flags & ~16);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && creator != null) {
                creator.isBareType = true;
                creator.write(outputStream);
            }

            if ((flags & 2) != 0 && mDefault != null) {
                mDefault.isBareType = true;
                mDefault.write(outputStream);
            }

            if ((flags & 32) != 0 && forChat != null) {
                forChat.isBareType = true;
                forChat.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeTLString(slug);
            outputStream.writeTLString(title);
            if ((flags & 4) != 0 && document != null) {
                document.write(outputStream);
            }

            if ((flags & 8) != 0 && settings != null) {
                settings.write(outputStream);
            }

            if ((flags & 64) != 0 && emoticon != null) {
                outputStream.writeTLString(emoticon);
            }

            if ((flags & 16) != 0 && installsCount != null) {
                outputStream.writeInt(installsCount);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                creator = new True();
                creator.isBareType = true;
                creator.read(inputStream);
            }

            if ((flags & 2) != 0) {
                mDefault = new True();
                mDefault.isBareType = true;
                mDefault.read(inputStream);
            }

            if ((flags & 32) != 0) {
                forChat = new True();
                forChat.isBareType = true;
                forChat.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            slug = inputStream.readTLString();
            title = inputStream.readTLString();
            if ((flags & 4) != 0) {
                document = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 8) != 0) {
                settings = new TLVector<ApiScheme.ThemeSettings>(ApiScheme.ThemeSettings.class);
                settings.read(inputStream);
            }

            if ((flags & 64) != 0) {
                emoticon = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                installsCount = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "Theme{" +
                    "flags=" + flags +
                    ", creator=" + creator +
                    ", mDefault=" + mDefault +
                    ", forChat=" + forChat +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", slug=" + slug +
                    ", title=" + title +
                    ", document=" + document +
                    ", settings=" + settings +
                    ", emoticon=" + emoticon +
                    ", installsCount=" + installsCount +
                    '}';

        }
    }


    public static class BaseThemeClassic extends ApiScheme.BaseTheme {
        public static final int ID = 0xc3a12462;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "baseThemeClassic";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BaseThemeClassic{" +
                    '}';

        }
    }


    public static class BaseThemeDay extends ApiScheme.BaseTheme {
        public static final int ID = 0xfbd81688;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "baseThemeDay";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BaseThemeDay{" +
                    '}';

        }
    }


    public static class BaseThemeNight extends ApiScheme.BaseTheme {
        public static final int ID = 0xb7b31ea8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "baseThemeNight";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BaseThemeNight{" +
                    '}';

        }
    }


    public static class BaseThemeTinted extends ApiScheme.BaseTheme {
        public static final int ID = 0x6d5f77ee;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "baseThemeTinted";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BaseThemeTinted{" +
                    '}';

        }
    }


    public static class BaseThemeArctic extends ApiScheme.BaseTheme {
        public static final int ID = 0x5b11125a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "baseThemeArctic";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BaseThemeArctic{" +
                    '}';

        }
    }


    public static class InputThemeSettings2 extends ApiScheme.InputThemeSettings {
        public static final int ID = 0x8fde504f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputThemeSettings";
        public int flags;
        public True messageColorsAnimated = null;
        public ApiScheme.BaseTheme baseTheme;
        public int accentColor;
        public Integer outboxAccentColor = null;
        public TLVector<TLInt> messageColors = null;
        public ApiScheme.InputWallPaper wallpaper = null;
        public ApiScheme.WallPaperSettings wallpaperSettings = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = messageColorsAnimated != null ? (flags | 4) : (flags & ~4);
            flags = outboxAccentColor != null ? (flags | 8) : (flags & ~8);
            flags = messageColors != null ? (flags | 1) : (flags & ~1);
            flags = wallpaper != null ? (flags | 2) : (flags & ~2);
            flags = wallpaperSettings != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && messageColorsAnimated != null) {
                messageColorsAnimated.isBareType = true;
                messageColorsAnimated.write(outputStream);
            }

            baseTheme.write(outputStream);

            outputStream.writeInt(accentColor);
            if ((flags & 8) != 0 && outboxAccentColor != null) {
                outputStream.writeInt(outboxAccentColor);
            }

            if ((flags & 1) != 0 && messageColors != null) {
                messageColors.isBareTypeItem = true;
                messageColors.write(outputStream);
            }

            if ((flags & 2) != 0 && wallpaper != null) {
                wallpaper.write(outputStream);
            }

            if ((flags & 2) != 0 && wallpaperSettings != null) {
                wallpaperSettings.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                messageColorsAnimated = new True();
                messageColorsAnimated.isBareType = true;
                messageColorsAnimated.read(inputStream);
            }

            baseTheme = ApiScheme.BaseTheme.readObject(inputStream);
            accentColor = inputStream.readInt();
            if ((flags & 8) != 0) {
                outboxAccentColor = inputStream.readInt();
            }

            if ((flags & 1) != 0) {
                messageColors = new TLVector<TLInt>(TLInt.class);
                messageColors.isBareTypeItem = true;
                messageColors.read(inputStream);
            }

            if ((flags & 2) != 0) {
                wallpaper = ApiScheme.InputWallPaper.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                wallpaperSettings = ApiScheme.WallPaperSettings.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputThemeSettings{" +
                    "flags=" + flags +
                    ", messageColorsAnimated=" + messageColorsAnimated +
                    ", baseTheme=" + baseTheme +
                    ", accentColor=" + accentColor +
                    ", outboxAccentColor=" + outboxAccentColor +
                    ", messageColors=" + messageColors +
                    ", wallpaper=" + wallpaper +
                    ", wallpaperSettings=" + wallpaperSettings +
                    '}';

        }
    }


    public static class ThemeSettings2 extends ApiScheme.ThemeSettings {
        public static final int ID = 0xfa58b6d4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "themeSettings";
        public int flags;
        public True messageColorsAnimated = null;
        public ApiScheme.BaseTheme baseTheme;
        public int accentColor;
        public Integer outboxAccentColor = null;
        public TLVector<TLInt> messageColors = null;
        public ApiScheme.WallPaper wallpaper = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = messageColorsAnimated != null ? (flags | 4) : (flags & ~4);
            flags = outboxAccentColor != null ? (flags | 8) : (flags & ~8);
            flags = messageColors != null ? (flags | 1) : (flags & ~1);
            flags = wallpaper != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && messageColorsAnimated != null) {
                messageColorsAnimated.isBareType = true;
                messageColorsAnimated.write(outputStream);
            }

            baseTheme.write(outputStream);

            outputStream.writeInt(accentColor);
            if ((flags & 8) != 0 && outboxAccentColor != null) {
                outputStream.writeInt(outboxAccentColor);
            }

            if ((flags & 1) != 0 && messageColors != null) {
                messageColors.isBareTypeItem = true;
                messageColors.write(outputStream);
            }

            if ((flags & 2) != 0 && wallpaper != null) {
                wallpaper.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                messageColorsAnimated = new True();
                messageColorsAnimated.isBareType = true;
                messageColorsAnimated.read(inputStream);
            }

            baseTheme = ApiScheme.BaseTheme.readObject(inputStream);
            accentColor = inputStream.readInt();
            if ((flags & 8) != 0) {
                outboxAccentColor = inputStream.readInt();
            }

            if ((flags & 1) != 0) {
                messageColors = new TLVector<TLInt>(TLInt.class);
                messageColors.isBareTypeItem = true;
                messageColors.read(inputStream);
            }

            if ((flags & 2) != 0) {
                wallpaper = ApiScheme.WallPaper.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "ThemeSettings{" +
                    "flags=" + flags +
                    ", messageColorsAnimated=" + messageColorsAnimated +
                    ", baseTheme=" + baseTheme +
                    ", accentColor=" + accentColor +
                    ", outboxAccentColor=" + outboxAccentColor +
                    ", messageColors=" + messageColors +
                    ", wallpaper=" + wallpaper +
                    '}';

        }
    }


    public static class WebPageAttributeTheme extends ApiScheme.WebPageAttribute {
        public static final int ID = 0x54b56617;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webPageAttributeTheme";
        public int flags;
        public TLVector<ApiScheme.Document> documents = null;
        public ApiScheme.ThemeSettings settings = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = documents != null ? (flags | 1) : (flags & ~1);
            flags = settings != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && documents != null) {
                documents.write(outputStream);
            }

            if ((flags & 2) != 0 && settings != null) {
                settings.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                documents = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                documents.read(inputStream);
            }

            if ((flags & 2) != 0) {
                settings = ApiScheme.ThemeSettings.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "WebPageAttributeTheme{" +
                    "flags=" + flags +
                    ", documents=" + documents +
                    ", settings=" + settings +
                    '}';

        }
    }


    public static class MessageUserVote2 extends ApiScheme.MessageUserVote {
        public static final int ID = 0x34d247b4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageUserVote";
        public long userId;
        public byte[] option;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeTLBytes(option);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            option = inputStream.readTLBytes();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageUserVote{" +
                    "userId=" + userId +
                    ", option=" + option +
                    ", date=" + date +
                    '}';

        }
    }


    public static class MessageUserVoteInputOption extends ApiScheme.MessageUserVote {
        public static final int ID = 0x3ca5b0ec;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageUserVoteInputOption";
        public long userId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageUserVoteInputOption{" +
                    "userId=" + userId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class MessageUserVoteMultiple extends ApiScheme.MessageUserVote {
        public static final int ID = 0x8a65e557;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageUserVoteMultiple";
        public long userId;
        public TLVector<TLBytes> options;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            options.isBareTypeItem = true;
            options.write(outputStream);

            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            options = new TLVector<TLBytes>(TLBytes.class);
            options.isBareTypeItem = true;
            options.read(inputStream);

            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageUserVoteMultiple{" +
                    "userId=" + userId +
                    ", options=" + options +
                    ", date=" + date +
                    '}';

        }
    }


    public static class BankCardOpenUrl2 extends ApiScheme.BankCardOpenUrl {
        public static final int ID = 0xf568028a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "bankCardOpenUrl";
        public String url;
        public String name;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeTLString(name);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            name = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "BankCardOpenUrl{" +
                    "url=" + url +
                    ", name=" + name +
                    '}';

        }
    }


    public static class DialogFilter2 extends ApiScheme.DialogFilter {
        public static final int ID = 0x7438f7e8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogFilter";
        public int flags;
        public True contacts = null;
        public True nonContacts = null;
        public True groups = null;
        public True broadcasts = null;
        public True bots = null;
        public True excludeMuted = null;
        public True excludeRead = null;
        public True excludeArchived = null;
        public int id;
        public String title;
        public String emoticon = null;
        public TLVector<ApiScheme.InputPeer> pinnedPeers;
        public TLVector<ApiScheme.InputPeer> includePeers;
        public TLVector<ApiScheme.InputPeer> excludePeers;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = contacts != null ? (flags | 1) : (flags & ~1);
            flags = nonContacts != null ? (flags | 2) : (flags & ~2);
            flags = groups != null ? (flags | 4) : (flags & ~4);
            flags = broadcasts != null ? (flags | 8) : (flags & ~8);
            flags = bots != null ? (flags | 16) : (flags & ~16);
            flags = excludeMuted != null ? (flags | 2048) : (flags & ~2048);
            flags = excludeRead != null ? (flags | 4096) : (flags & ~4096);
            flags = excludeArchived != null ? (flags | 8192) : (flags & ~8192);
            flags = emoticon != null ? (flags | 33554432) : (flags & ~33554432);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && contacts != null) {
                contacts.isBareType = true;
                contacts.write(outputStream);
            }

            if ((flags & 2) != 0 && nonContacts != null) {
                nonContacts.isBareType = true;
                nonContacts.write(outputStream);
            }

            if ((flags & 4) != 0 && groups != null) {
                groups.isBareType = true;
                groups.write(outputStream);
            }

            if ((flags & 8) != 0 && broadcasts != null) {
                broadcasts.isBareType = true;
                broadcasts.write(outputStream);
            }

            if ((flags & 16) != 0 && bots != null) {
                bots.isBareType = true;
                bots.write(outputStream);
            }

            if ((flags & 2048) != 0 && excludeMuted != null) {
                excludeMuted.isBareType = true;
                excludeMuted.write(outputStream);
            }

            if ((flags & 4096) != 0 && excludeRead != null) {
                excludeRead.isBareType = true;
                excludeRead.write(outputStream);
            }

            if ((flags & 8192) != 0 && excludeArchived != null) {
                excludeArchived.isBareType = true;
                excludeArchived.write(outputStream);
            }

            outputStream.writeInt(id);
            outputStream.writeTLString(title);
            if ((flags & 33554432) != 0 && emoticon != null) {
                outputStream.writeTLString(emoticon);
            }

            pinnedPeers.write(outputStream);

            includePeers.write(outputStream);

            excludePeers.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                contacts = new True();
                contacts.isBareType = true;
                contacts.read(inputStream);
            }

            if ((flags & 2) != 0) {
                nonContacts = new True();
                nonContacts.isBareType = true;
                nonContacts.read(inputStream);
            }

            if ((flags & 4) != 0) {
                groups = new True();
                groups.isBareType = true;
                groups.read(inputStream);
            }

            if ((flags & 8) != 0) {
                broadcasts = new True();
                broadcasts.isBareType = true;
                broadcasts.read(inputStream);
            }

            if ((flags & 16) != 0) {
                bots = new True();
                bots.isBareType = true;
                bots.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                excludeMuted = new True();
                excludeMuted.isBareType = true;
                excludeMuted.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                excludeRead = new True();
                excludeRead.isBareType = true;
                excludeRead.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                excludeArchived = new True();
                excludeArchived.isBareType = true;
                excludeArchived.read(inputStream);
            }

            id = inputStream.readInt();
            title = inputStream.readTLString();
            if ((flags & 33554432) != 0) {
                emoticon = inputStream.readTLString();
            }

            pinnedPeers = new TLVector<ApiScheme.InputPeer>(ApiScheme.InputPeer.class);
            pinnedPeers.read(inputStream);

            includePeers = new TLVector<ApiScheme.InputPeer>(ApiScheme.InputPeer.class);
            includePeers.read(inputStream);

            excludePeers = new TLVector<ApiScheme.InputPeer>(ApiScheme.InputPeer.class);
            excludePeers.read(inputStream);


        }

        @Override
        public String toString() {
            return "DialogFilter{" +
                    "flags=" + flags +
                    ", contacts=" + contacts +
                    ", nonContacts=" + nonContacts +
                    ", groups=" + groups +
                    ", broadcasts=" + broadcasts +
                    ", bots=" + bots +
                    ", excludeMuted=" + excludeMuted +
                    ", excludeRead=" + excludeRead +
                    ", excludeArchived=" + excludeArchived +
                    ", id=" + id +
                    ", title=" + title +
                    ", emoticon=" + emoticon +
                    ", pinnedPeers=" + pinnedPeers +
                    ", includePeers=" + includePeers +
                    ", excludePeers=" + excludePeers +
                    '}';

        }
    }


    public static class DialogFilterDefault extends ApiScheme.DialogFilter {
        public static final int ID = 0x363293ae;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogFilterDefault";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "DialogFilterDefault{" +
                    '}';

        }
    }


    public static class DialogFilterSuggested2 extends ApiScheme.DialogFilterSuggested {
        public static final int ID = 0x77744d4a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "dialogFilterSuggested";
        public ApiScheme.DialogFilter filter;
        public String description;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            filter.write(outputStream);

            outputStream.writeTLString(description);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            filter = ApiScheme.DialogFilter.readObject(inputStream);
            description = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "DialogFilterSuggested{" +
                    "filter=" + filter +
                    ", description=" + description +
                    '}';

        }
    }


    public static class StatsDateRangeDays2 extends ApiScheme.StatsDateRangeDays {
        public static final int ID = 0xb637edaf;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsDateRangeDays";
        public int minDate;
        public int maxDate;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(minDate);
            outputStream.writeInt(maxDate);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            minDate = inputStream.readInt();
            maxDate = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "StatsDateRangeDays{" +
                    "minDate=" + minDate +
                    ", maxDate=" + maxDate +
                    '}';

        }
    }


    public static class StatsAbsValueAndPrev2 extends ApiScheme.StatsAbsValueAndPrev {
        public static final int ID = 0xcb43acde;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsAbsValueAndPrev";
        public double current;
        public double previous;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeDouble(current);
            outputStream.writeDouble(previous);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            current = inputStream.readDouble();
            previous = inputStream.readDouble();

        }

        @Override
        public String toString() {
            return "StatsAbsValueAndPrev{" +
                    "current=" + current +
                    ", previous=" + previous +
                    '}';

        }
    }


    public static class StatsPercentValue2 extends ApiScheme.StatsPercentValue {
        public static final int ID = 0xcbce2fe0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsPercentValue";
        public double part;
        public double total;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeDouble(part);
            outputStream.writeDouble(total);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            part = inputStream.readDouble();
            total = inputStream.readDouble();

        }

        @Override
        public String toString() {
            return "StatsPercentValue{" +
                    "part=" + part +
                    ", total=" + total +
                    '}';

        }
    }


    public static class StatsGraphAsync extends ApiScheme.StatsGraph {
        public static final int ID = 0x4a27eb2d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGraphAsync";
        public String token;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(token);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            token = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "StatsGraphAsync{" +
                    "token=" + token +
                    '}';

        }
    }


    public static class StatsGraphError extends ApiScheme.StatsGraph {
        public static final int ID = 0xbedc9822;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGraphError";
        public String error;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(error);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            error = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "StatsGraphError{" +
                    "error=" + error +
                    '}';

        }
    }


    public static class StatsGraph2 extends ApiScheme.StatsGraph {
        public static final int ID = 0x8ea464b6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGraph";
        public int flags;
        public ApiScheme.DataJSON json;
        public String zoomToken = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = zoomToken != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            json.write(outputStream);

            if ((flags & 1) != 0 && zoomToken != null) {
                outputStream.writeTLString(zoomToken);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            json = ApiScheme.DataJSON.readObject(inputStream);
            if ((flags & 1) != 0) {
                zoomToken = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "StatsGraph{" +
                    "flags=" + flags +
                    ", json=" + json +
                    ", zoomToken=" + zoomToken +
                    '}';

        }
    }


    public static class MessageInteractionCounters2 extends ApiScheme.MessageInteractionCounters {
        public static final int ID = 0xad4fc9bd;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageInteractionCounters";
        public int msgId;
        public int views;
        public int forwards;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(msgId);
            outputStream.writeInt(views);
            outputStream.writeInt(forwards);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            msgId = inputStream.readInt();
            views = inputStream.readInt();
            forwards = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "MessageInteractionCounters{" +
                    "msgId=" + msgId +
                    ", views=" + views +
                    ", forwards=" + forwards +
                    '}';

        }
    }


    public static class VideoSize2 extends ApiScheme.VideoSize {
        public static final int ID = 0xde33b094;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "videoSize";
        public int flags;
        public String type;
        public int w;
        public int h;
        public int size;
        public Double videoStartTs = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = videoStartTs != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeTLString(type);
            outputStream.writeInt(w);
            outputStream.writeInt(h);
            outputStream.writeInt(size);
            if ((flags & 1) != 0 && videoStartTs != null) {
                outputStream.writeDouble(videoStartTs);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            type = inputStream.readTLString();
            w = inputStream.readInt();
            h = inputStream.readInt();
            size = inputStream.readInt();
            if ((flags & 1) != 0) {
                videoStartTs = inputStream.readDouble();
            }


        }

        @Override
        public String toString() {
            return "VideoSize{" +
                    "flags=" + flags +
                    ", type=" + type +
                    ", w=" + w +
                    ", h=" + h +
                    ", size=" + size +
                    ", videoStartTs=" + videoStartTs +
                    '}';

        }
    }


    public static class StatsGroupTopPoster2 extends ApiScheme.StatsGroupTopPoster {
        public static final int ID = 0x9d04af9b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGroupTopPoster";
        public long userId;
        public int messages;
        public int avgChars;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(messages);
            outputStream.writeInt(avgChars);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            messages = inputStream.readInt();
            avgChars = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "StatsGroupTopPoster{" +
                    "userId=" + userId +
                    ", messages=" + messages +
                    ", avgChars=" + avgChars +
                    '}';

        }
    }


    public static class StatsGroupTopAdmin2 extends ApiScheme.StatsGroupTopAdmin {
        public static final int ID = 0xd7584c87;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGroupTopAdmin";
        public long userId;
        public int deleted;
        public int kicked;
        public int banned;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(deleted);
            outputStream.writeInt(kicked);
            outputStream.writeInt(banned);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            deleted = inputStream.readInt();
            kicked = inputStream.readInt();
            banned = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "StatsGroupTopAdmin{" +
                    "userId=" + userId +
                    ", deleted=" + deleted +
                    ", kicked=" + kicked +
                    ", banned=" + banned +
                    '}';

        }
    }


    public static class StatsGroupTopInviter2 extends ApiScheme.StatsGroupTopInviter {
        public static final int ID = 0x535f779d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "statsGroupTopInviter";
        public long userId;
        public int invitations;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(userId);
            outputStream.writeInt(invitations);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = inputStream.readLong();
            invitations = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "StatsGroupTopInviter{" +
                    "userId=" + userId +
                    ", invitations=" + invitations +
                    '}';

        }
    }


    public static class GlobalPrivacySettings2 extends ApiScheme.GlobalPrivacySettings {
        public static final int ID = 0xbea2f424;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "globalPrivacySettings";
        public int flags;
        public ApiScheme.Bool archiveAndMuteNewNoncontactPeers = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = archiveAndMuteNewNoncontactPeers != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && archiveAndMuteNewNoncontactPeers != null) {
                archiveAndMuteNewNoncontactPeers.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                archiveAndMuteNewNoncontactPeers = ApiScheme.Bool.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "GlobalPrivacySettings{" +
                    "flags=" + flags +
                    ", archiveAndMuteNewNoncontactPeers=" + archiveAndMuteNewNoncontactPeers +
                    '}';

        }
    }


    public static class MessageViews2 extends ApiScheme.MessageViews {
        public static final int ID = 0x455b853d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageViews";
        public int flags;
        public Integer views = null;
        public Integer forwards = null;
        public ApiScheme.MessageReplies replies = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = views != null ? (flags | 1) : (flags & ~1);
            flags = forwards != null ? (flags | 2) : (flags & ~2);
            flags = replies != null ? (flags | 4) : (flags & ~4);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && views != null) {
                outputStream.writeInt(views);
            }

            if ((flags & 2) != 0 && forwards != null) {
                outputStream.writeInt(forwards);
            }

            if ((flags & 4) != 0 && replies != null) {
                replies.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                views = inputStream.readInt();
            }

            if ((flags & 2) != 0) {
                forwards = inputStream.readInt();
            }

            if ((flags & 4) != 0) {
                replies = ApiScheme.MessageReplies.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "MessageViews{" +
                    "flags=" + flags +
                    ", views=" + views +
                    ", forwards=" + forwards +
                    ", replies=" + replies +
                    '}';

        }
    }


    public static class MessageReplyHeader2 extends ApiScheme.MessageReplyHeader {
        public static final int ID = 0xa6d57763;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageReplyHeader";
        public int flags;
        public True replyToScheduled = null;
        public int replyToMsgId;
        public ApiScheme.Peer replyToPeerId = null;
        public Integer replyToTopId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = replyToScheduled != null ? (flags | 4) : (flags & ~4);
            flags = replyToPeerId != null ? (flags | 1) : (flags & ~1);
            flags = replyToTopId != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 4) != 0 && replyToScheduled != null) {
                replyToScheduled.isBareType = true;
                replyToScheduled.write(outputStream);
            }

            outputStream.writeInt(replyToMsgId);
            if ((flags & 1) != 0 && replyToPeerId != null) {
                replyToPeerId.write(outputStream);
            }

            if ((flags & 2) != 0 && replyToTopId != null) {
                outputStream.writeInt(replyToTopId);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 4) != 0) {
                replyToScheduled = new True();
                replyToScheduled.isBareType = true;
                replyToScheduled.read(inputStream);
            }

            replyToMsgId = inputStream.readInt();
            if ((flags & 1) != 0) {
                replyToPeerId = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                replyToTopId = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageReplyHeader{" +
                    "flags=" + flags +
                    ", replyToScheduled=" + replyToScheduled +
                    ", replyToMsgId=" + replyToMsgId +
                    ", replyToPeerId=" + replyToPeerId +
                    ", replyToTopId=" + replyToTopId +
                    '}';

        }
    }


    public static class MessageReplies2 extends ApiScheme.MessageReplies {
        public static final int ID = 0x83d60fc2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageReplies";
        public int flags;
        public True comments = null;
        public int replies;
        public int repliesPts;
        public TLVector<ApiScheme.Peer> recentRepliers = null;
        public Long channelId = null;
        public Integer maxId = null;
        public Integer readMaxId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = comments != null ? (flags | 1) : (flags & ~1);
            flags = recentRepliers != null ? (flags | 2) : (flags & ~2);
            flags = channelId != null ? (flags | 1) : (flags & ~1);
            flags = maxId != null ? (flags | 4) : (flags & ~4);
            flags = readMaxId != null ? (flags | 8) : (flags & ~8);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && comments != null) {
                comments.isBareType = true;
                comments.write(outputStream);
            }

            outputStream.writeInt(replies);
            outputStream.writeInt(repliesPts);
            if ((flags & 2) != 0 && recentRepliers != null) {
                recentRepliers.write(outputStream);
            }

            if ((flags & 1) != 0 && channelId != null) {
                outputStream.writeLong(channelId);
            }

            if ((flags & 4) != 0 && maxId != null) {
                outputStream.writeInt(maxId);
            }

            if ((flags & 8) != 0 && readMaxId != null) {
                outputStream.writeInt(readMaxId);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                comments = new True();
                comments.isBareType = true;
                comments.read(inputStream);
            }

            replies = inputStream.readInt();
            repliesPts = inputStream.readInt();
            if ((flags & 2) != 0) {
                recentRepliers = new TLVector<ApiScheme.Peer>(ApiScheme.Peer.class);
                recentRepliers.read(inputStream);
            }

            if ((flags & 1) != 0) {
                channelId = inputStream.readLong();
            }

            if ((flags & 4) != 0) {
                maxId = inputStream.readInt();
            }

            if ((flags & 8) != 0) {
                readMaxId = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "MessageReplies{" +
                    "flags=" + flags +
                    ", comments=" + comments +
                    ", replies=" + replies +
                    ", repliesPts=" + repliesPts +
                    ", recentRepliers=" + recentRepliers +
                    ", channelId=" + channelId +
                    ", maxId=" + maxId +
                    ", readMaxId=" + readMaxId +
                    '}';

        }
    }


    public static class PeerBlocked2 extends ApiScheme.PeerBlocked {
        public static final int ID = 0xe8fd8014;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "peerBlocked";
        public ApiScheme.Peer peerId;
        public int date;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peerId.write(outputStream);

            outputStream.writeInt(date);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peerId = ApiScheme.Peer.readObject(inputStream);
            date = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "PeerBlocked{" +
                    "peerId=" + peerId +
                    ", date=" + date +
                    '}';

        }
    }


    public static class GroupCallDiscarded extends ApiScheme.GroupCall {
        public static final int ID = 0x7780bcb4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCallDiscarded";
        public long id;
        public long accessHash;
        public int duration;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(duration);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            duration = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "GroupCallDiscarded{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    ", duration=" + duration +
                    '}';

        }
    }


    public static class GroupCall2 extends ApiScheme.GroupCall {
        public static final int ID = 0xd597650c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCall";
        public int flags;
        public True joinMuted = null;
        public True canChangeJoinMuted = null;
        public True joinDateAsc = null;
        public True scheduleStartSubscribed = null;
        public True canStartVideo = null;
        public True recordVideoActive = null;
        public True rtmpStream = null;
        public True listenersHidden = null;
        public long id;
        public long accessHash;
        public int participantsCount;
        public String title = null;
        public Integer streamDcId = null;
        public Integer recordStartDate = null;
        public Integer scheduleDate = null;
        public Integer unmutedVideoCount = null;
        public int unmutedVideoLimit;
        public int version;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = joinMuted != null ? (flags | 2) : (flags & ~2);
            flags = canChangeJoinMuted != null ? (flags | 4) : (flags & ~4);
            flags = joinDateAsc != null ? (flags | 64) : (flags & ~64);
            flags = scheduleStartSubscribed != null ? (flags | 256) : (flags & ~256);
            flags = canStartVideo != null ? (flags | 512) : (flags & ~512);
            flags = recordVideoActive != null ? (flags | 2048) : (flags & ~2048);
            flags = rtmpStream != null ? (flags | 4096) : (flags & ~4096);
            flags = listenersHidden != null ? (flags | 8192) : (flags & ~8192);
            flags = title != null ? (flags | 8) : (flags & ~8);
            flags = streamDcId != null ? (flags | 16) : (flags & ~16);
            flags = recordStartDate != null ? (flags | 32) : (flags & ~32);
            flags = scheduleDate != null ? (flags | 128) : (flags & ~128);
            flags = unmutedVideoCount != null ? (flags | 1024) : (flags & ~1024);
            outputStream.writeInt(flags);
            if ((flags & 2) != 0 && joinMuted != null) {
                joinMuted.isBareType = true;
                joinMuted.write(outputStream);
            }

            if ((flags & 4) != 0 && canChangeJoinMuted != null) {
                canChangeJoinMuted.isBareType = true;
                canChangeJoinMuted.write(outputStream);
            }

            if ((flags & 64) != 0 && joinDateAsc != null) {
                joinDateAsc.isBareType = true;
                joinDateAsc.write(outputStream);
            }

            if ((flags & 256) != 0 && scheduleStartSubscribed != null) {
                scheduleStartSubscribed.isBareType = true;
                scheduleStartSubscribed.write(outputStream);
            }

            if ((flags & 512) != 0 && canStartVideo != null) {
                canStartVideo.isBareType = true;
                canStartVideo.write(outputStream);
            }

            if ((flags & 2048) != 0 && recordVideoActive != null) {
                recordVideoActive.isBareType = true;
                recordVideoActive.write(outputStream);
            }

            if ((flags & 4096) != 0 && rtmpStream != null) {
                rtmpStream.isBareType = true;
                rtmpStream.write(outputStream);
            }

            if ((flags & 8192) != 0 && listenersHidden != null) {
                listenersHidden.isBareType = true;
                listenersHidden.write(outputStream);
            }

            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);
            outputStream.writeInt(participantsCount);
            if ((flags & 8) != 0 && title != null) {
                outputStream.writeTLString(title);
            }

            if ((flags & 16) != 0 && streamDcId != null) {
                outputStream.writeInt(streamDcId);
            }

            if ((flags & 32) != 0 && recordStartDate != null) {
                outputStream.writeInt(recordStartDate);
            }

            if ((flags & 128) != 0 && scheduleDate != null) {
                outputStream.writeInt(scheduleDate);
            }

            if ((flags & 1024) != 0 && unmutedVideoCount != null) {
                outputStream.writeInt(unmutedVideoCount);
            }

            outputStream.writeInt(unmutedVideoLimit);
            outputStream.writeInt(version);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 2) != 0) {
                joinMuted = new True();
                joinMuted.isBareType = true;
                joinMuted.read(inputStream);
            }

            if ((flags & 4) != 0) {
                canChangeJoinMuted = new True();
                canChangeJoinMuted.isBareType = true;
                canChangeJoinMuted.read(inputStream);
            }

            if ((flags & 64) != 0) {
                joinDateAsc = new True();
                joinDateAsc.isBareType = true;
                joinDateAsc.read(inputStream);
            }

            if ((flags & 256) != 0) {
                scheduleStartSubscribed = new True();
                scheduleStartSubscribed.isBareType = true;
                scheduleStartSubscribed.read(inputStream);
            }

            if ((flags & 512) != 0) {
                canStartVideo = new True();
                canStartVideo.isBareType = true;
                canStartVideo.read(inputStream);
            }

            if ((flags & 2048) != 0) {
                recordVideoActive = new True();
                recordVideoActive.isBareType = true;
                recordVideoActive.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                rtmpStream = new True();
                rtmpStream.isBareType = true;
                rtmpStream.read(inputStream);
            }

            if ((flags & 8192) != 0) {
                listenersHidden = new True();
                listenersHidden.isBareType = true;
                listenersHidden.read(inputStream);
            }

            id = inputStream.readLong();
            accessHash = inputStream.readLong();
            participantsCount = inputStream.readInt();
            if ((flags & 8) != 0) {
                title = inputStream.readTLString();
            }

            if ((flags & 16) != 0) {
                streamDcId = inputStream.readInt();
            }

            if ((flags & 32) != 0) {
                recordStartDate = inputStream.readInt();
            }

            if ((flags & 128) != 0) {
                scheduleDate = inputStream.readInt();
            }

            if ((flags & 1024) != 0) {
                unmutedVideoCount = inputStream.readInt();
            }

            unmutedVideoLimit = inputStream.readInt();
            version = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "GroupCall{" +
                    "flags=" + flags +
                    ", joinMuted=" + joinMuted +
                    ", canChangeJoinMuted=" + canChangeJoinMuted +
                    ", joinDateAsc=" + joinDateAsc +
                    ", scheduleStartSubscribed=" + scheduleStartSubscribed +
                    ", canStartVideo=" + canStartVideo +
                    ", recordVideoActive=" + recordVideoActive +
                    ", rtmpStream=" + rtmpStream +
                    ", listenersHidden=" + listenersHidden +
                    ", id=" + id +
                    ", accessHash=" + accessHash +
                    ", participantsCount=" + participantsCount +
                    ", title=" + title +
                    ", streamDcId=" + streamDcId +
                    ", recordStartDate=" + recordStartDate +
                    ", scheduleDate=" + scheduleDate +
                    ", unmutedVideoCount=" + unmutedVideoCount +
                    ", unmutedVideoLimit=" + unmutedVideoLimit +
                    ", version=" + version +
                    '}';

        }
    }


    public static class InputGroupCall2 extends ApiScheme.InputGroupCall {
        public static final int ID = 0xd8aa840f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputGroupCall";
        public long id;
        public long accessHash;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);
            outputStream.writeLong(accessHash);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();
            accessHash = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputGroupCall{" +
                    "id=" + id +
                    ", accessHash=" + accessHash +
                    '}';

        }
    }


    public static class GroupCallParticipant2 extends ApiScheme.GroupCallParticipant {
        public static final int ID = 0xeba636fe;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCallParticipant";
        public int flags;
        public True muted = null;
        public True left = null;
        public True canSelfUnmute = null;
        public True justJoined = null;
        public True versioned = null;
        public True min = null;
        public True mutedByYou = null;
        public True volumeByAdmin = null;
        public True self = null;
        public True videoJoined = null;
        public ApiScheme.Peer peer;
        public int date;
        public Integer activeDate = null;
        public int source;
        public Integer volume = null;
        public String about = null;
        public Long raiseHandRating = null;
        public ApiScheme.GroupCallParticipantVideo video = null;
        public ApiScheme.GroupCallParticipantVideo presentation = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = muted != null ? (flags | 1) : (flags & ~1);
            flags = left != null ? (flags | 2) : (flags & ~2);
            flags = canSelfUnmute != null ? (flags | 4) : (flags & ~4);
            flags = justJoined != null ? (flags | 16) : (flags & ~16);
            flags = versioned != null ? (flags | 32) : (flags & ~32);
            flags = min != null ? (flags | 256) : (flags & ~256);
            flags = mutedByYou != null ? (flags | 512) : (flags & ~512);
            flags = volumeByAdmin != null ? (flags | 1024) : (flags & ~1024);
            flags = self != null ? (flags | 4096) : (flags & ~4096);
            flags = videoJoined != null ? (flags | 32768) : (flags & ~32768);
            flags = activeDate != null ? (flags | 8) : (flags & ~8);
            flags = volume != null ? (flags | 128) : (flags & ~128);
            flags = about != null ? (flags | 2048) : (flags & ~2048);
            flags = raiseHandRating != null ? (flags | 8192) : (flags & ~8192);
            flags = video != null ? (flags | 64) : (flags & ~64);
            flags = presentation != null ? (flags | 16384) : (flags & ~16384);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && muted != null) {
                muted.isBareType = true;
                muted.write(outputStream);
            }

            if ((flags & 2) != 0 && left != null) {
                left.isBareType = true;
                left.write(outputStream);
            }

            if ((flags & 4) != 0 && canSelfUnmute != null) {
                canSelfUnmute.isBareType = true;
                canSelfUnmute.write(outputStream);
            }

            if ((flags & 16) != 0 && justJoined != null) {
                justJoined.isBareType = true;
                justJoined.write(outputStream);
            }

            if ((flags & 32) != 0 && versioned != null) {
                versioned.isBareType = true;
                versioned.write(outputStream);
            }

            if ((flags & 256) != 0 && min != null) {
                min.isBareType = true;
                min.write(outputStream);
            }

            if ((flags & 512) != 0 && mutedByYou != null) {
                mutedByYou.isBareType = true;
                mutedByYou.write(outputStream);
            }

            if ((flags & 1024) != 0 && volumeByAdmin != null) {
                volumeByAdmin.isBareType = true;
                volumeByAdmin.write(outputStream);
            }

            if ((flags & 4096) != 0 && self != null) {
                self.isBareType = true;
                self.write(outputStream);
            }

            if ((flags & 32768) != 0 && videoJoined != null) {
                videoJoined.isBareType = true;
                videoJoined.write(outputStream);
            }

            peer.write(outputStream);

            outputStream.writeInt(date);
            if ((flags & 8) != 0 && activeDate != null) {
                outputStream.writeInt(activeDate);
            }

            outputStream.writeInt(source);
            if ((flags & 128) != 0 && volume != null) {
                outputStream.writeInt(volume);
            }

            if ((flags & 2048) != 0 && about != null) {
                outputStream.writeTLString(about);
            }

            if ((flags & 8192) != 0 && raiseHandRating != null) {
                outputStream.writeLong(raiseHandRating);
            }

            if ((flags & 64) != 0 && video != null) {
                video.write(outputStream);
            }

            if ((flags & 16384) != 0 && presentation != null) {
                presentation.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                muted = new True();
                muted.isBareType = true;
                muted.read(inputStream);
            }

            if ((flags & 2) != 0) {
                left = new True();
                left.isBareType = true;
                left.read(inputStream);
            }

            if ((flags & 4) != 0) {
                canSelfUnmute = new True();
                canSelfUnmute.isBareType = true;
                canSelfUnmute.read(inputStream);
            }

            if ((flags & 16) != 0) {
                justJoined = new True();
                justJoined.isBareType = true;
                justJoined.read(inputStream);
            }

            if ((flags & 32) != 0) {
                versioned = new True();
                versioned.isBareType = true;
                versioned.read(inputStream);
            }

            if ((flags & 256) != 0) {
                min = new True();
                min.isBareType = true;
                min.read(inputStream);
            }

            if ((flags & 512) != 0) {
                mutedByYou = new True();
                mutedByYou.isBareType = true;
                mutedByYou.read(inputStream);
            }

            if ((flags & 1024) != 0) {
                volumeByAdmin = new True();
                volumeByAdmin.isBareType = true;
                volumeByAdmin.read(inputStream);
            }

            if ((flags & 4096) != 0) {
                self = new True();
                self.isBareType = true;
                self.read(inputStream);
            }

            if ((flags & 32768) != 0) {
                videoJoined = new True();
                videoJoined.isBareType = true;
                videoJoined.read(inputStream);
            }

            peer = ApiScheme.Peer.readObject(inputStream);
            date = inputStream.readInt();
            if ((flags & 8) != 0) {
                activeDate = inputStream.readInt();
            }

            source = inputStream.readInt();
            if ((flags & 128) != 0) {
                volume = inputStream.readInt();
            }

            if ((flags & 2048) != 0) {
                about = inputStream.readTLString();
            }

            if ((flags & 8192) != 0) {
                raiseHandRating = inputStream.readLong();
            }

            if ((flags & 64) != 0) {
                video = ApiScheme.GroupCallParticipantVideo.readObject(inputStream);
            }

            if ((flags & 16384) != 0) {
                presentation = ApiScheme.GroupCallParticipantVideo.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "GroupCallParticipant{" +
                    "flags=" + flags +
                    ", muted=" + muted +
                    ", left=" + left +
                    ", canSelfUnmute=" + canSelfUnmute +
                    ", justJoined=" + justJoined +
                    ", versioned=" + versioned +
                    ", min=" + min +
                    ", mutedByYou=" + mutedByYou +
                    ", volumeByAdmin=" + volumeByAdmin +
                    ", self=" + self +
                    ", videoJoined=" + videoJoined +
                    ", peer=" + peer +
                    ", date=" + date +
                    ", activeDate=" + activeDate +
                    ", source=" + source +
                    ", volume=" + volume +
                    ", about=" + about +
                    ", raiseHandRating=" + raiseHandRating +
                    ", video=" + video +
                    ", presentation=" + presentation +
                    '}';

        }
    }


    public static class InlineQueryPeerTypeSameBotPM extends ApiScheme.InlineQueryPeerType {
        public static final int ID = 0x3081ed9d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineQueryPeerTypeSameBotPM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InlineQueryPeerTypeSameBotPM{" +
                    '}';

        }
    }


    public static class InlineQueryPeerTypePM extends ApiScheme.InlineQueryPeerType {
        public static final int ID = 0x833c0fac;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineQueryPeerTypePM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InlineQueryPeerTypePM{" +
                    '}';

        }
    }


    public static class InlineQueryPeerTypeChat extends ApiScheme.InlineQueryPeerType {
        public static final int ID = 0xd766c50a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineQueryPeerTypeChat";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InlineQueryPeerTypeChat{" +
                    '}';

        }
    }


    public static class InlineQueryPeerTypeMegagroup extends ApiScheme.InlineQueryPeerType {
        public static final int ID = 0x5ec4be43;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineQueryPeerTypeMegagroup";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InlineQueryPeerTypeMegagroup{" +
                    '}';

        }
    }


    public static class InlineQueryPeerTypeBroadcast extends ApiScheme.InlineQueryPeerType {
        public static final int ID = 0x6334ee9a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inlineQueryPeerTypeBroadcast";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "InlineQueryPeerTypeBroadcast{" +
                    '}';

        }
    }


    public static class ChatInviteImporter2 extends ApiScheme.ChatInviteImporter {
        public static final int ID = 0x8c5adfd9;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatInviteImporter";
        public int flags;
        public True requested = null;
        public long userId;
        public int date;
        public String about = null;
        public Long approvedBy = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = requested != null ? (flags | 1) : (flags & ~1);
            flags = about != null ? (flags | 4) : (flags & ~4);
            flags = approvedBy != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && requested != null) {
                requested.isBareType = true;
                requested.write(outputStream);
            }

            outputStream.writeLong(userId);
            outputStream.writeInt(date);
            if ((flags & 4) != 0 && about != null) {
                outputStream.writeTLString(about);
            }

            if ((flags & 2) != 0 && approvedBy != null) {
                outputStream.writeLong(approvedBy);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                requested = new True();
                requested.isBareType = true;
                requested.read(inputStream);
            }

            userId = inputStream.readLong();
            date = inputStream.readInt();
            if ((flags & 4) != 0) {
                about = inputStream.readTLString();
            }

            if ((flags & 2) != 0) {
                approvedBy = inputStream.readLong();
            }


        }

        @Override
        public String toString() {
            return "ChatInviteImporter{" +
                    "flags=" + flags +
                    ", requested=" + requested +
                    ", userId=" + userId +
                    ", date=" + date +
                    ", about=" + about +
                    ", approvedBy=" + approvedBy +
                    '}';

        }
    }


    public static class ChatAdminWithInvites2 extends ApiScheme.ChatAdminWithInvites {
        public static final int ID = 0xf2ecef23;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "chatAdminWithInvites";
        public long adminId;
        public int invitesCount;
        public int revokedInvitesCount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(adminId);
            outputStream.writeInt(invitesCount);
            outputStream.writeInt(revokedInvitesCount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            adminId = inputStream.readLong();
            invitesCount = inputStream.readInt();
            revokedInvitesCount = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ChatAdminWithInvites{" +
                    "adminId=" + adminId +
                    ", invitesCount=" + invitesCount +
                    ", revokedInvitesCount=" + revokedInvitesCount +
                    '}';

        }
    }


    public static class GroupCallParticipantVideoSourceGroup2 extends ApiScheme.GroupCallParticipantVideoSourceGroup {
        public static final int ID = 0xdcb118b7;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCallParticipantVideoSourceGroup";
        public String semantics;
        public TLVector<TLInt> sources;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(semantics);
            sources.isBareTypeItem = true;
            sources.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            semantics = inputStream.readTLString();
            sources = new TLVector<TLInt>(TLInt.class);
            sources.isBareTypeItem = true;
            sources.read(inputStream);


        }

        @Override
        public String toString() {
            return "GroupCallParticipantVideoSourceGroup{" +
                    "semantics=" + semantics +
                    ", sources=" + sources +
                    '}';

        }
    }


    public static class GroupCallParticipantVideo2 extends ApiScheme.GroupCallParticipantVideo {
        public static final int ID = 0x67753ac8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCallParticipantVideo";
        public int flags;
        public True paused = null;
        public String endpoint;
        public TLVector<ApiScheme.GroupCallParticipantVideoSourceGroup> sourceGroups;
        public Integer audioSource = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = paused != null ? (flags | 1) : (flags & ~1);
            flags = audioSource != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && paused != null) {
                paused.isBareType = true;
                paused.write(outputStream);
            }

            outputStream.writeTLString(endpoint);
            sourceGroups.write(outputStream);

            if ((flags & 2) != 0 && audioSource != null) {
                outputStream.writeInt(audioSource);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                paused = new True();
                paused.isBareType = true;
                paused.read(inputStream);
            }

            endpoint = inputStream.readTLString();
            sourceGroups = new TLVector<ApiScheme.GroupCallParticipantVideoSourceGroup>(ApiScheme.GroupCallParticipantVideoSourceGroup.class);
            sourceGroups.read(inputStream);

            if ((flags & 2) != 0) {
                audioSource = inputStream.readInt();
            }


        }

        @Override
        public String toString() {
            return "GroupCallParticipantVideo{" +
                    "flags=" + flags +
                    ", paused=" + paused +
                    ", endpoint=" + endpoint +
                    ", sourceGroups=" + sourceGroups +
                    ", audioSource=" + audioSource +
                    '}';

        }
    }


    public static class BotCommandScopeDefault extends ApiScheme.BotCommandScope {
        public static final int ID = 0x2f6cb2ab;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopeDefault";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotCommandScopeDefault{" +
                    '}';

        }
    }


    public static class BotCommandScopeUsers extends ApiScheme.BotCommandScope {
        public static final int ID = 0x3c4f04d8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopeUsers";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotCommandScopeUsers{" +
                    '}';

        }
    }


    public static class BotCommandScopeChats extends ApiScheme.BotCommandScope {
        public static final int ID = 0x6fe1a881;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopeChats";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotCommandScopeChats{" +
                    '}';

        }
    }


    public static class BotCommandScopeChatAdmins extends ApiScheme.BotCommandScope {
        public static final int ID = 0xb9aa606a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopeChatAdmins";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotCommandScopeChatAdmins{" +
                    '}';

        }
    }


    public static class BotCommandScopePeer extends ApiScheme.BotCommandScope {
        public static final int ID = 0xdb9d897d;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopePeer";
        public ApiScheme.InputPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "BotCommandScopePeer{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class BotCommandScopePeerAdmins extends ApiScheme.BotCommandScope {
        public static final int ID = 0x3fd863d1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopePeerAdmins";
        public ApiScheme.InputPeer peer;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "BotCommandScopePeerAdmins{" +
                    "peer=" + peer +
                    '}';

        }
    }


    public static class BotCommandScopePeerUser extends ApiScheme.BotCommandScope {
        public static final int ID = 0xa1321f3;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botCommandScopePeerUser";
        public ApiScheme.InputPeer peer;
        public ApiScheme.InputUser userId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            userId.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            userId = ApiScheme.InputUser.readObject(inputStream);

        }

        @Override
        public String toString() {
            return "BotCommandScopePeerUser{" +
                    "peer=" + peer +
                    ", userId=" + userId +
                    '}';

        }
    }


    public static class SponsoredMessage2 extends ApiScheme.SponsoredMessage {
        public static final int ID = 0x3a836df8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "sponsoredMessage";
        public int flags;
        public True recommended = null;
        public byte[] randomId;
        public ApiScheme.Peer fromId = null;
        public ApiScheme.ChatInvite chatInvite = null;
        public String chatInviteHash = null;
        public Integer channelPost = null;
        public String startParam = null;
        public String message;
        public TLVector<ApiScheme.MessageEntity> entities = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = recommended != null ? (flags | 32) : (flags & ~32);
            flags = fromId != null ? (flags | 8) : (flags & ~8);
            flags = chatInvite != null ? (flags | 16) : (flags & ~16);
            flags = chatInviteHash != null ? (flags | 16) : (flags & ~16);
            flags = channelPost != null ? (flags | 4) : (flags & ~4);
            flags = startParam != null ? (flags | 1) : (flags & ~1);
            flags = entities != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 32) != 0 && recommended != null) {
                recommended.isBareType = true;
                recommended.write(outputStream);
            }

            outputStream.writeTLBytes(randomId);
            if ((flags & 8) != 0 && fromId != null) {
                fromId.write(outputStream);
            }

            if ((flags & 16) != 0 && chatInvite != null) {
                chatInvite.write(outputStream);
            }

            if ((flags & 16) != 0 && chatInviteHash != null) {
                outputStream.writeTLString(chatInviteHash);
            }

            if ((flags & 4) != 0 && channelPost != null) {
                outputStream.writeInt(channelPost);
            }

            if ((flags & 1) != 0 && startParam != null) {
                outputStream.writeTLString(startParam);
            }

            outputStream.writeTLString(message);
            if ((flags & 2) != 0 && entities != null) {
                entities.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 32) != 0) {
                recommended = new True();
                recommended.isBareType = true;
                recommended.read(inputStream);
            }

            randomId = inputStream.readTLBytes();
            if ((flags & 8) != 0) {
                fromId = ApiScheme.Peer.readObject(inputStream);
            }

            if ((flags & 16) != 0) {
                chatInvite = ApiScheme.ChatInvite.readObject(inputStream);
            }

            if ((flags & 16) != 0) {
                chatInviteHash = inputStream.readTLString();
            }

            if ((flags & 4) != 0) {
                channelPost = inputStream.readInt();
            }

            if ((flags & 1) != 0) {
                startParam = inputStream.readTLString();
            }

            message = inputStream.readTLString();
            if ((flags & 2) != 0) {
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "SponsoredMessage{" +
                    "flags=" + flags +
                    ", recommended=" + recommended +
                    ", randomId=" + randomId +
                    ", fromId=" + fromId +
                    ", chatInvite=" + chatInvite +
                    ", chatInviteHash=" + chatInviteHash +
                    ", channelPost=" + channelPost +
                    ", startParam=" + startParam +
                    ", message=" + message +
                    ", entities=" + entities +
                    '}';

        }
    }


    public static class SearchResultsCalendarPeriod2 extends ApiScheme.SearchResultsCalendarPeriod {
        public static final int ID = 0xc9b0539f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "searchResultsCalendarPeriod";
        public int date;
        public int minMsgId;
        public int maxMsgId;
        public int count;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(date);
            outputStream.writeInt(minMsgId);
            outputStream.writeInt(maxMsgId);
            outputStream.writeInt(count);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            date = inputStream.readInt();
            minMsgId = inputStream.readInt();
            maxMsgId = inputStream.readInt();
            count = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SearchResultsCalendarPeriod{" +
                    "date=" + date +
                    ", minMsgId=" + minMsgId +
                    ", maxMsgId=" + maxMsgId +
                    ", count=" + count +
                    '}';

        }
    }


    public static class SearchResultPosition extends ApiScheme.SearchResultsPosition {
        public static final int ID = 0x7f648b67;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "searchResultPosition";
        public int msgId;
        public int date;
        public int offset;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(msgId);
            outputStream.writeInt(date);
            outputStream.writeInt(offset);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            msgId = inputStream.readInt();
            date = inputStream.readInt();
            offset = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "SearchResultPosition{" +
                    "msgId=" + msgId +
                    ", date=" + date +
                    ", offset=" + offset +
                    '}';

        }
    }


    public static class ReactionCount2 extends ApiScheme.ReactionCount {
        public static final int ID = 0x6fb250d1;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "reactionCount";
        public int flags;
        public True chosen = null;
        public String reaction;
        public int count;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = chosen != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && chosen != null) {
                chosen.isBareType = true;
                chosen.write(outputStream);
            }

            outputStream.writeTLString(reaction);
            outputStream.writeInt(count);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                chosen = new True();
                chosen.isBareType = true;
                chosen.read(inputStream);
            }

            reaction = inputStream.readTLString();
            count = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "ReactionCount{" +
                    "flags=" + flags +
                    ", chosen=" + chosen +
                    ", reaction=" + reaction +
                    ", count=" + count +
                    '}';

        }
    }


    public static class MessageReactions2 extends ApiScheme.MessageReactions {
        public static final int ID = 0x4f2b9479;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messageReactions";
        public int flags;
        public True min = null;
        public True canSeeList = null;
        public TLVector<ApiScheme.ReactionCount> results;
        public TLVector<ApiScheme.MessagePeerReaction> recentReactions = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = min != null ? (flags | 1) : (flags & ~1);
            flags = canSeeList != null ? (flags | 4) : (flags & ~4);
            flags = recentReactions != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && min != null) {
                min.isBareType = true;
                min.write(outputStream);
            }

            if ((flags & 4) != 0 && canSeeList != null) {
                canSeeList.isBareType = true;
                canSeeList.write(outputStream);
            }

            results.write(outputStream);

            if ((flags & 2) != 0 && recentReactions != null) {
                recentReactions.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                min = new True();
                min.isBareType = true;
                min.read(inputStream);
            }

            if ((flags & 4) != 0) {
                canSeeList = new True();
                canSeeList.isBareType = true;
                canSeeList.read(inputStream);
            }

            results = new TLVector<ApiScheme.ReactionCount>(ApiScheme.ReactionCount.class);
            results.read(inputStream);

            if ((flags & 2) != 0) {
                recentReactions = new TLVector<ApiScheme.MessagePeerReaction>(ApiScheme.MessagePeerReaction.class);
                recentReactions.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "MessageReactions{" +
                    "flags=" + flags +
                    ", min=" + min +
                    ", canSeeList=" + canSeeList +
                    ", results=" + results +
                    ", recentReactions=" + recentReactions +
                    '}';

        }
    }


    public static class AvailableReaction2 extends ApiScheme.AvailableReaction {
        public static final int ID = 0xc077ec01;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "availableReaction";
        public int flags;
        public True inactive = null;
        public True premium = null;
        public String reaction;
        public String title;
        public ApiScheme.Document staticIcon;
        public ApiScheme.Document appearAnimation;
        public ApiScheme.Document selectAnimation;
        public ApiScheme.Document activateAnimation;
        public ApiScheme.Document effectAnimation;
        public ApiScheme.Document aroundAnimation = null;
        public ApiScheme.Document centerIcon = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = inactive != null ? (flags | 1) : (flags & ~1);
            flags = premium != null ? (flags | 4) : (flags & ~4);
            flags = aroundAnimation != null ? (flags | 2) : (flags & ~2);
            flags = centerIcon != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && inactive != null) {
                inactive.isBareType = true;
                inactive.write(outputStream);
            }

            if ((flags & 4) != 0 && premium != null) {
                premium.isBareType = true;
                premium.write(outputStream);
            }

            outputStream.writeTLString(reaction);
            outputStream.writeTLString(title);
            staticIcon.write(outputStream);

            appearAnimation.write(outputStream);

            selectAnimation.write(outputStream);

            activateAnimation.write(outputStream);

            effectAnimation.write(outputStream);

            if ((flags & 2) != 0 && aroundAnimation != null) {
                aroundAnimation.write(outputStream);
            }

            if ((flags & 2) != 0 && centerIcon != null) {
                centerIcon.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                inactive = new True();
                inactive.isBareType = true;
                inactive.read(inputStream);
            }

            if ((flags & 4) != 0) {
                premium = new True();
                premium.isBareType = true;
                premium.read(inputStream);
            }

            reaction = inputStream.readTLString();
            title = inputStream.readTLString();
            staticIcon = ApiScheme.Document.readObject(inputStream);
            appearAnimation = ApiScheme.Document.readObject(inputStream);
            selectAnimation = ApiScheme.Document.readObject(inputStream);
            activateAnimation = ApiScheme.Document.readObject(inputStream);
            effectAnimation = ApiScheme.Document.readObject(inputStream);
            if ((flags & 2) != 0) {
                aroundAnimation = ApiScheme.Document.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                centerIcon = ApiScheme.Document.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "AvailableReaction{" +
                    "flags=" + flags +
                    ", inactive=" + inactive +
                    ", premium=" + premium +
                    ", reaction=" + reaction +
                    ", title=" + title +
                    ", staticIcon=" + staticIcon +
                    ", appearAnimation=" + appearAnimation +
                    ", selectAnimation=" + selectAnimation +
                    ", activateAnimation=" + activateAnimation +
                    ", effectAnimation=" + effectAnimation +
                    ", aroundAnimation=" + aroundAnimation +
                    ", centerIcon=" + centerIcon +
                    '}';

        }
    }


    public static class MessagePeerReaction2 extends ApiScheme.MessagePeerReaction {
        public static final int ID = 0x51b67eff;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "messagePeerReaction";
        public int flags;
        public True big = null;
        public True unread = null;
        public ApiScheme.Peer peerId;
        public String reaction;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = big != null ? (flags | 1) : (flags & ~1);
            flags = unread != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && big != null) {
                big.isBareType = true;
                big.write(outputStream);
            }

            if ((flags & 2) != 0 && unread != null) {
                unread.isBareType = true;
                unread.write(outputStream);
            }

            peerId.write(outputStream);

            outputStream.writeTLString(reaction);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                big = new True();
                big.isBareType = true;
                big.read(inputStream);
            }

            if ((flags & 2) != 0) {
                unread = new True();
                unread.isBareType = true;
                unread.read(inputStream);
            }

            peerId = ApiScheme.Peer.readObject(inputStream);
            reaction = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "MessagePeerReaction{" +
                    "flags=" + flags +
                    ", big=" + big +
                    ", unread=" + unread +
                    ", peerId=" + peerId +
                    ", reaction=" + reaction +
                    '}';

        }
    }


    public static class GroupCallStreamChannel2 extends ApiScheme.GroupCallStreamChannel {
        public static final int ID = 0x80eb48af;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "groupCallStreamChannel";
        public int channel;
        public int scale;
        public long lastTimestampMs;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(channel);
            outputStream.writeInt(scale);
            outputStream.writeLong(lastTimestampMs);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            channel = inputStream.readInt();
            scale = inputStream.readInt();
            lastTimestampMs = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "GroupCallStreamChannel{" +
                    "channel=" + channel +
                    ", scale=" + scale +
                    ", lastTimestampMs=" + lastTimestampMs +
                    '}';

        }
    }


    public static class AttachMenuBotIconColor2 extends ApiScheme.AttachMenuBotIconColor {
        public static final int ID = 0x4576f3f0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBotIconColor";
        public String name;
        public int color;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(name);
            outputStream.writeInt(color);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            name = inputStream.readTLString();
            color = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "AttachMenuBotIconColor{" +
                    "name=" + name +
                    ", color=" + color +
                    '}';

        }
    }


    public static class AttachMenuBotIcon2 extends ApiScheme.AttachMenuBotIcon {
        public static final int ID = 0xb2a7386b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBotIcon";
        public int flags;
        public String name;
        public ApiScheme.Document icon;
        public TLVector<ApiScheme.AttachMenuBotIconColor> colors = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = colors != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeTLString(name);
            icon.write(outputStream);

            if ((flags & 1) != 0 && colors != null) {
                colors.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            name = inputStream.readTLString();
            icon = ApiScheme.Document.readObject(inputStream);
            if ((flags & 1) != 0) {
                colors = new TLVector<ApiScheme.AttachMenuBotIconColor>(ApiScheme.AttachMenuBotIconColor.class);
                colors.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "AttachMenuBotIcon{" +
                    "flags=" + flags +
                    ", name=" + name +
                    ", icon=" + icon +
                    ", colors=" + colors +
                    '}';

        }
    }


    public static class AttachMenuBot2 extends ApiScheme.AttachMenuBot {
        public static final int ID = 0xc8aa2cd2;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBot";
        public int flags;
        public True inactive = null;
        public True hasSettings = null;
        public long botId;
        public String shortName;
        public TLVector<ApiScheme.AttachMenuPeerType> peerTypes;
        public TLVector<ApiScheme.AttachMenuBotIcon> icons;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = inactive != null ? (flags | 1) : (flags & ~1);
            flags = hasSettings != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && inactive != null) {
                inactive.isBareType = true;
                inactive.write(outputStream);
            }

            if ((flags & 2) != 0 && hasSettings != null) {
                hasSettings.isBareType = true;
                hasSettings.write(outputStream);
            }

            outputStream.writeLong(botId);
            outputStream.writeTLString(shortName);
            peerTypes.write(outputStream);

            icons.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                inactive = new True();
                inactive.isBareType = true;
                inactive.read(inputStream);
            }

            if ((flags & 2) != 0) {
                hasSettings = new True();
                hasSettings.isBareType = true;
                hasSettings.read(inputStream);
            }

            botId = inputStream.readLong();
            shortName = inputStream.readTLString();
            peerTypes = new TLVector<ApiScheme.AttachMenuPeerType>(ApiScheme.AttachMenuPeerType.class);
            peerTypes.read(inputStream);

            icons = new TLVector<ApiScheme.AttachMenuBotIcon>(ApiScheme.AttachMenuBotIcon.class);
            icons.read(inputStream);


        }

        @Override
        public String toString() {
            return "AttachMenuBot{" +
                    "flags=" + flags +
                    ", inactive=" + inactive +
                    ", hasSettings=" + hasSettings +
                    ", botId=" + botId +
                    ", shortName=" + shortName +
                    ", peerTypes=" + peerTypes +
                    ", icons=" + icons +
                    '}';

        }
    }


    public static class AttachMenuBotsNotModified extends ApiScheme.AttachMenuBots {
        public static final int ID = 0xf1d88a5c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBotsNotModified";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuBotsNotModified{" +
                    '}';

        }
    }


    public static class AttachMenuBots2 extends ApiScheme.AttachMenuBots {
        public static final int ID = 0x3c4301c0;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBots";
        public long hash;
        public TLVector<ApiScheme.AttachMenuBot> bots;
        public TLVector<ApiScheme.User> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(hash);
            bots.write(outputStream);

            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            hash = inputStream.readLong();
            bots = new TLVector<ApiScheme.AttachMenuBot>(ApiScheme.AttachMenuBot.class);
            bots.read(inputStream);

            users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "AttachMenuBots{" +
                    "hash=" + hash +
                    ", bots=" + bots +
                    ", users=" + users +
                    '}';

        }
    }


    public static class AttachMenuBotsBot2 extends ApiScheme.AttachMenuBotsBot {
        public static final int ID = 0x93bf667f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuBotsBot";
        public ApiScheme.AttachMenuBot bot;
        public TLVector<ApiScheme.User> users;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            bot.write(outputStream);

            users.write(outputStream);


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            bot = ApiScheme.AttachMenuBot.readObject(inputStream);
            users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
            users.read(inputStream);


        }

        @Override
        public String toString() {
            return "AttachMenuBotsBot{" +
                    "bot=" + bot +
                    ", users=" + users +
                    '}';

        }
    }


    public static class WebViewResultUrl extends ApiScheme.WebViewResult {
        public static final int ID = 0xc14557c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webViewResultUrl";
        public long queryId;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(queryId);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            queryId = inputStream.readLong();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "WebViewResultUrl{" +
                    "queryId=" + queryId +
                    ", url=" + url +
                    '}';

        }
    }


    public static class SimpleWebViewResultUrl extends ApiScheme.SimpleWebViewResult {
        public static final int ID = 0x882f76bb;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "simpleWebViewResultUrl";
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "SimpleWebViewResultUrl{" +
                    "url=" + url +
                    '}';

        }
    }


    public static class WebViewMessageSent2 extends ApiScheme.WebViewMessageSent {
        public static final int ID = 0xc94511c;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "webViewMessageSent";
        public int flags;
        public ApiScheme.InputBotInlineMessageID msgId = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = msgId != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && msgId != null) {
                msgId.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                msgId = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
            }


        }

        @Override
        public String toString() {
            return "WebViewMessageSent{" +
                    "flags=" + flags +
                    ", msgId=" + msgId +
                    '}';

        }
    }


    public static class BotMenuButtonDefault extends ApiScheme.BotMenuButton {
        public static final int ID = 0x7533a588;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botMenuButtonDefault";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotMenuButtonDefault{" +
                    '}';

        }
    }


    public static class BotMenuButtonCommands extends ApiScheme.BotMenuButton {
        public static final int ID = 0x4258c205;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botMenuButtonCommands";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "BotMenuButtonCommands{" +
                    '}';

        }
    }


    public static class BotMenuButton2 extends ApiScheme.BotMenuButton {
        public static final int ID = 0xc7b57ce6;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "botMenuButton";
        public String text;
        public String url;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(text);
            outputStream.writeTLString(url);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            text = inputStream.readTLString();
            url = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "BotMenuButton{" +
                    "text=" + text +
                    ", url=" + url +
                    '}';

        }
    }


    public static class NotificationSoundDefault extends ApiScheme.NotificationSound {
        public static final int ID = 0x97e8bebe;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notificationSoundDefault";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "NotificationSoundDefault{" +
                    '}';

        }
    }


    public static class NotificationSoundNone extends ApiScheme.NotificationSound {
        public static final int ID = 0x6f0c34df;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notificationSoundNone";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "NotificationSoundNone{" +
                    '}';

        }
    }


    public static class NotificationSoundLocal extends ApiScheme.NotificationSound {
        public static final int ID = 0x830b9ae4;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notificationSoundLocal";
        public String title;
        public String data;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(title);
            outputStream.writeTLString(data);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            title = inputStream.readTLString();
            data = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "NotificationSoundLocal{" +
                    "title=" + title +
                    ", data=" + data +
                    '}';

        }
    }


    public static class NotificationSoundRingtone extends ApiScheme.NotificationSound {
        public static final int ID = 0xff6c8049;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "notificationSoundRingtone";
        public long id;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(id);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            id = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "NotificationSoundRingtone{" +
                    "id=" + id +
                    '}';

        }
    }


    public static class AttachMenuPeerTypeSameBotPM extends ApiScheme.AttachMenuPeerType {
        public static final int ID = 0x7d6be90e;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuPeerTypeSameBotPM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuPeerTypeSameBotPM{" +
                    '}';

        }
    }


    public static class AttachMenuPeerTypeBotPM extends ApiScheme.AttachMenuPeerType {
        public static final int ID = 0xc32bfa1a;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuPeerTypeBotPM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuPeerTypeBotPM{" +
                    '}';

        }
    }


    public static class AttachMenuPeerTypePM extends ApiScheme.AttachMenuPeerType {
        public static final int ID = 0xf146d31f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuPeerTypePM";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuPeerTypePM{" +
                    '}';

        }
    }


    public static class AttachMenuPeerTypeChat extends ApiScheme.AttachMenuPeerType {
        public static final int ID = 0x509113f;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuPeerTypeChat";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuPeerTypeChat{" +
                    '}';

        }
    }


    public static class AttachMenuPeerTypeBroadcast extends ApiScheme.AttachMenuPeerType {
        public static final int ID = 0x7bfbdefc;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "attachMenuPeerTypeBroadcast";


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {

        }

        @Override
        public String toString() {
            return "AttachMenuPeerTypeBroadcast{" +
                    '}';

        }
    }


    public static class InputInvoiceMessage extends ApiScheme.InputInvoice {
        public static final int ID = 0xc5b56859;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputInvoiceMessage";
        public ApiScheme.InputPeer peer;
        public int msgId;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            peer.write(outputStream);

            outputStream.writeInt(msgId);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            peer = ApiScheme.InputPeer.readObject(inputStream);
            msgId = inputStream.readInt();

        }

        @Override
        public String toString() {
            return "InputInvoiceMessage{" +
                    "peer=" + peer +
                    ", msgId=" + msgId +
                    '}';

        }
    }


    public static class InputInvoiceSlug extends ApiScheme.InputInvoice {
        public static final int ID = 0xc326caef;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputInvoiceSlug";
        public String slug;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(slug);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            slug = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "InputInvoiceSlug{" +
                    "slug=" + slug +
                    '}';

        }
    }


    public static class InputStorePaymentPremiumSubscription extends ApiScheme.InputStorePaymentPurpose {
        public static final int ID = 0xa6751e66;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStorePaymentPremiumSubscription";
        public int flags;
        public True restore = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = restore != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            if ((flags & 1) != 0 && restore != null) {
                restore.isBareType = true;
                restore.write(outputStream);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            if ((flags & 1) != 0) {
                restore = new True();
                restore.isBareType = true;
                restore.read(inputStream);
            }


        }

        @Override
        public String toString() {
            return "InputStorePaymentPremiumSubscription{" +
                    "flags=" + flags +
                    ", restore=" + restore +
                    '}';

        }
    }


    public static class InputStorePaymentGiftPremium extends ApiScheme.InputStorePaymentPurpose {
        public static final int ID = 0x616f7fe8;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "inputStorePaymentGiftPremium";
        public ApiScheme.InputUser userId;
        public String currency;
        public long amount;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            userId.write(outputStream);

            outputStream.writeTLString(currency);
            outputStream.writeLong(amount);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            userId = ApiScheme.InputUser.readObject(inputStream);
            currency = inputStream.readTLString();
            amount = inputStream.readLong();

        }

        @Override
        public String toString() {
            return "InputStorePaymentGiftPremium{" +
                    "userId=" + userId +
                    ", currency=" + currency +
                    ", amount=" + amount +
                    '}';

        }
    }


    public static class PremiumGiftOption2 extends ApiScheme.PremiumGiftOption {
        public static final int ID = 0x74c34319;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "premiumGiftOption";
        public int flags;
        public int months;
        public String currency;
        public long amount;
        public String botUrl;
        public String storeProduct = null;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = storeProduct != null ? (flags | 1) : (flags & ~1);
            outputStream.writeInt(flags);
            outputStream.writeInt(months);
            outputStream.writeTLString(currency);
            outputStream.writeLong(amount);
            outputStream.writeTLString(botUrl);
            if ((flags & 1) != 0 && storeProduct != null) {
                outputStream.writeTLString(storeProduct);
            }


        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            months = inputStream.readInt();
            currency = inputStream.readTLString();
            amount = inputStream.readLong();
            botUrl = inputStream.readTLString();
            if ((flags & 1) != 0) {
                storeProduct = inputStream.readTLString();
            }


        }

        @Override
        public String toString() {
            return "PremiumGiftOption{" +
                    "flags=" + flags +
                    ", months=" + months +
                    ", currency=" + currency +
                    ", amount=" + amount +
                    ", botUrl=" + botUrl +
                    ", storeProduct=" + storeProduct +
                    '}';

        }
    }


    public static class PaymentFormMethod2 extends ApiScheme.PaymentFormMethod {
        public static final int ID = 0x88f8f21b;
        public static final boolean IS_CONSTRUCTOR = true;
        public static final String NAME = "paymentFormMethod";
        public String url;
        public String title;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeTLString(url);
            outputStream.writeTLString(title);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            url = inputStream.readTLString();
            title = inputStream.readTLString();

        }

        @Override
        public String toString() {
            return "PaymentFormMethod{" +
                    "url=" + url +
                    ", title=" + title +
                    '}';

        }
    }


    public static class InvokeAfterMsg extends TLMethod<TLObject> {
        public static final int ID = 0xcb9f372d;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeAfterMsg";
        public long msgId;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(msgId);
            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            msgId = inputStream.readLong();
            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeAfterMsg{" +
                    "msgId=" + msgId +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InvokeAfterMsgs extends TLMethod<TLObject> {
        public static final int ID = 0x3dc4b4f0;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeAfterMsgs";
        public TLVector<TLLong> msgIds;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            msgIds.isBareTypeItem = true;
            msgIds.write(outputStream);

            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            msgIds = new TLVector<TLLong>(TLLong.class);
            msgIds.isBareTypeItem = true;
            msgIds.read(inputStream);

            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeAfterMsgs{" +
                    "msgIds=" + msgIds +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InitConnection extends TLMethod<TLObject> {
        public static final int ID = 0xc1cd5ea9;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "initConnection";
        public int flags;
        public int apiId;
        public String deviceModel;
        public String systemVersion;
        public String appVersion;
        public String systemLangCode;
        public String langPack;
        public String langCode;
        public ApiScheme.InputClientProxy proxy = null;
        public ApiScheme.JSONValue params = null;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            flags = proxy != null ? (flags | 1) : (flags & ~1);
            flags = params != null ? (flags | 2) : (flags & ~2);
            outputStream.writeInt(flags);
            outputStream.writeInt(apiId);
            outputStream.writeTLString(deviceModel);
            outputStream.writeTLString(systemVersion);
            outputStream.writeTLString(appVersion);
            outputStream.writeTLString(systemLangCode);
            outputStream.writeTLString(langPack);
            outputStream.writeTLString(langCode);
            if ((flags & 1) != 0 && proxy != null) {
                proxy.write(outputStream);
            }

            if ((flags & 2) != 0 && params != null) {
                params.write(outputStream);
            }

            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            flags = inputStream.readInt();
            apiId = inputStream.readInt();
            deviceModel = inputStream.readTLString();
            systemVersion = inputStream.readTLString();
            appVersion = inputStream.readTLString();
            systemLangCode = inputStream.readTLString();
            langPack = inputStream.readTLString();
            langCode = inputStream.readTLString();
            if ((flags & 1) != 0) {
                proxy = ApiScheme.InputClientProxy.readObject(inputStream);
            }

            if ((flags & 2) != 0) {
                params = ApiScheme.JSONValue.readObject(inputStream);
            }

            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InitConnection{" +
                    "flags=" + flags +
                    ", apiId=" + apiId +
                    ", deviceModel=" + deviceModel +
                    ", systemVersion=" + systemVersion +
                    ", appVersion=" + appVersion +
                    ", systemLangCode=" + systemLangCode +
                    ", langPack=" + langPack +
                    ", langCode=" + langCode +
                    ", proxy=" + proxy +
                    ", params=" + params +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InvokeWithLayer extends TLMethod<TLObject> {
        public static final int ID = 0xda9b0d0d;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeWithLayer";
        public int layer;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeInt(layer);
            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            layer = inputStream.readInt();
            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeWithLayer{" +
                    "layer=" + layer +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InvokeWithoutUpdates extends TLMethod<TLObject> {
        public static final int ID = 0xbf9459b7;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeWithoutUpdates";
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeWithoutUpdates{" +
                    "query=" + query +
                    '}';

        }
    }


    public static class InvokeWithMessagesRange extends TLMethod<TLObject> {
        public static final int ID = 0x365275f2;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeWithMessagesRange";
        public ApiScheme.MessageRange range;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            range.write(outputStream);

            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            range = ApiScheme.MessageRange.readObject(inputStream);
            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeWithMessagesRange{" +
                    "range=" + range +
                    ", query=" + query +
                    '}';

        }
    }


    public static class InvokeWithTakeout extends TLMethod<TLObject> {
        public static final int ID = 0xaca9fd2e;
        public static final boolean IS_CONSTRUCTOR = false;
        public static final String NAME = "invokeWithTakeout";
        public long takeoutId;
        public TLObject query;


        @Override
        public int getId() {
            return ID;
        }

        @Override
        public boolean isConstructor() {
            return IS_CONSTRUCTOR;
        }

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        protected void writeParams(TLOutputStream outputStream) throws Exception {
            outputStream.writeLong(takeoutId);
            query.write(outputStream);

        }

        @Override
        protected void readParams(TLInputStream inputStream) throws Exception {
            takeoutId = inputStream.readLong();
            query = TLContext.read(inputStream);

        }

        @Override
        public String toString() {
            return "InvokeWithTakeout{" +
                    "takeoutId=" + takeoutId +
                    ", query=" + query +
                    '}';

        }
    }


    public static abstract class NsStorage {
        public static abstract class FileType extends TLObject {
            public static FileType readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsStorage.FileType a = null;
                if (id == NsStorage.FileUnknown.ID) {
                    a = new NsStorage.FileUnknown();
                } else if (id == NsStorage.FilePartial.ID) {
                    a = new NsStorage.FilePartial();
                } else if (id == NsStorage.FileJpeg.ID) {
                    a = new NsStorage.FileJpeg();
                } else if (id == NsStorage.FileGif.ID) {
                    a = new NsStorage.FileGif();
                } else if (id == NsStorage.FilePng.ID) {
                    a = new NsStorage.FilePng();
                } else if (id == NsStorage.FilePdf.ID) {
                    a = new NsStorage.FilePdf();
                } else if (id == NsStorage.FileMp3.ID) {
                    a = new NsStorage.FileMp3();
                } else if (id == NsStorage.FileMov.ID) {
                    a = new NsStorage.FileMov();
                } else if (id == NsStorage.FileMp4.ID) {
                    a = new NsStorage.FileMp4();
                } else if (id == NsStorage.FileWebp.ID) {
                    a = new NsStorage.FileWebp();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class FileUnknown extends NsStorage.FileType {
            public static final int ID = 0xaa963b05;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileUnknown";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileUnknown{" +
                        '}';

            }
        }


        public static class FilePartial extends NsStorage.FileType {
            public static final int ID = 0x40bc6f52;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.filePartial";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FilePartial{" +
                        '}';

            }
        }


        public static class FileJpeg extends NsStorage.FileType {
            public static final int ID = 0x7efe0e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileJpeg";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileJpeg{" +
                        '}';

            }
        }


        public static class FileGif extends NsStorage.FileType {
            public static final int ID = 0xcae1aadf;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileGif";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileGif{" +
                        '}';

            }
        }


        public static class FilePng extends NsStorage.FileType {
            public static final int ID = 0xa4f63c0;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.filePng";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FilePng{" +
                        '}';

            }
        }


        public static class FilePdf extends NsStorage.FileType {
            public static final int ID = 0xae1e508d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.filePdf";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FilePdf{" +
                        '}';

            }
        }


        public static class FileMp3 extends NsStorage.FileType {
            public static final int ID = 0x528a0677;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileMp3";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileMp3{" +
                        '}';

            }
        }


        public static class FileMov extends NsStorage.FileType {
            public static final int ID = 0x4b09ebbc;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileMov";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileMov{" +
                        '}';

            }
        }


        public static class FileMp4 extends NsStorage.FileType {
            public static final int ID = 0xb3cea0e4;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileMp4";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileMp4{" +
                        '}';

            }
        }


        public static class FileWebp extends NsStorage.FileType {
            public static final int ID = 0x1081464c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "storage.fileWebp";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FileWebp{" +
                        '}';

            }
        }


    }

    public static abstract class NsAuth {
        public static abstract class SentCode extends TLObject {
            public static SentCode readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.SentCode a = null;
                if (id == NsAuth.SentCode2.ID) {
                    a = new NsAuth.SentCode2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Authorization extends TLObject {
            public static Authorization readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.Authorization a = null;
                if (id == NsAuth.Authorization2.ID) {
                    a = new NsAuth.Authorization2();
                } else if (id == NsAuth.AuthorizationSignUpRequired.ID) {
                    a = new NsAuth.AuthorizationSignUpRequired();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ExportedAuthorization extends TLObject {
            public static ExportedAuthorization readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.ExportedAuthorization a = null;
                if (id == NsAuth.ExportedAuthorization2.ID) {
                    a = new NsAuth.ExportedAuthorization2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PasswordRecovery extends TLObject {
            public static PasswordRecovery readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.PasswordRecovery a = null;
                if (id == NsAuth.PasswordRecovery2.ID) {
                    a = new NsAuth.PasswordRecovery2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class CodeType extends TLObject {
            public static CodeType readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.CodeType a = null;
                if (id == NsAuth.CodeTypeSms.ID) {
                    a = new NsAuth.CodeTypeSms();
                } else if (id == NsAuth.CodeTypeCall.ID) {
                    a = new NsAuth.CodeTypeCall();
                } else if (id == NsAuth.CodeTypeFlashCall.ID) {
                    a = new NsAuth.CodeTypeFlashCall();
                } else if (id == NsAuth.CodeTypeMissedCall.ID) {
                    a = new NsAuth.CodeTypeMissedCall();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SentCodeType extends TLObject {
            public static SentCodeType readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.SentCodeType a = null;
                if (id == NsAuth.SentCodeTypeApp.ID) {
                    a = new NsAuth.SentCodeTypeApp();
                } else if (id == NsAuth.SentCodeTypeSms.ID) {
                    a = new NsAuth.SentCodeTypeSms();
                } else if (id == NsAuth.SentCodeTypeCall.ID) {
                    a = new NsAuth.SentCodeTypeCall();
                } else if (id == NsAuth.SentCodeTypeFlashCall.ID) {
                    a = new NsAuth.SentCodeTypeFlashCall();
                } else if (id == NsAuth.SentCodeTypeMissedCall.ID) {
                    a = new NsAuth.SentCodeTypeMissedCall();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class LoginToken extends TLObject {
            public static LoginToken readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.LoginToken a = null;
                if (id == NsAuth.LoginToken2.ID) {
                    a = new NsAuth.LoginToken2();
                } else if (id == NsAuth.LoginTokenMigrateTo.ID) {
                    a = new NsAuth.LoginTokenMigrateTo();
                } else if (id == NsAuth.LoginTokenSuccess.ID) {
                    a = new NsAuth.LoginTokenSuccess();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class LoggedOut extends TLObject {
            public static LoggedOut readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAuth.LoggedOut a = null;
                if (id == NsAuth.LoggedOut2.ID) {
                    a = new NsAuth.LoggedOut2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class SentCode2 extends NsAuth.SentCode {
            public static final int ID = 0x5e002502;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCode";
            public int flags;
            public ApiScheme.NsAuth.SentCodeType type;
            public String phoneCodeHash;
            public ApiScheme.NsAuth.CodeType nextType = null;
            public Integer timeout = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = nextType != null ? (flags | 2) : (flags & ~2);
                flags = timeout != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                type.write(outputStream);

                outputStream.writeTLString(phoneCodeHash);
                if ((flags & 2) != 0 && nextType != null) {
                    nextType.write(outputStream);
                }

                if ((flags & 4) != 0 && timeout != null) {
                    outputStream.writeInt(timeout);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                type = ApiScheme.NsAuth.SentCodeType.readObject(inputStream);
                phoneCodeHash = inputStream.readTLString();
                if ((flags & 2) != 0) {
                    nextType = ApiScheme.NsAuth.CodeType.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    timeout = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "SentCode{" +
                        "flags=" + flags +
                        ", type=" + type +
                        ", phoneCodeHash=" + phoneCodeHash +
                        ", nextType=" + nextType +
                        ", timeout=" + timeout +
                        '}';

            }
        }


        public static class Authorization2 extends NsAuth.Authorization {
            public static final int ID = 0x33fb7bb8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.authorization";
            public int flags;
            public True setupPasswordRequired = null;
            public Integer otherwiseReloginDays = null;
            public Integer tmpSessions = null;
            public ApiScheme.User user;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = setupPasswordRequired != null ? (flags | 2) : (flags & ~2);
                flags = otherwiseReloginDays != null ? (flags | 2) : (flags & ~2);
                flags = tmpSessions != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && setupPasswordRequired != null) {
                    setupPasswordRequired.isBareType = true;
                    setupPasswordRequired.write(outputStream);
                }

                if ((flags & 2) != 0 && otherwiseReloginDays != null) {
                    outputStream.writeInt(otherwiseReloginDays);
                }

                if ((flags & 1) != 0 && tmpSessions != null) {
                    outputStream.writeInt(tmpSessions);
                }

                user.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    setupPasswordRequired = new True();
                    setupPasswordRequired.isBareType = true;
                    setupPasswordRequired.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    otherwiseReloginDays = inputStream.readInt();
                }

                if ((flags & 1) != 0) {
                    tmpSessions = inputStream.readInt();
                }

                user = ApiScheme.User.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "Authorization{" +
                        "flags=" + flags +
                        ", setupPasswordRequired=" + setupPasswordRequired +
                        ", otherwiseReloginDays=" + otherwiseReloginDays +
                        ", tmpSessions=" + tmpSessions +
                        ", user=" + user +
                        '}';

            }
        }


        public static class AuthorizationSignUpRequired extends NsAuth.Authorization {
            public static final int ID = 0x44747e9a;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.authorizationSignUpRequired";
            public int flags;
            public ApiScheme.NsHelp.TermsOfService termsOfService = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = termsOfService != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && termsOfService != null) {
                    termsOfService.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    termsOfService = ApiScheme.NsHelp.TermsOfService.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "AuthorizationSignUpRequired{" +
                        "flags=" + flags +
                        ", termsOfService=" + termsOfService +
                        '}';

            }
        }


        public static class ExportedAuthorization2 extends NsAuth.ExportedAuthorization {
            public static final int ID = 0xb434e2b8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.exportedAuthorization";
            public long id;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(id);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = inputStream.readLong();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "ExportedAuthorization{" +
                        "id=" + id +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class PasswordRecovery2 extends NsAuth.PasswordRecovery {
            public static final int ID = 0x137948a5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.passwordRecovery";
            public String emailPattern;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(emailPattern);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                emailPattern = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "PasswordRecovery{" +
                        "emailPattern=" + emailPattern +
                        '}';

            }
        }


        public static class CodeTypeSms extends NsAuth.CodeType {
            public static final int ID = 0x72a3158c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.codeTypeSms";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CodeTypeSms{" +
                        '}';

            }
        }


        public static class CodeTypeCall extends NsAuth.CodeType {
            public static final int ID = 0x741cd3e3;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.codeTypeCall";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CodeTypeCall{" +
                        '}';

            }
        }


        public static class CodeTypeFlashCall extends NsAuth.CodeType {
            public static final int ID = 0x226ccefb;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.codeTypeFlashCall";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CodeTypeFlashCall{" +
                        '}';

            }
        }


        public static class CodeTypeMissedCall extends NsAuth.CodeType {
            public static final int ID = 0xd61ad6ee;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.codeTypeMissedCall";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CodeTypeMissedCall{" +
                        '}';

            }
        }


        public static class SentCodeTypeApp extends NsAuth.SentCodeType {
            public static final int ID = 0x3dbb5986;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCodeTypeApp";
            public int length;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(length);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                length = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentCodeTypeApp{" +
                        "length=" + length +
                        '}';

            }
        }


        public static class SentCodeTypeSms extends NsAuth.SentCodeType {
            public static final int ID = 0xc000bba2;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCodeTypeSms";
            public int length;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(length);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                length = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentCodeTypeSms{" +
                        "length=" + length +
                        '}';

            }
        }


        public static class SentCodeTypeCall extends NsAuth.SentCodeType {
            public static final int ID = 0x5353e5a7;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCodeTypeCall";
            public int length;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(length);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                length = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentCodeTypeCall{" +
                        "length=" + length +
                        '}';

            }
        }


        public static class SentCodeTypeFlashCall extends NsAuth.SentCodeType {
            public static final int ID = 0xab03c6d9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCodeTypeFlashCall";
            public String pattern;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(pattern);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pattern = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SentCodeTypeFlashCall{" +
                        "pattern=" + pattern +
                        '}';

            }
        }


        public static class SentCodeTypeMissedCall extends NsAuth.SentCodeType {
            public static final int ID = 0x82006484;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.sentCodeTypeMissedCall";
            public String prefix;
            public int length;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(prefix);
                outputStream.writeInt(length);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                prefix = inputStream.readTLString();
                length = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentCodeTypeMissedCall{" +
                        "prefix=" + prefix +
                        ", length=" + length +
                        '}';

            }
        }


        public static class LoginToken2 extends NsAuth.LoginToken {
            public static final int ID = 0x629f1980;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.loginToken";
            public int expires;
            public byte[] token;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(expires);
                outputStream.writeTLBytes(token);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                expires = inputStream.readInt();
                token = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "LoginToken{" +
                        "expires=" + expires +
                        ", token=" + token +
                        '}';

            }
        }


        public static class LoginTokenMigrateTo extends NsAuth.LoginToken {
            public static final int ID = 0x68e9916;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.loginTokenMigrateTo";
            public int dcId;
            public byte[] token;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(dcId);
                outputStream.writeTLBytes(token);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dcId = inputStream.readInt();
                token = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "LoginTokenMigrateTo{" +
                        "dcId=" + dcId +
                        ", token=" + token +
                        '}';

            }
        }


        public static class LoginTokenSuccess extends NsAuth.LoginToken {
            public static final int ID = 0x390d5c5e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.loginTokenSuccess";
            public ApiScheme.NsAuth.Authorization authorization;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                authorization.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                authorization = ApiScheme.NsAuth.Authorization.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "LoginTokenSuccess{" +
                        "authorization=" + authorization +
                        '}';

            }
        }


        public static class LoggedOut2 extends NsAuth.LoggedOut {
            public static final int ID = 0xc3a2835f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "auth.loggedOut";
            public int flags;
            public byte[] futureAuthToken = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = futureAuthToken != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && futureAuthToken != null) {
                    outputStream.writeTLBytes(futureAuthToken);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    futureAuthToken = inputStream.readTLBytes();
                }


            }

            @Override
            public String toString() {
                return "LoggedOut{" +
                        "flags=" + flags +
                        ", futureAuthToken=" + futureAuthToken +
                        '}';

            }
        }


        public static class SendCode extends TLMethod<NsAuth.SentCode> {
            public static final int ID = 0xa677244f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.sendCode";
            public String phoneNumber;
            public int apiId;
            public String apiHash;
            public ApiScheme.CodeSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeInt(apiId);
                outputStream.writeTLString(apiHash);
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                apiId = inputStream.readInt();
                apiHash = inputStream.readTLString();
                settings = ApiScheme.CodeSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendCode{" +
                        "phoneNumber=" + phoneNumber +
                        ", apiId=" + apiId +
                        ", apiHash=" + apiHash +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class SignUp extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0x80eee427;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.signUp";
            public String phoneNumber;
            public String phoneCodeHash;
            public String firstName;
            public String lastName;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);
                outputStream.writeTLString(firstName);
                outputStream.writeTLString(lastName);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();
                firstName = inputStream.readTLString();
                lastName = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SignUp{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        ", firstName=" + firstName +
                        ", lastName=" + lastName +
                        '}';

            }
        }


        public static class SignIn extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0xbcd51581;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.signIn";
            public String phoneNumber;
            public String phoneCodeHash;
            public String phoneCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);
                outputStream.writeTLString(phoneCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();
                phoneCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SignIn{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        ", phoneCode=" + phoneCode +
                        '}';

            }
        }


        public static class LogOut extends TLMethod<NsAuth.LoggedOut> {
            public static final int ID = 0x3e72ba19;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.logOut";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "LogOut{" +
                        '}';

            }
        }


        public static class ResetAuthorizations extends TLMethod<Bool> {
            public static final int ID = 0x9fab0d1a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.resetAuthorizations";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetAuthorizations{" +
                        '}';

            }
        }


        public static class ExportAuthorization extends TLMethod<NsAuth.ExportedAuthorization> {
            public static final int ID = 0xe5bfffcd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.exportAuthorization";
            public int dcId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(dcId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dcId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ExportAuthorization{" +
                        "dcId=" + dcId +
                        '}';

            }
        }


        public static class ImportAuthorization extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0xa57a7dad;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.importAuthorization";
            public long id;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(id);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = inputStream.readLong();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "ImportAuthorization{" +
                        "id=" + id +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class BindTempAuthKey extends TLMethod<Bool> {
            public static final int ID = 0xcdd42a05;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.bindTempAuthKey";
            public long permAuthKeyId;
            public long nonce;
            public int expiresAt;
            public byte[] encryptedMessage;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(permAuthKeyId);
                outputStream.writeLong(nonce);
                outputStream.writeInt(expiresAt);
                outputStream.writeTLBytes(encryptedMessage);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                permAuthKeyId = inputStream.readLong();
                nonce = inputStream.readLong();
                expiresAt = inputStream.readInt();
                encryptedMessage = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "BindTempAuthKey{" +
                        "permAuthKeyId=" + permAuthKeyId +
                        ", nonce=" + nonce +
                        ", expiresAt=" + expiresAt +
                        ", encryptedMessage=" + encryptedMessage +
                        '}';

            }
        }


        public static class ImportBotAuthorization extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0x67a3ff2c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.importBotAuthorization";
            public int flags;
            public int apiId;
            public String apiHash;
            public String botAuthToken;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(flags);
                outputStream.writeInt(apiId);
                outputStream.writeTLString(apiHash);
                outputStream.writeTLString(botAuthToken);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                apiId = inputStream.readInt();
                apiHash = inputStream.readTLString();
                botAuthToken = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ImportBotAuthorization{" +
                        "flags=" + flags +
                        ", apiId=" + apiId +
                        ", apiHash=" + apiHash +
                        ", botAuthToken=" + botAuthToken +
                        '}';

            }
        }


        public static class CheckPassword extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0xd18b4d16;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.checkPassword";
            public ApiScheme.InputCheckPasswordSRP password;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                password.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "CheckPassword{" +
                        "password=" + password +
                        '}';

            }
        }


        public static class RequestPasswordRecovery extends TLMethod<NsAuth.PasswordRecovery> {
            public static final int ID = 0xd897bc66;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.requestPasswordRecovery";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "RequestPasswordRecovery{" +
                        '}';

            }
        }


        public static class RecoverPassword extends TLMethod<NsAuth.Authorization> {
            public static final int ID = 0x37096c70;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.recoverPassword";
            public int flags;
            public String code;
            public ApiScheme.NsAccount.PasswordInputSettings newSettings = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = newSettings != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeTLString(code);
                if ((flags & 1) != 0 && newSettings != null) {
                    newSettings.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                code = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    newSettings = ApiScheme.NsAccount.PasswordInputSettings.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "RecoverPassword{" +
                        "flags=" + flags +
                        ", code=" + code +
                        ", newSettings=" + newSettings +
                        '}';

            }
        }


        public static class ResendCode extends TLMethod<NsAuth.SentCode> {
            public static final int ID = 0x3ef1a9bf;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.resendCode";
            public String phoneNumber;
            public String phoneCodeHash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ResendCode{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        '}';

            }
        }


        public static class CancelCode extends TLMethod<Bool> {
            public static final int ID = 0x1f040578;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.cancelCode";
            public String phoneNumber;
            public String phoneCodeHash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CancelCode{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        '}';

            }
        }


        public static class DropTempAuthKeys extends TLMethod<Bool> {
            public static final int ID = 0x8e48a188;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.dropTempAuthKeys";
            public TLVector<TLLong> exceptAuthKeys;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                exceptAuthKeys.isBareTypeItem = true;
                exceptAuthKeys.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                exceptAuthKeys = new TLVector<TLLong>(TLLong.class);
                exceptAuthKeys.isBareTypeItem = true;
                exceptAuthKeys.read(inputStream);


            }

            @Override
            public String toString() {
                return "DropTempAuthKeys{" +
                        "exceptAuthKeys=" + exceptAuthKeys +
                        '}';

            }
        }


        public static class ExportLoginToken extends TLMethod<NsAuth.LoginToken> {
            public static final int ID = 0xb7e085fe;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.exportLoginToken";
            public int apiId;
            public String apiHash;
            public TLVector<TLLong> exceptIds;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(apiId);
                outputStream.writeTLString(apiHash);
                exceptIds.isBareTypeItem = true;
                exceptIds.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                apiId = inputStream.readInt();
                apiHash = inputStream.readTLString();
                exceptIds = new TLVector<TLLong>(TLLong.class);
                exceptIds.isBareTypeItem = true;
                exceptIds.read(inputStream);


            }

            @Override
            public String toString() {
                return "ExportLoginToken{" +
                        "apiId=" + apiId +
                        ", apiHash=" + apiHash +
                        ", exceptIds=" + exceptIds +
                        '}';

            }
        }


        public static class ImportLoginToken extends TLMethod<NsAuth.LoginToken> {
            public static final int ID = 0x95ac5ce4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.importLoginToken";
            public byte[] token;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(token);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                token = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "ImportLoginToken{" +
                        "token=" + token +
                        '}';

            }
        }


        public static class AcceptLoginToken extends TLMethod<Authorization> {
            public static final int ID = 0xe894ad4d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.acceptLoginToken";
            public byte[] token;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(token);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                token = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "AcceptLoginToken{" +
                        "token=" + token +
                        '}';

            }
        }


        public static class CheckRecoveryPassword extends TLMethod<Bool> {
            public static final int ID = 0xd36bf79;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "auth.checkRecoveryPassword";
            public String code;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(code);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                code = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckRecoveryPassword{" +
                        "code=" + code +
                        '}';

            }
        }


    }

    public static abstract class NsContacts {
        public static abstract class Contacts extends TLObject {
            public static Contacts readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.Contacts a = null;
                if (id == NsContacts.ContactsNotModified.ID) {
                    a = new NsContacts.ContactsNotModified();
                } else if (id == NsContacts.Contacts2.ID) {
                    a = new NsContacts.Contacts2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ImportedContacts extends TLObject {
            public static ImportedContacts readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.ImportedContacts a = null;
                if (id == NsContacts.ImportedContacts2.ID) {
                    a = new NsContacts.ImportedContacts2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Blocked extends TLObject {
            public static Blocked readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.Blocked a = null;
                if (id == NsContacts.Blocked2.ID) {
                    a = new NsContacts.Blocked2();
                } else if (id == NsContacts.BlockedSlice.ID) {
                    a = new NsContacts.BlockedSlice();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Found extends TLObject {
            public static Found readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.Found a = null;
                if (id == NsContacts.Found2.ID) {
                    a = new NsContacts.Found2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ResolvedPeer extends TLObject {
            public static ResolvedPeer readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.ResolvedPeer a = null;
                if (id == NsContacts.ResolvedPeer2.ID) {
                    a = new NsContacts.ResolvedPeer2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TopPeers extends TLObject {
            public static TopPeers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsContacts.TopPeers a = null;
                if (id == NsContacts.TopPeersNotModified.ID) {
                    a = new NsContacts.TopPeersNotModified();
                } else if (id == NsContacts.TopPeers2.ID) {
                    a = new NsContacts.TopPeers2();
                } else if (id == NsContacts.TopPeersDisabled.ID) {
                    a = new NsContacts.TopPeersDisabled();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class ContactsNotModified extends NsContacts.Contacts {
            public static final int ID = 0xb74ba9d2;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.contactsNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ContactsNotModified{" +
                        '}';

            }
        }


        public static class Contacts2 extends NsContacts.Contacts {
            public static final int ID = 0xeae87e42;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.contacts";
            public TLVector<ApiScheme.Contact> contacts;
            public int savedCount;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                contacts.write(outputStream);

                outputStream.writeInt(savedCount);
                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                contacts = new TLVector<ApiScheme.Contact>(ApiScheme.Contact.class);
                contacts.read(inputStream);

                savedCount = inputStream.readInt();
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Contacts{" +
                        "contacts=" + contacts +
                        ", savedCount=" + savedCount +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ImportedContacts2 extends NsContacts.ImportedContacts {
            public static final int ID = 0x77d01c3b;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.importedContacts";
            public TLVector<ApiScheme.ImportedContact> imported;
            public TLVector<ApiScheme.PopularContact> popularInvites;
            public TLVector<TLLong> retryContacts;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                imported.write(outputStream);

                popularInvites.write(outputStream);

                retryContacts.isBareTypeItem = true;
                retryContacts.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                imported = new TLVector<ApiScheme.ImportedContact>(ApiScheme.ImportedContact.class);
                imported.read(inputStream);

                popularInvites = new TLVector<ApiScheme.PopularContact>(ApiScheme.PopularContact.class);
                popularInvites.read(inputStream);

                retryContacts = new TLVector<TLLong>(TLLong.class);
                retryContacts.isBareTypeItem = true;
                retryContacts.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ImportedContacts{" +
                        "imported=" + imported +
                        ", popularInvites=" + popularInvites +
                        ", retryContacts=" + retryContacts +
                        ", users=" + users +
                        '}';

            }
        }


        public static class Blocked2 extends NsContacts.Blocked {
            public static final int ID = 0xade1591;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.blocked";
            public TLVector<ApiScheme.PeerBlocked> blocked;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                blocked.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                blocked = new TLVector<ApiScheme.PeerBlocked>(ApiScheme.PeerBlocked.class);
                blocked.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Blocked{" +
                        "blocked=" + blocked +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class BlockedSlice extends NsContacts.Blocked {
            public static final int ID = 0xe1664194;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.blockedSlice";
            public int count;
            public TLVector<ApiScheme.PeerBlocked> blocked;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                blocked.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                blocked = new TLVector<ApiScheme.PeerBlocked>(ApiScheme.PeerBlocked.class);
                blocked.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "BlockedSlice{" +
                        "count=" + count +
                        ", blocked=" + blocked +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class Found2 extends NsContacts.Found {
            public static final int ID = 0xb3134d9d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.found";
            public TLVector<ApiScheme.Peer> myResults;
            public TLVector<ApiScheme.Peer> results;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                myResults.write(outputStream);

                results.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                myResults = new TLVector<ApiScheme.Peer>(ApiScheme.Peer.class);
                myResults.read(inputStream);

                results = new TLVector<ApiScheme.Peer>(ApiScheme.Peer.class);
                results.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Found{" +
                        "myResults=" + myResults +
                        ", results=" + results +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ResolvedPeer2 extends NsContacts.ResolvedPeer {
            public static final int ID = 0x7f077ad9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.resolvedPeer";
            public ApiScheme.Peer peer;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.Peer.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ResolvedPeer{" +
                        "peer=" + peer +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class TopPeersNotModified extends NsContacts.TopPeers {
            public static final int ID = 0xde266ef5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.topPeersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "TopPeersNotModified{" +
                        '}';

            }
        }


        public static class TopPeers2 extends NsContacts.TopPeers {
            public static final int ID = 0x70b772a8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.topPeers";
            public TLVector<ApiScheme.TopPeerCategoryPeers> categories;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                categories.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                categories = new TLVector<ApiScheme.TopPeerCategoryPeers>(ApiScheme.TopPeerCategoryPeers.class);
                categories.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "TopPeers{" +
                        "categories=" + categories +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class TopPeersDisabled extends NsContacts.TopPeers {
            public static final int ID = 0xb52c939d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "contacts.topPeersDisabled";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "TopPeersDisabled{" +
                        '}';

            }
        }


        public static class GetContactIDs extends TLMethod<TLVector<TLInt>> {
            public static final int ID = 0x7adc669d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getContactIDs";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetContactIDs{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetStatuses extends TLMethod<TLVector<ContactStatus>> {
            public static final int ID = 0xc4a353ee;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getStatuses";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetStatuses{" +
                        '}';

            }
        }


        public static class GetContacts extends TLMethod<NsContacts.Contacts> {
            public static final int ID = 0x5dd69e12;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getContacts";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetContacts{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class ImportContacts extends TLMethod<NsContacts.ImportedContacts> {
            public static final int ID = 0x2c800be5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.importContacts";
            public TLVector<ApiScheme.InputContact> contacts;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                contacts.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                contacts = new TLVector<ApiScheme.InputContact>(ApiScheme.InputContact.class);
                contacts.read(inputStream);


            }

            @Override
            public String toString() {
                return "ImportContacts{" +
                        "contacts=" + contacts +
                        '}';

            }
        }


        public static class DeleteContacts extends TLMethod<Updates> {
            public static final int ID = 0x96a0e00;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.deleteContacts";
            public TLVector<ApiScheme.InputUser> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteContacts{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class DeleteByPhones extends TLMethod<Bool> {
            public static final int ID = 0x1013fd9e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.deleteByPhones";
            public TLVector<TLString> phones;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                phones.isBareTypeItem = true;
                phones.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phones = new TLVector<TLString>(TLString.class);
                phones.isBareTypeItem = true;
                phones.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteByPhones{" +
                        "phones=" + phones +
                        '}';

            }
        }


        public static class Block extends TLMethod<Bool> {
            public static final int ID = 0x68cc1411;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.block";
            public ApiScheme.InputPeer id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "Block{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class Unblock extends TLMethod<Bool> {
            public static final int ID = 0xbea65d50;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.unblock";
            public ApiScheme.InputPeer id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "Unblock{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetBlocked extends TLMethod<NsContacts.Blocked> {
            public static final int ID = 0xf57c350f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getBlocked";
            public int offset;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(offset);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                offset = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetBlocked{" +
                        "offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class Search extends TLMethod<NsContacts.Found> {
            public static final int ID = 0x11f812d8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.search";
            public String q;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(q);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                q = inputStream.readTLString();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "Search{" +
                        "q=" + q +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class ResolveUsername extends TLMethod<NsContacts.ResolvedPeer> {
            public static final int ID = 0xf93ccba3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.resolveUsername";
            public String username;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(username);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                username = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ResolveUsername{" +
                        "username=" + username +
                        '}';

            }
        }


        public static class GetTopPeers extends TLMethod<NsContacts.TopPeers> {
            public static final int ID = 0x973478b6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getTopPeers";
            public int flags;
            public True correspondents = null;
            public True botsPm = null;
            public True botsInline = null;
            public True phoneCalls = null;
            public True forwardUsers = null;
            public True forwardChats = null;
            public True groups = null;
            public True channels = null;
            public int offset;
            public int limit;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = correspondents != null ? (flags | 1) : (flags & ~1);
                flags = botsPm != null ? (flags | 2) : (flags & ~2);
                flags = botsInline != null ? (flags | 4) : (flags & ~4);
                flags = phoneCalls != null ? (flags | 8) : (flags & ~8);
                flags = forwardUsers != null ? (flags | 16) : (flags & ~16);
                flags = forwardChats != null ? (flags | 32) : (flags & ~32);
                flags = groups != null ? (flags | 1024) : (flags & ~1024);
                flags = channels != null ? (flags | 32768) : (flags & ~32768);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && correspondents != null) {
                    correspondents.isBareType = true;
                    correspondents.write(outputStream);
                }

                if ((flags & 2) != 0 && botsPm != null) {
                    botsPm.isBareType = true;
                    botsPm.write(outputStream);
                }

                if ((flags & 4) != 0 && botsInline != null) {
                    botsInline.isBareType = true;
                    botsInline.write(outputStream);
                }

                if ((flags & 8) != 0 && phoneCalls != null) {
                    phoneCalls.isBareType = true;
                    phoneCalls.write(outputStream);
                }

                if ((flags & 16) != 0 && forwardUsers != null) {
                    forwardUsers.isBareType = true;
                    forwardUsers.write(outputStream);
                }

                if ((flags & 32) != 0 && forwardChats != null) {
                    forwardChats.isBareType = true;
                    forwardChats.write(outputStream);
                }

                if ((flags & 1024) != 0 && groups != null) {
                    groups.isBareType = true;
                    groups.write(outputStream);
                }

                if ((flags & 32768) != 0 && channels != null) {
                    channels.isBareType = true;
                    channels.write(outputStream);
                }

                outputStream.writeInt(offset);
                outputStream.writeInt(limit);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    correspondents = new True();
                    correspondents.isBareType = true;
                    correspondents.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    botsPm = new True();
                    botsPm.isBareType = true;
                    botsPm.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    botsInline = new True();
                    botsInline.isBareType = true;
                    botsInline.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    phoneCalls = new True();
                    phoneCalls.isBareType = true;
                    phoneCalls.read(inputStream);
                }

                if ((flags & 16) != 0) {
                    forwardUsers = new True();
                    forwardUsers.isBareType = true;
                    forwardUsers.read(inputStream);
                }

                if ((flags & 32) != 0) {
                    forwardChats = new True();
                    forwardChats.isBareType = true;
                    forwardChats.read(inputStream);
                }

                if ((flags & 1024) != 0) {
                    groups = new True();
                    groups.isBareType = true;
                    groups.read(inputStream);
                }

                if ((flags & 32768) != 0) {
                    channels = new True();
                    channels.isBareType = true;
                    channels.read(inputStream);
                }

                offset = inputStream.readInt();
                limit = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetTopPeers{" +
                        "flags=" + flags +
                        ", correspondents=" + correspondents +
                        ", botsPm=" + botsPm +
                        ", botsInline=" + botsInline +
                        ", phoneCalls=" + phoneCalls +
                        ", forwardUsers=" + forwardUsers +
                        ", forwardChats=" + forwardChats +
                        ", groups=" + groups +
                        ", channels=" + channels +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class ResetTopPeerRating extends TLMethod<Bool> {
            public static final int ID = 0x1ae373ac;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.resetTopPeerRating";
            public ApiScheme.TopPeerCategory category;
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                category.write(outputStream);

                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                category = ApiScheme.TopPeerCategory.readObject(inputStream);
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ResetTopPeerRating{" +
                        "category=" + category +
                        ", peer=" + peer +
                        '}';

            }
        }


        public static class ResetSaved extends TLMethod<Bool> {
            public static final int ID = 0x879537f1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.resetSaved";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetSaved{" +
                        '}';

            }
        }


        public static class GetSaved extends TLMethod<TLVector<SavedContact>> {
            public static final int ID = 0x82f1e39f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getSaved";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSaved{" +
                        '}';

            }
        }


        public static class ToggleTopPeers extends TLMethod<Bool> {
            public static final int ID = 0x8514bdda;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.toggleTopPeers";
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleTopPeers{" +
                        "enabled=" + enabled +
                        '}';

            }
        }


        public static class AddContact extends TLMethod<Updates> {
            public static final int ID = 0xe8f463d0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.addContact";
            public int flags;
            public True addPhonePrivacyException = null;
            public ApiScheme.InputUser id;
            public String firstName;
            public String lastName;
            public String phone;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = addPhonePrivacyException != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && addPhonePrivacyException != null) {
                    addPhonePrivacyException.isBareType = true;
                    addPhonePrivacyException.write(outputStream);
                }

                id.write(outputStream);

                outputStream.writeTLString(firstName);
                outputStream.writeTLString(lastName);
                outputStream.writeTLString(phone);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    addPhonePrivacyException = new True();
                    addPhonePrivacyException.isBareType = true;
                    addPhonePrivacyException.read(inputStream);
                }

                id = ApiScheme.InputUser.readObject(inputStream);
                firstName = inputStream.readTLString();
                lastName = inputStream.readTLString();
                phone = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "AddContact{" +
                        "flags=" + flags +
                        ", addPhonePrivacyException=" + addPhonePrivacyException +
                        ", id=" + id +
                        ", firstName=" + firstName +
                        ", lastName=" + lastName +
                        ", phone=" + phone +
                        '}';

            }
        }


        public static class AcceptContact extends TLMethod<Updates> {
            public static final int ID = 0xf831a20f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.acceptContact";
            public ApiScheme.InputUser id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AcceptContact{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetLocated extends TLMethod<Updates> {
            public static final int ID = 0xd348bc44;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.getLocated";
            public int flags;
            public True background = null;
            public ApiScheme.InputGeoPoint geoPoint;
            public Integer selfExpires = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = background != null ? (flags | 2) : (flags & ~2);
                flags = selfExpires != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                geoPoint.write(outputStream);

                if ((flags & 1) != 0 && selfExpires != null) {
                    outputStream.writeInt(selfExpires);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
                if ((flags & 1) != 0) {
                    selfExpires = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "GetLocated{" +
                        "flags=" + flags +
                        ", background=" + background +
                        ", geoPoint=" + geoPoint +
                        ", selfExpires=" + selfExpires +
                        '}';

            }
        }


        public static class BlockFromReplies extends TLMethod<Updates> {
            public static final int ID = 0x29a8962c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.blockFromReplies";
            public int flags;
            public True deleteMessage = null;
            public True deleteHistory = null;
            public True reportSpam = null;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = deleteMessage != null ? (flags | 1) : (flags & ~1);
                flags = deleteHistory != null ? (flags | 2) : (flags & ~2);
                flags = reportSpam != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && deleteMessage != null) {
                    deleteMessage.isBareType = true;
                    deleteMessage.write(outputStream);
                }

                if ((flags & 2) != 0 && deleteHistory != null) {
                    deleteHistory.isBareType = true;
                    deleteHistory.write(outputStream);
                }

                if ((flags & 4) != 0 && reportSpam != null) {
                    reportSpam.isBareType = true;
                    reportSpam.write(outputStream);
                }

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    deleteMessage = new True();
                    deleteMessage.isBareType = true;
                    deleteMessage.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    deleteHistory = new True();
                    deleteHistory.isBareType = true;
                    deleteHistory.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    reportSpam = new True();
                    reportSpam.isBareType = true;
                    reportSpam.read(inputStream);
                }

                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "BlockFromReplies{" +
                        "flags=" + flags +
                        ", deleteMessage=" + deleteMessage +
                        ", deleteHistory=" + deleteHistory +
                        ", reportSpam=" + reportSpam +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class ResolvePhone extends TLMethod<NsContacts.ResolvedPeer> {
            public static final int ID = 0x8af94344;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "contacts.resolvePhone";
            public String phone;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phone);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phone = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ResolvePhone{" +
                        "phone=" + phone +
                        '}';

            }
        }


    }

    public static abstract class NsMessages {
        public static abstract class Dialogs extends TLObject {
            public static Dialogs readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.Dialogs a = null;
                if (id == NsMessages.Dialogs2.ID) {
                    a = new NsMessages.Dialogs2();
                } else if (id == NsMessages.DialogsSlice.ID) {
                    a = new NsMessages.DialogsSlice();
                } else if (id == NsMessages.DialogsNotModified.ID) {
                    a = new NsMessages.DialogsNotModified();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Messages extends TLObject {
            public static Messages readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.Messages a = null;
                if (id == NsMessages.Messages2.ID) {
                    a = new NsMessages.Messages2();
                } else if (id == NsMessages.MessagesSlice.ID) {
                    a = new NsMessages.MessagesSlice();
                } else if (id == NsMessages.ChannelMessages.ID) {
                    a = new NsMessages.ChannelMessages();
                } else if (id == NsMessages.MessagesNotModified.ID) {
                    a = new NsMessages.MessagesNotModified();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Chats extends TLObject {
            public static Chats readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.Chats a = null;
                if (id == NsMessages.Chats2.ID) {
                    a = new NsMessages.Chats2();
                } else if (id == NsMessages.ChatsSlice.ID) {
                    a = new NsMessages.ChatsSlice();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ChatFull extends TLObject {
            public static ChatFull readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ChatFull a = null;
                if (id == NsMessages.ChatFull2.ID) {
                    a = new NsMessages.ChatFull2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AffectedHistory extends TLObject {
            public static AffectedHistory readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.AffectedHistory a = null;
                if (id == NsMessages.AffectedHistory2.ID) {
                    a = new NsMessages.AffectedHistory2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class DhConfig extends TLObject {
            public static DhConfig readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.DhConfig a = null;
                if (id == NsMessages.DhConfigNotModified.ID) {
                    a = new NsMessages.DhConfigNotModified();
                } else if (id == NsMessages.DhConfig2.ID) {
                    a = new NsMessages.DhConfig2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SentEncryptedMessage extends TLObject {
            public static SentEncryptedMessage readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SentEncryptedMessage a = null;
                if (id == NsMessages.SentEncryptedMessage2.ID) {
                    a = new NsMessages.SentEncryptedMessage2();
                } else if (id == NsMessages.SentEncryptedFile.ID) {
                    a = new NsMessages.SentEncryptedFile();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Stickers extends TLObject {
            public static Stickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.Stickers a = null;
                if (id == NsMessages.StickersNotModified.ID) {
                    a = new NsMessages.StickersNotModified();
                } else if (id == NsMessages.Stickers2.ID) {
                    a = new NsMessages.Stickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AllStickers extends TLObject {
            public static AllStickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.AllStickers a = null;
                if (id == NsMessages.AllStickersNotModified.ID) {
                    a = new NsMessages.AllStickersNotModified();
                } else if (id == NsMessages.AllStickers2.ID) {
                    a = new NsMessages.AllStickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AffectedMessages extends TLObject {
            public static AffectedMessages readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.AffectedMessages a = null;
                if (id == NsMessages.AffectedMessages2.ID) {
                    a = new NsMessages.AffectedMessages2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class StickerSet extends TLObject {
            public static StickerSet readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.StickerSet a = null;
                if (id == NsMessages.StickerSet2.ID) {
                    a = new NsMessages.StickerSet2();
                } else if (id == NsMessages.StickerSetNotModified.ID) {
                    a = new NsMessages.StickerSetNotModified();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SavedGifs extends TLObject {
            public static SavedGifs readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SavedGifs a = null;
                if (id == NsMessages.SavedGifsNotModified.ID) {
                    a = new NsMessages.SavedGifsNotModified();
                } else if (id == NsMessages.SavedGifs2.ID) {
                    a = new NsMessages.SavedGifs2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class BotResults extends TLObject {
            public static BotResults readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.BotResults a = null;
                if (id == NsMessages.BotResults2.ID) {
                    a = new NsMessages.BotResults2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class BotCallbackAnswer extends TLObject {
            public static BotCallbackAnswer readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.BotCallbackAnswer a = null;
                if (id == NsMessages.BotCallbackAnswer2.ID) {
                    a = new NsMessages.BotCallbackAnswer2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class MessageEditData extends TLObject {
            public static MessageEditData readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.MessageEditData a = null;
                if (id == NsMessages.MessageEditData2.ID) {
                    a = new NsMessages.MessageEditData2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PeerDialogs extends TLObject {
            public static PeerDialogs readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.PeerDialogs a = null;
                if (id == NsMessages.PeerDialogs2.ID) {
                    a = new NsMessages.PeerDialogs2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class FeaturedStickers extends TLObject {
            public static FeaturedStickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.FeaturedStickers a = null;
                if (id == NsMessages.FeaturedStickersNotModified.ID) {
                    a = new NsMessages.FeaturedStickersNotModified();
                } else if (id == NsMessages.FeaturedStickers2.ID) {
                    a = new NsMessages.FeaturedStickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class RecentStickers extends TLObject {
            public static RecentStickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.RecentStickers a = null;
                if (id == NsMessages.RecentStickersNotModified.ID) {
                    a = new NsMessages.RecentStickersNotModified();
                } else if (id == NsMessages.RecentStickers2.ID) {
                    a = new NsMessages.RecentStickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ArchivedStickers extends TLObject {
            public static ArchivedStickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ArchivedStickers a = null;
                if (id == NsMessages.ArchivedStickers2.ID) {
                    a = new NsMessages.ArchivedStickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class StickerSetInstallResult extends TLObject {
            public static StickerSetInstallResult readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.StickerSetInstallResult a = null;
                if (id == NsMessages.StickerSetInstallResultSuccess.ID) {
                    a = new NsMessages.StickerSetInstallResultSuccess();
                } else if (id == NsMessages.StickerSetInstallResultArchive.ID) {
                    a = new NsMessages.StickerSetInstallResultArchive();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class HighScores extends TLObject {
            public static HighScores readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.HighScores a = null;
                if (id == NsMessages.HighScores2.ID) {
                    a = new NsMessages.HighScores2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class FavedStickers extends TLObject {
            public static FavedStickers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.FavedStickers a = null;
                if (id == NsMessages.FavedStickersNotModified.ID) {
                    a = new NsMessages.FavedStickersNotModified();
                } else if (id == NsMessages.FavedStickers2.ID) {
                    a = new NsMessages.FavedStickers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class FoundStickerSets extends TLObject {
            public static FoundStickerSets readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.FoundStickerSets a = null;
                if (id == NsMessages.FoundStickerSetsNotModified.ID) {
                    a = new NsMessages.FoundStickerSetsNotModified();
                } else if (id == NsMessages.FoundStickerSets2.ID) {
                    a = new NsMessages.FoundStickerSets2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SearchCounter extends TLObject {
            public static SearchCounter readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SearchCounter a = null;
                if (id == NsMessages.SearchCounter2.ID) {
                    a = new NsMessages.SearchCounter2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class InactiveChats extends TLObject {
            public static InactiveChats readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.InactiveChats a = null;
                if (id == NsMessages.InactiveChats2.ID) {
                    a = new NsMessages.InactiveChats2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class VotesList extends TLObject {
            public static VotesList readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.VotesList a = null;
                if (id == NsMessages.VotesList2.ID) {
                    a = new NsMessages.VotesList2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class MessageViews extends TLObject {
            public static MessageViews readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.MessageViews a = null;
                if (id == NsMessages.MessageViews2.ID) {
                    a = new NsMessages.MessageViews2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class DiscussionMessage extends TLObject {
            public static DiscussionMessage readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.DiscussionMessage a = null;
                if (id == NsMessages.DiscussionMessage2.ID) {
                    a = new NsMessages.DiscussionMessage2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class HistoryImport extends TLObject {
            public static HistoryImport readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.HistoryImport a = null;
                if (id == NsMessages.HistoryImport2.ID) {
                    a = new NsMessages.HistoryImport2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class HistoryImportParsed extends TLObject {
            public static HistoryImportParsed readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.HistoryImportParsed a = null;
                if (id == NsMessages.HistoryImportParsed2.ID) {
                    a = new NsMessages.HistoryImportParsed2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AffectedFoundMessages extends TLObject {
            public static AffectedFoundMessages readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.AffectedFoundMessages a = null;
                if (id == NsMessages.AffectedFoundMessages2.ID) {
                    a = new NsMessages.AffectedFoundMessages2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ExportedChatInvites extends TLObject {
            public static ExportedChatInvites readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ExportedChatInvites a = null;
                if (id == NsMessages.ExportedChatInvites2.ID) {
                    a = new NsMessages.ExportedChatInvites2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ExportedChatInvite extends TLObject {
            public static ExportedChatInvite readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ExportedChatInvite a = null;
                if (id == NsMessages.ExportedChatInvite2.ID) {
                    a = new NsMessages.ExportedChatInvite2();
                } else if (id == NsMessages.ExportedChatInviteReplaced.ID) {
                    a = new NsMessages.ExportedChatInviteReplaced();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ChatInviteImporters extends TLObject {
            public static ChatInviteImporters readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ChatInviteImporters a = null;
                if (id == NsMessages.ChatInviteImporters2.ID) {
                    a = new NsMessages.ChatInviteImporters2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ChatAdminsWithInvites extends TLObject {
            public static ChatAdminsWithInvites readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.ChatAdminsWithInvites a = null;
                if (id == NsMessages.ChatAdminsWithInvites2.ID) {
                    a = new NsMessages.ChatAdminsWithInvites2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class CheckedHistoryImportPeer extends TLObject {
            public static CheckedHistoryImportPeer readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.CheckedHistoryImportPeer a = null;
                if (id == NsMessages.CheckedHistoryImportPeer2.ID) {
                    a = new NsMessages.CheckedHistoryImportPeer2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SponsoredMessages extends TLObject {
            public static SponsoredMessages readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SponsoredMessages a = null;
                if (id == NsMessages.SponsoredMessages2.ID) {
                    a = new NsMessages.SponsoredMessages2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SearchResultsCalendar extends TLObject {
            public static SearchResultsCalendar readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SearchResultsCalendar a = null;
                if (id == NsMessages.SearchResultsCalendar2.ID) {
                    a = new NsMessages.SearchResultsCalendar2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SearchResultsPositions extends TLObject {
            public static SearchResultsPositions readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.SearchResultsPositions a = null;
                if (id == NsMessages.SearchResultsPositions2.ID) {
                    a = new NsMessages.SearchResultsPositions2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PeerSettings extends TLObject {
            public static PeerSettings readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.PeerSettings a = null;
                if (id == NsMessages.PeerSettings2.ID) {
                    a = new NsMessages.PeerSettings2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class MessageReactionsList extends TLObject {
            public static MessageReactionsList readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.MessageReactionsList a = null;
                if (id == NsMessages.MessageReactionsList2.ID) {
                    a = new NsMessages.MessageReactionsList2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AvailableReactions extends TLObject {
            public static AvailableReactions readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.AvailableReactions a = null;
                if (id == NsMessages.AvailableReactionsNotModified.ID) {
                    a = new NsMessages.AvailableReactionsNotModified();
                } else if (id == NsMessages.AvailableReactions2.ID) {
                    a = new NsMessages.AvailableReactions2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TranslatedText extends TLObject {
            public static TranslatedText readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.TranslatedText a = null;
                if (id == NsMessages.TranslateNoResult.ID) {
                    a = new NsMessages.TranslateNoResult();
                } else if (id == NsMessages.TranslateResultText.ID) {
                    a = new NsMessages.TranslateResultText();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TranscribedAudio extends TLObject {
            public static TranscribedAudio readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsMessages.TranscribedAudio a = null;
                if (id == NsMessages.TranscribedAudio2.ID) {
                    a = new NsMessages.TranscribedAudio2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class Dialogs2 extends NsMessages.Dialogs {
            public static final int ID = 0x15ba6c40;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.dialogs";
            public TLVector<ApiScheme.Dialog> dialogs;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                dialogs.write(outputStream);

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dialogs = new TLVector<ApiScheme.Dialog>(ApiScheme.Dialog.class);
                dialogs.read(inputStream);

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Dialogs{" +
                        "dialogs=" + dialogs +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class DialogsSlice extends NsMessages.Dialogs {
            public static final int ID = 0x71e094f3;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.dialogsSlice";
            public int count;
            public TLVector<ApiScheme.Dialog> dialogs;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                dialogs.write(outputStream);

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                dialogs = new TLVector<ApiScheme.Dialog>(ApiScheme.Dialog.class);
                dialogs.read(inputStream);

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "DialogsSlice{" +
                        "count=" + count +
                        ", dialogs=" + dialogs +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class DialogsNotModified extends NsMessages.Dialogs {
            public static final int ID = 0xf0e3e596;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.dialogsNotModified";
            public int count;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DialogsNotModified{" +
                        "count=" + count +
                        '}';

            }
        }


        public static class Messages2 extends NsMessages.Messages {
            public static final int ID = 0x8c718e87;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messages";
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Messages{" +
                        "messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class MessagesSlice extends NsMessages.Messages {
            public static final int ID = 0x3a54685e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messagesSlice";
            public int flags;
            public True inexact = null;
            public int count;
            public Integer nextRate = null;
            public Integer offsetIdOffset = null;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = inexact != null ? (flags | 2) : (flags & ~2);
                flags = nextRate != null ? (flags | 1) : (flags & ~1);
                flags = offsetIdOffset != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && inexact != null) {
                    inexact.isBareType = true;
                    inexact.write(outputStream);
                }

                outputStream.writeInt(count);
                if ((flags & 1) != 0 && nextRate != null) {
                    outputStream.writeInt(nextRate);
                }

                if ((flags & 4) != 0 && offsetIdOffset != null) {
                    outputStream.writeInt(offsetIdOffset);
                }

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    inexact = new True();
                    inexact.isBareType = true;
                    inexact.read(inputStream);
                }

                count = inputStream.readInt();
                if ((flags & 1) != 0) {
                    nextRate = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    offsetIdOffset = inputStream.readInt();
                }

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "MessagesSlice{" +
                        "flags=" + flags +
                        ", inexact=" + inexact +
                        ", count=" + count +
                        ", nextRate=" + nextRate +
                        ", offsetIdOffset=" + offsetIdOffset +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ChannelMessages extends NsMessages.Messages {
            public static final int ID = 0x64479808;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.channelMessages";
            public int flags;
            public True inexact = null;
            public int pts;
            public int count;
            public Integer offsetIdOffset = null;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = inexact != null ? (flags | 2) : (flags & ~2);
                flags = offsetIdOffset != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && inexact != null) {
                    inexact.isBareType = true;
                    inexact.write(outputStream);
                }

                outputStream.writeInt(pts);
                outputStream.writeInt(count);
                if ((flags & 4) != 0 && offsetIdOffset != null) {
                    outputStream.writeInt(offsetIdOffset);
                }

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    inexact = new True();
                    inexact.isBareType = true;
                    inexact.read(inputStream);
                }

                pts = inputStream.readInt();
                count = inputStream.readInt();
                if ((flags & 4) != 0) {
                    offsetIdOffset = inputStream.readInt();
                }

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChannelMessages{" +
                        "flags=" + flags +
                        ", inexact=" + inexact +
                        ", pts=" + pts +
                        ", count=" + count +
                        ", offsetIdOffset=" + offsetIdOffset +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class MessagesNotModified extends NsMessages.Messages {
            public static final int ID = 0x74535f21;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messagesNotModified";
            public int count;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "MessagesNotModified{" +
                        "count=" + count +
                        '}';

            }
        }


        public static class Chats2 extends NsMessages.Chats {
            public static final int ID = 0x64ff9fd5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.chats";
            public TLVector<ApiScheme.Chat> chats;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                chats.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);


            }

            @Override
            public String toString() {
                return "Chats{" +
                        "chats=" + chats +
                        '}';

            }
        }


        public static class ChatsSlice extends NsMessages.Chats {
            public static final int ID = 0x9cd81144;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.chatsSlice";
            public int count;
            public TLVector<ApiScheme.Chat> chats;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                chats.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChatsSlice{" +
                        "count=" + count +
                        ", chats=" + chats +
                        '}';

            }
        }


        public static class ChatFull2 extends NsMessages.ChatFull {
            public static final int ID = 0xe5d7d19c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.chatFull";
            public ApiScheme.ChatFull fullChat;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                fullChat.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fullChat = ApiScheme.ChatFull.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChatFull{" +
                        "fullChat=" + fullChat +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class AffectedHistory2 extends NsMessages.AffectedHistory {
            public static final int ID = 0xb45c69d1;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.affectedHistory";
            public int pts;
            public int ptsCount;
            public int offset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pts);
                outputStream.writeInt(ptsCount);
                outputStream.writeInt(offset);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pts = inputStream.readInt();
                ptsCount = inputStream.readInt();
                offset = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "AffectedHistory{" +
                        "pts=" + pts +
                        ", ptsCount=" + ptsCount +
                        ", offset=" + offset +
                        '}';

            }
        }


        public static class DhConfigNotModified extends NsMessages.DhConfig {
            public static final int ID = 0xc0e24635;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.dhConfigNotModified";
            public byte[] random;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(random);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                random = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "DhConfigNotModified{" +
                        "random=" + random +
                        '}';

            }
        }


        public static class DhConfig2 extends NsMessages.DhConfig {
            public static final int ID = 0x2c221edd;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.dhConfig";
            public int g;
            public byte[] p;
            public int version;
            public byte[] random;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(g);
                outputStream.writeTLBytes(p);
                outputStream.writeInt(version);
                outputStream.writeTLBytes(random);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                g = inputStream.readInt();
                p = inputStream.readTLBytes();
                version = inputStream.readInt();
                random = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "DhConfig{" +
                        "g=" + g +
                        ", p=" + p +
                        ", version=" + version +
                        ", random=" + random +
                        '}';

            }
        }


        public static class SentEncryptedMessage2 extends NsMessages.SentEncryptedMessage {
            public static final int ID = 0x560f8935;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.sentEncryptedMessage";
            public int date;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(date);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                date = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentEncryptedMessage{" +
                        "date=" + date +
                        '}';

            }
        }


        public static class SentEncryptedFile extends NsMessages.SentEncryptedMessage {
            public static final int ID = 0x9493ff32;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.sentEncryptedFile";
            public int date;
            public ApiScheme.EncryptedFile file;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(date);
                file.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                date = inputStream.readInt();
                file = ApiScheme.EncryptedFile.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SentEncryptedFile{" +
                        "date=" + date +
                        ", file=" + file +
                        '}';

            }
        }


        public static class StickersNotModified extends NsMessages.Stickers {
            public static final int ID = 0xf1749a22;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "StickersNotModified{" +
                        '}';

            }
        }


        public static class Stickers2 extends NsMessages.Stickers {
            public static final int ID = 0x30a6ec7e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickers";
            public long hash;
            public TLVector<ApiScheme.Document> stickers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                stickers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                stickers = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                stickers.read(inputStream);


            }

            @Override
            public String toString() {
                return "Stickers{" +
                        "hash=" + hash +
                        ", stickers=" + stickers +
                        '}';

            }
        }


        public static class AllStickersNotModified extends NsMessages.AllStickers {
            public static final int ID = 0xe86602c3;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.allStickersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "AllStickersNotModified{" +
                        '}';

            }
        }


        public static class AllStickers2 extends NsMessages.AllStickers {
            public static final int ID = 0xcdbbcebb;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.allStickers";
            public long hash;
            public TLVector<ApiScheme.StickerSet> sets;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                sets.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                sets = new TLVector<ApiScheme.StickerSet>(ApiScheme.StickerSet.class);
                sets.read(inputStream);


            }

            @Override
            public String toString() {
                return "AllStickers{" +
                        "hash=" + hash +
                        ", sets=" + sets +
                        '}';

            }
        }


        public static class AffectedMessages2 extends NsMessages.AffectedMessages {
            public static final int ID = 0x84d19185;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.affectedMessages";
            public int pts;
            public int ptsCount;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pts);
                outputStream.writeInt(ptsCount);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pts = inputStream.readInt();
                ptsCount = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "AffectedMessages{" +
                        "pts=" + pts +
                        ", ptsCount=" + ptsCount +
                        '}';

            }
        }


        public static class StickerSet2 extends NsMessages.StickerSet {
            public static final int ID = 0xb60a24a6;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickerSet";
            public ApiScheme.StickerSet set;
            public TLVector<ApiScheme.StickerPack> packs;
            public TLVector<ApiScheme.Document> documents;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                set.write(outputStream);

                packs.write(outputStream);

                documents.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                set = ApiScheme.StickerSet.readObject(inputStream);
                packs = new TLVector<ApiScheme.StickerPack>(ApiScheme.StickerPack.class);
                packs.read(inputStream);

                documents = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                documents.read(inputStream);


            }

            @Override
            public String toString() {
                return "StickerSet{" +
                        "set=" + set +
                        ", packs=" + packs +
                        ", documents=" + documents +
                        '}';

            }
        }


        public static class StickerSetNotModified extends NsMessages.StickerSet {
            public static final int ID = 0xd3f924eb;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickerSetNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "StickerSetNotModified{" +
                        '}';

            }
        }


        public static class SavedGifsNotModified extends NsMessages.SavedGifs {
            public static final int ID = 0xe8025ca2;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.savedGifsNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "SavedGifsNotModified{" +
                        '}';

            }
        }


        public static class SavedGifs2 extends NsMessages.SavedGifs {
            public static final int ID = 0x84a02a0d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.savedGifs";
            public long hash;
            public TLVector<ApiScheme.Document> gifs;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                gifs.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                gifs = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                gifs.read(inputStream);


            }

            @Override
            public String toString() {
                return "SavedGifs{" +
                        "hash=" + hash +
                        ", gifs=" + gifs +
                        '}';

            }
        }


        public static class BotResults2 extends NsMessages.BotResults {
            public static final int ID = 0x947ca848;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.botResults";
            public int flags;
            public True gallery = null;
            public long queryId;
            public String nextOffset = null;
            public ApiScheme.InlineBotSwitchPM switchPm = null;
            public TLVector<ApiScheme.BotInlineResult> results;
            public int cacheTime;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = gallery != null ? (flags | 1) : (flags & ~1);
                flags = nextOffset != null ? (flags | 2) : (flags & ~2);
                flags = switchPm != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && gallery != null) {
                    gallery.isBareType = true;
                    gallery.write(outputStream);
                }

                outputStream.writeLong(queryId);
                if ((flags & 2) != 0 && nextOffset != null) {
                    outputStream.writeTLString(nextOffset);
                }

                if ((flags & 4) != 0 && switchPm != null) {
                    switchPm.write(outputStream);
                }

                results.write(outputStream);

                outputStream.writeInt(cacheTime);
                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    gallery = new True();
                    gallery.isBareType = true;
                    gallery.read(inputStream);
                }

                queryId = inputStream.readLong();
                if ((flags & 2) != 0) {
                    nextOffset = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    switchPm = ApiScheme.InlineBotSwitchPM.readObject(inputStream);
                }

                results = new TLVector<ApiScheme.BotInlineResult>(ApiScheme.BotInlineResult.class);
                results.read(inputStream);

                cacheTime = inputStream.readInt();
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "BotResults{" +
                        "flags=" + flags +
                        ", gallery=" + gallery +
                        ", queryId=" + queryId +
                        ", nextOffset=" + nextOffset +
                        ", switchPm=" + switchPm +
                        ", results=" + results +
                        ", cacheTime=" + cacheTime +
                        ", users=" + users +
                        '}';

            }
        }


        public static class BotCallbackAnswer2 extends NsMessages.BotCallbackAnswer {
            public static final int ID = 0x36585ea4;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.botCallbackAnswer";
            public int flags;
            public True alert = null;
            public True hasUrl = null;
            public True nativeUi = null;
            public String message = null;
            public String url = null;
            public int cacheTime;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = alert != null ? (flags | 2) : (flags & ~2);
                flags = hasUrl != null ? (flags | 8) : (flags & ~8);
                flags = nativeUi != null ? (flags | 16) : (flags & ~16);
                flags = message != null ? (flags | 1) : (flags & ~1);
                flags = url != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && alert != null) {
                    alert.isBareType = true;
                    alert.write(outputStream);
                }

                if ((flags & 8) != 0 && hasUrl != null) {
                    hasUrl.isBareType = true;
                    hasUrl.write(outputStream);
                }

                if ((flags & 16) != 0 && nativeUi != null) {
                    nativeUi.isBareType = true;
                    nativeUi.write(outputStream);
                }

                if ((flags & 1) != 0 && message != null) {
                    outputStream.writeTLString(message);
                }

                if ((flags & 4) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }

                outputStream.writeInt(cacheTime);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    alert = new True();
                    alert.isBareType = true;
                    alert.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    hasUrl = new True();
                    hasUrl.isBareType = true;
                    hasUrl.read(inputStream);
                }

                if ((flags & 16) != 0) {
                    nativeUi = new True();
                    nativeUi.isBareType = true;
                    nativeUi.read(inputStream);
                }

                if ((flags & 1) != 0) {
                    message = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    url = inputStream.readTLString();
                }

                cacheTime = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "BotCallbackAnswer{" +
                        "flags=" + flags +
                        ", alert=" + alert +
                        ", hasUrl=" + hasUrl +
                        ", nativeUi=" + nativeUi +
                        ", message=" + message +
                        ", url=" + url +
                        ", cacheTime=" + cacheTime +
                        '}';

            }
        }


        public static class MessageEditData2 extends NsMessages.MessageEditData {
            public static final int ID = 0x26b5dde6;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messageEditData";
            public int flags;
            public True caption = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = caption != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && caption != null) {
                    caption.isBareType = true;
                    caption.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    caption = new True();
                    caption.isBareType = true;
                    caption.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "MessageEditData{" +
                        "flags=" + flags +
                        ", caption=" + caption +
                        '}';

            }
        }


        public static class PeerDialogs2 extends NsMessages.PeerDialogs {
            public static final int ID = 0x3371c354;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.peerDialogs";
            public TLVector<ApiScheme.Dialog> dialogs;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public ApiScheme.NsUpdates.State state;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                dialogs.write(outputStream);

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);

                state.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dialogs = new TLVector<ApiScheme.Dialog>(ApiScheme.Dialog.class);
                dialogs.read(inputStream);

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                state = ApiScheme.NsUpdates.State.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "PeerDialogs{" +
                        "dialogs=" + dialogs +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", state=" + state +
                        '}';

            }
        }


        public static class FeaturedStickersNotModified extends NsMessages.FeaturedStickers {
            public static final int ID = 0xc6dc0c66;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.featuredStickersNotModified";
            public int count;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "FeaturedStickersNotModified{" +
                        "count=" + count +
                        '}';

            }
        }


        public static class FeaturedStickers2 extends NsMessages.FeaturedStickers {
            public static final int ID = 0xbe382906;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.featuredStickers";
            public int flags;
            public True premium = null;
            public long hash;
            public int count;
            public TLVector<ApiScheme.StickerSetCovered> sets;
            public TLVector<TLLong> unread;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = premium != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && premium != null) {
                    premium.isBareType = true;
                    premium.write(outputStream);
                }

                outputStream.writeLong(hash);
                outputStream.writeInt(count);
                sets.write(outputStream);

                unread.isBareTypeItem = true;
                unread.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    premium = new True();
                    premium.isBareType = true;
                    premium.read(inputStream);
                }

                hash = inputStream.readLong();
                count = inputStream.readInt();
                sets = new TLVector<ApiScheme.StickerSetCovered>(ApiScheme.StickerSetCovered.class);
                sets.read(inputStream);

                unread = new TLVector<TLLong>(TLLong.class);
                unread.isBareTypeItem = true;
                unread.read(inputStream);


            }

            @Override
            public String toString() {
                return "FeaturedStickers{" +
                        "flags=" + flags +
                        ", premium=" + premium +
                        ", hash=" + hash +
                        ", count=" + count +
                        ", sets=" + sets +
                        ", unread=" + unread +
                        '}';

            }
        }


        public static class RecentStickersNotModified extends NsMessages.RecentStickers {
            public static final int ID = 0xb17f890;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.recentStickersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "RecentStickersNotModified{" +
                        '}';

            }
        }


        public static class RecentStickers2 extends NsMessages.RecentStickers {
            public static final int ID = 0x88d37c56;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.recentStickers";
            public long hash;
            public TLVector<ApiScheme.StickerPack> packs;
            public TLVector<ApiScheme.Document> stickers;
            public TLVector<TLInt> dates;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                packs.write(outputStream);

                stickers.write(outputStream);

                dates.isBareTypeItem = true;
                dates.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                packs = new TLVector<ApiScheme.StickerPack>(ApiScheme.StickerPack.class);
                packs.read(inputStream);

                stickers = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                stickers.read(inputStream);

                dates = new TLVector<TLInt>(TLInt.class);
                dates.isBareTypeItem = true;
                dates.read(inputStream);


            }

            @Override
            public String toString() {
                return "RecentStickers{" +
                        "hash=" + hash +
                        ", packs=" + packs +
                        ", stickers=" + stickers +
                        ", dates=" + dates +
                        '}';

            }
        }


        public static class ArchivedStickers2 extends NsMessages.ArchivedStickers {
            public static final int ID = 0x4fcba9c8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.archivedStickers";
            public int count;
            public TLVector<ApiScheme.StickerSetCovered> sets;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                sets.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                sets = new TLVector<ApiScheme.StickerSetCovered>(ApiScheme.StickerSetCovered.class);
                sets.read(inputStream);


            }

            @Override
            public String toString() {
                return "ArchivedStickers{" +
                        "count=" + count +
                        ", sets=" + sets +
                        '}';

            }
        }


        public static class StickerSetInstallResultSuccess extends NsMessages.StickerSetInstallResult {
            public static final int ID = 0x38641628;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickerSetInstallResultSuccess";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "StickerSetInstallResultSuccess{" +
                        '}';

            }
        }


        public static class StickerSetInstallResultArchive extends NsMessages.StickerSetInstallResult {
            public static final int ID = 0x35e410a8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.stickerSetInstallResultArchive";
            public TLVector<ApiScheme.StickerSetCovered> sets;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                sets.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                sets = new TLVector<ApiScheme.StickerSetCovered>(ApiScheme.StickerSetCovered.class);
                sets.read(inputStream);


            }

            @Override
            public String toString() {
                return "StickerSetInstallResultArchive{" +
                        "sets=" + sets +
                        '}';

            }
        }


        public static class HighScores2 extends NsMessages.HighScores {
            public static final int ID = 0x9a3bfd99;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.highScores";
            public TLVector<ApiScheme.HighScore> scores;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                scores.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                scores = new TLVector<ApiScheme.HighScore>(ApiScheme.HighScore.class);
                scores.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "HighScores{" +
                        "scores=" + scores +
                        ", users=" + users +
                        '}';

            }
        }


        public static class FavedStickersNotModified extends NsMessages.FavedStickers {
            public static final int ID = 0x9e8fa6d3;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.favedStickersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FavedStickersNotModified{" +
                        '}';

            }
        }


        public static class FavedStickers2 extends NsMessages.FavedStickers {
            public static final int ID = 0x2cb51097;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.favedStickers";
            public long hash;
            public TLVector<ApiScheme.StickerPack> packs;
            public TLVector<ApiScheme.Document> stickers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                packs.write(outputStream);

                stickers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                packs = new TLVector<ApiScheme.StickerPack>(ApiScheme.StickerPack.class);
                packs.read(inputStream);

                stickers = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                stickers.read(inputStream);


            }

            @Override
            public String toString() {
                return "FavedStickers{" +
                        "hash=" + hash +
                        ", packs=" + packs +
                        ", stickers=" + stickers +
                        '}';

            }
        }


        public static class FoundStickerSetsNotModified extends NsMessages.FoundStickerSets {
            public static final int ID = 0xd54b65d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.foundStickerSetsNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "FoundStickerSetsNotModified{" +
                        '}';

            }
        }


        public static class FoundStickerSets2 extends NsMessages.FoundStickerSets {
            public static final int ID = 0x8af09dd2;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.foundStickerSets";
            public long hash;
            public TLVector<ApiScheme.StickerSetCovered> sets;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                sets.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                sets = new TLVector<ApiScheme.StickerSetCovered>(ApiScheme.StickerSetCovered.class);
                sets.read(inputStream);


            }

            @Override
            public String toString() {
                return "FoundStickerSets{" +
                        "hash=" + hash +
                        ", sets=" + sets +
                        '}';

            }
        }


        public static class SearchCounter2 extends NsMessages.SearchCounter {
            public static final int ID = 0xe844ebff;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.searchCounter";
            public int flags;
            public True inexact = null;
            public ApiScheme.MessagesFilter filter;
            public int count;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = inexact != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && inexact != null) {
                    inexact.isBareType = true;
                    inexact.write(outputStream);
                }

                filter.write(outputStream);

                outputStream.writeInt(count);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    inexact = new True();
                    inexact.isBareType = true;
                    inexact.read(inputStream);
                }

                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                count = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SearchCounter{" +
                        "flags=" + flags +
                        ", inexact=" + inexact +
                        ", filter=" + filter +
                        ", count=" + count +
                        '}';

            }
        }


        public static class InactiveChats2 extends NsMessages.InactiveChats {
            public static final int ID = 0xa927fec5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.inactiveChats";
            public TLVector<TLInt> dates;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                dates.isBareTypeItem = true;
                dates.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dates = new TLVector<TLInt>(TLInt.class);
                dates.isBareTypeItem = true;
                dates.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "InactiveChats{" +
                        "dates=" + dates +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class VotesList2 extends NsMessages.VotesList {
            public static final int ID = 0x823f649;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.votesList";
            public int flags;
            public int count;
            public TLVector<ApiScheme.MessageUserVote> votes;
            public TLVector<ApiScheme.User> users;
            public String nextOffset = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = nextOffset != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeInt(count);
                votes.write(outputStream);

                users.write(outputStream);

                if ((flags & 1) != 0 && nextOffset != null) {
                    outputStream.writeTLString(nextOffset);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                count = inputStream.readInt();
                votes = new TLVector<ApiScheme.MessageUserVote>(ApiScheme.MessageUserVote.class);
                votes.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                if ((flags & 1) != 0) {
                    nextOffset = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "VotesList{" +
                        "flags=" + flags +
                        ", count=" + count +
                        ", votes=" + votes +
                        ", users=" + users +
                        ", nextOffset=" + nextOffset +
                        '}';

            }
        }


        public static class MessageViews2 extends NsMessages.MessageViews {
            public static final int ID = 0xb6c4f543;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messageViews";
            public TLVector<ApiScheme.MessageViews> views;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                views.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                views = new TLVector<ApiScheme.MessageViews>(ApiScheme.MessageViews.class);
                views.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "MessageViews{" +
                        "views=" + views +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class DiscussionMessage2 extends NsMessages.DiscussionMessage {
            public static final int ID = 0xa6341782;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.discussionMessage";
            public int flags;
            public TLVector<ApiScheme.Message> messages;
            public Integer maxId = null;
            public Integer readInboxMaxId = null;
            public Integer readOutboxMaxId = null;
            public int unreadCount;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = maxId != null ? (flags | 1) : (flags & ~1);
                flags = readInboxMaxId != null ? (flags | 2) : (flags & ~2);
                flags = readOutboxMaxId != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                messages.write(outputStream);

                if ((flags & 1) != 0 && maxId != null) {
                    outputStream.writeInt(maxId);
                }

                if ((flags & 2) != 0 && readInboxMaxId != null) {
                    outputStream.writeInt(readInboxMaxId);
                }

                if ((flags & 4) != 0 && readOutboxMaxId != null) {
                    outputStream.writeInt(readOutboxMaxId);
                }

                outputStream.writeInt(unreadCount);
                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                if ((flags & 1) != 0) {
                    maxId = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    readInboxMaxId = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    readOutboxMaxId = inputStream.readInt();
                }

                unreadCount = inputStream.readInt();
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "DiscussionMessage{" +
                        "flags=" + flags +
                        ", messages=" + messages +
                        ", maxId=" + maxId +
                        ", readInboxMaxId=" + readInboxMaxId +
                        ", readOutboxMaxId=" + readOutboxMaxId +
                        ", unreadCount=" + unreadCount +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class HistoryImport2 extends NsMessages.HistoryImport {
            public static final int ID = 0x1662af0b;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.historyImport";
            public long id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(id);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "HistoryImport{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class HistoryImportParsed2 extends NsMessages.HistoryImportParsed {
            public static final int ID = 0x5e0fb7b9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.historyImportParsed";
            public int flags;
            public True pm = null;
            public True group = null;
            public String title = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = pm != null ? (flags | 1) : (flags & ~1);
                flags = group != null ? (flags | 2) : (flags & ~2);
                flags = title != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && pm != null) {
                    pm.isBareType = true;
                    pm.write(outputStream);
                }

                if ((flags & 2) != 0 && group != null) {
                    group.isBareType = true;
                    group.write(outputStream);
                }

                if ((flags & 4) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    pm = new True();
                    pm.isBareType = true;
                    pm.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    group = new True();
                    group.isBareType = true;
                    group.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    title = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "HistoryImportParsed{" +
                        "flags=" + flags +
                        ", pm=" + pm +
                        ", group=" + group +
                        ", title=" + title +
                        '}';

            }
        }


        public static class AffectedFoundMessages2 extends NsMessages.AffectedFoundMessages {
            public static final int ID = 0xef8d3e6c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.affectedFoundMessages";
            public int pts;
            public int ptsCount;
            public int offset;
            public TLVector<TLInt> messages;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pts);
                outputStream.writeInt(ptsCount);
                outputStream.writeInt(offset);
                messages.isBareTypeItem = true;
                messages.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pts = inputStream.readInt();
                ptsCount = inputStream.readInt();
                offset = inputStream.readInt();
                messages = new TLVector<TLInt>(TLInt.class);
                messages.isBareTypeItem = true;
                messages.read(inputStream);


            }

            @Override
            public String toString() {
                return "AffectedFoundMessages{" +
                        "pts=" + pts +
                        ", ptsCount=" + ptsCount +
                        ", offset=" + offset +
                        ", messages=" + messages +
                        '}';

            }
        }


        public static class ExportedChatInvites2 extends NsMessages.ExportedChatInvites {
            public static final int ID = 0xbdc62dcc;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.exportedChatInvites";
            public int count;
            public TLVector<ApiScheme.ExportedChatInvite> invites;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                invites.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                invites = new TLVector<ApiScheme.ExportedChatInvite>(ApiScheme.ExportedChatInvite.class);
                invites.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ExportedChatInvites{" +
                        "count=" + count +
                        ", invites=" + invites +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ExportedChatInvite2 extends NsMessages.ExportedChatInvite {
            public static final int ID = 0x1871be50;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.exportedChatInvite";
            public ApiScheme.ExportedChatInvite invite;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                invite.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ExportedChatInvite{" +
                        "invite=" + invite +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ExportedChatInviteReplaced extends NsMessages.ExportedChatInvite {
            public static final int ID = 0x222600ef;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.exportedChatInviteReplaced";
            public ApiScheme.ExportedChatInvite invite;
            public ApiScheme.ExportedChatInvite newInvite;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                invite.write(outputStream);

                newInvite.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                invite = ApiScheme.ExportedChatInvite.readObject(inputStream);
                newInvite = ApiScheme.ExportedChatInvite.readObject(inputStream);
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ExportedChatInviteReplaced{" +
                        "invite=" + invite +
                        ", newInvite=" + newInvite +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ChatInviteImporters2 extends NsMessages.ChatInviteImporters {
            public static final int ID = 0x81b6b00a;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.chatInviteImporters";
            public int count;
            public TLVector<ApiScheme.ChatInviteImporter> importers;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                importers.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                importers = new TLVector<ApiScheme.ChatInviteImporter>(ApiScheme.ChatInviteImporter.class);
                importers.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChatInviteImporters{" +
                        "count=" + count +
                        ", importers=" + importers +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ChatAdminsWithInvites2 extends NsMessages.ChatAdminsWithInvites {
            public static final int ID = 0xb69b72d7;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.chatAdminsWithInvites";
            public TLVector<ApiScheme.ChatAdminWithInvites> admins;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                admins.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                admins = new TLVector<ApiScheme.ChatAdminWithInvites>(ApiScheme.ChatAdminWithInvites.class);
                admins.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChatAdminsWithInvites{" +
                        "admins=" + admins +
                        ", users=" + users +
                        '}';

            }
        }


        public static class CheckedHistoryImportPeer2 extends NsMessages.CheckedHistoryImportPeer {
            public static final int ID = 0xa24de717;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.checkedHistoryImportPeer";
            public String confirmText;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(confirmText);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                confirmText = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckedHistoryImportPeer{" +
                        "confirmText=" + confirmText +
                        '}';

            }
        }


        public static class SponsoredMessages2 extends NsMessages.SponsoredMessages {
            public static final int ID = 0x65a4c7d5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.sponsoredMessages";
            public TLVector<ApiScheme.SponsoredMessage> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                messages = new TLVector<ApiScheme.SponsoredMessage>(ApiScheme.SponsoredMessage.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "SponsoredMessages{" +
                        "messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class SearchResultsCalendar2 extends NsMessages.SearchResultsCalendar {
            public static final int ID = 0x147ee23c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.searchResultsCalendar";
            public int flags;
            public True inexact = null;
            public int count;
            public int minDate;
            public int minMsgId;
            public Integer offsetIdOffset = null;
            public TLVector<ApiScheme.SearchResultsCalendarPeriod> periods;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = inexact != null ? (flags | 1) : (flags & ~1);
                flags = offsetIdOffset != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && inexact != null) {
                    inexact.isBareType = true;
                    inexact.write(outputStream);
                }

                outputStream.writeInt(count);
                outputStream.writeInt(minDate);
                outputStream.writeInt(minMsgId);
                if ((flags & 2) != 0 && offsetIdOffset != null) {
                    outputStream.writeInt(offsetIdOffset);
                }

                periods.write(outputStream);

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    inexact = new True();
                    inexact.isBareType = true;
                    inexact.read(inputStream);
                }

                count = inputStream.readInt();
                minDate = inputStream.readInt();
                minMsgId = inputStream.readInt();
                if ((flags & 2) != 0) {
                    offsetIdOffset = inputStream.readInt();
                }

                periods = new TLVector<ApiScheme.SearchResultsCalendarPeriod>(ApiScheme.SearchResultsCalendarPeriod.class);
                periods.read(inputStream);

                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "SearchResultsCalendar{" +
                        "flags=" + flags +
                        ", inexact=" + inexact +
                        ", count=" + count +
                        ", minDate=" + minDate +
                        ", minMsgId=" + minMsgId +
                        ", offsetIdOffset=" + offsetIdOffset +
                        ", periods=" + periods +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class SearchResultsPositions2 extends NsMessages.SearchResultsPositions {
            public static final int ID = 0x53b22baf;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.searchResultsPositions";
            public int count;
            public TLVector<ApiScheme.SearchResultsPosition> positions;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                positions.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                positions = new TLVector<ApiScheme.SearchResultsPosition>(ApiScheme.SearchResultsPosition.class);
                positions.read(inputStream);


            }

            @Override
            public String toString() {
                return "SearchResultsPositions{" +
                        "count=" + count +
                        ", positions=" + positions +
                        '}';

            }
        }


        public static class PeerSettings2 extends NsMessages.PeerSettings {
            public static final int ID = 0x6880b94d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.peerSettings";
            public ApiScheme.PeerSettings settings;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                settings.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                settings = ApiScheme.PeerSettings.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PeerSettings{" +
                        "settings=" + settings +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class MessageReactionsList2 extends NsMessages.MessageReactionsList {
            public static final int ID = 0x31bd492d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.messageReactionsList";
            public int flags;
            public int count;
            public TLVector<ApiScheme.MessagePeerReaction> reactions;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public String nextOffset = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = nextOffset != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeInt(count);
                reactions.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);

                if ((flags & 1) != 0 && nextOffset != null) {
                    outputStream.writeTLString(nextOffset);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                count = inputStream.readInt();
                reactions = new TLVector<ApiScheme.MessagePeerReaction>(ApiScheme.MessagePeerReaction.class);
                reactions.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                if ((flags & 1) != 0) {
                    nextOffset = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "MessageReactionsList{" +
                        "flags=" + flags +
                        ", count=" + count +
                        ", reactions=" + reactions +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", nextOffset=" + nextOffset +
                        '}';

            }
        }


        public static class AvailableReactionsNotModified extends NsMessages.AvailableReactions {
            public static final int ID = 0x9f071957;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.availableReactionsNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "AvailableReactionsNotModified{" +
                        '}';

            }
        }


        public static class AvailableReactions2 extends NsMessages.AvailableReactions {
            public static final int ID = 0x768e3aad;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.availableReactions";
            public int hash;
            public TLVector<ApiScheme.AvailableReaction> reactions;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(hash);
                reactions.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readInt();
                reactions = new TLVector<ApiScheme.AvailableReaction>(ApiScheme.AvailableReaction.class);
                reactions.read(inputStream);


            }

            @Override
            public String toString() {
                return "AvailableReactions{" +
                        "hash=" + hash +
                        ", reactions=" + reactions +
                        '}';

            }
        }


        public static class TranslateNoResult extends NsMessages.TranslatedText {
            public static final int ID = 0x67ca4737;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.translateNoResult";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "TranslateNoResult{" +
                        '}';

            }
        }


        public static class TranslateResultText extends NsMessages.TranslatedText {
            public static final int ID = 0xa214f7d0;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.translateResultText";
            public String text;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(text);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                text = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "TranslateResultText{" +
                        "text=" + text +
                        '}';

            }
        }


        public static class TranscribedAudio2 extends NsMessages.TranscribedAudio {
            public static final int ID = 0x93752c52;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "messages.transcribedAudio";
            public int flags;
            public True pending = null;
            public long transcriptionId;
            public String text;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = pending != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && pending != null) {
                    pending.isBareType = true;
                    pending.write(outputStream);
                }

                outputStream.writeLong(transcriptionId);
                outputStream.writeTLString(text);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    pending = new True();
                    pending.isBareType = true;
                    pending.read(inputStream);
                }

                transcriptionId = inputStream.readLong();
                text = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "TranscribedAudio{" +
                        "flags=" + flags +
                        ", pending=" + pending +
                        ", transcriptionId=" + transcriptionId +
                        ", text=" + text +
                        '}';

            }
        }


        public static class GetMessages extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x63c66506;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessages";
            public TLVector<ApiScheme.InputMessage> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<ApiScheme.InputMessage>(ApiScheme.InputMessage.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetMessages{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetDialogs extends TLMethod<NsMessages.Dialogs> {
            public static final int ID = 0xa0f4cb4f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDialogs";
            public int flags;
            public True excludePinned = null;
            public Integer folderId = null;
            public int offsetDate;
            public int offsetId;
            public ApiScheme.InputPeer offsetPeer;
            public int limit;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = excludePinned != null ? (flags | 1) : (flags & ~1);
                flags = folderId != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && excludePinned != null) {
                    excludePinned.isBareType = true;
                    excludePinned.write(outputStream);
                }

                if ((flags & 2) != 0 && folderId != null) {
                    outputStream.writeInt(folderId);
                }

                outputStream.writeInt(offsetDate);
                outputStream.writeInt(offsetId);
                offsetPeer.write(outputStream);

                outputStream.writeInt(limit);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    excludePinned = new True();
                    excludePinned.isBareType = true;
                    excludePinned.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    folderId = inputStream.readInt();
                }

                offsetDate = inputStream.readInt();
                offsetId = inputStream.readInt();
                offsetPeer = ApiScheme.InputPeer.readObject(inputStream);
                limit = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetDialogs{" +
                        "flags=" + flags +
                        ", excludePinned=" + excludePinned +
                        ", folderId=" + folderId +
                        ", offsetDate=" + offsetDate +
                        ", offsetId=" + offsetId +
                        ", offsetPeer=" + offsetPeer +
                        ", limit=" + limit +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetHistory extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x4423e6c5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getHistory";
            public ApiScheme.InputPeer peer;
            public int offsetId;
            public int offsetDate;
            public int addOffset;
            public int limit;
            public int maxId;
            public int minId;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(offsetDate);
                outputStream.writeInt(addOffset);
                outputStream.writeInt(limit);
                outputStream.writeInt(maxId);
                outputStream.writeInt(minId);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                offsetId = inputStream.readInt();
                offsetDate = inputStream.readInt();
                addOffset = inputStream.readInt();
                limit = inputStream.readInt();
                maxId = inputStream.readInt();
                minId = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetHistory{" +
                        "peer=" + peer +
                        ", offsetId=" + offsetId +
                        ", offsetDate=" + offsetDate +
                        ", addOffset=" + addOffset +
                        ", limit=" + limit +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class Search extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0xa0fda762;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.search";
            public int flags;
            public ApiScheme.InputPeer peer;
            public String q;
            public ApiScheme.InputPeer fromId = null;
            public Integer topMsgId = null;
            public ApiScheme.MessagesFilter filter;
            public int minDate;
            public int maxDate;
            public int offsetId;
            public int addOffset;
            public int limit;
            public int maxId;
            public int minId;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = fromId != null ? (flags | 1) : (flags & ~1);
                flags = topMsgId != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                peer.write(outputStream);

                outputStream.writeTLString(q);
                if ((flags & 1) != 0 && fromId != null) {
                    fromId.write(outputStream);
                }

                if ((flags & 2) != 0 && topMsgId != null) {
                    outputStream.writeInt(topMsgId);
                }

                filter.write(outputStream);

                outputStream.writeInt(minDate);
                outputStream.writeInt(maxDate);
                outputStream.writeInt(offsetId);
                outputStream.writeInt(addOffset);
                outputStream.writeInt(limit);
                outputStream.writeInt(maxId);
                outputStream.writeInt(minId);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                peer = ApiScheme.InputPeer.readObject(inputStream);
                q = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    fromId = ApiScheme.InputPeer.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    topMsgId = inputStream.readInt();
                }

                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                minDate = inputStream.readInt();
                maxDate = inputStream.readInt();
                offsetId = inputStream.readInt();
                addOffset = inputStream.readInt();
                limit = inputStream.readInt();
                maxId = inputStream.readInt();
                minId = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "Search{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", q=" + q +
                        ", fromId=" + fromId +
                        ", topMsgId=" + topMsgId +
                        ", filter=" + filter +
                        ", minDate=" + minDate +
                        ", maxDate=" + maxDate +
                        ", offsetId=" + offsetId +
                        ", addOffset=" + addOffset +
                        ", limit=" + limit +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class ReadHistory extends TLMethod<NsMessages.AffectedMessages> {
            public static final int ID = 0xe306d3a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readHistory";
            public ApiScheme.InputPeer peer;
            public int maxId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(maxId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                maxId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReadHistory{" +
                        "peer=" + peer +
                        ", maxId=" + maxId +
                        '}';

            }
        }


        public static class DeleteHistory extends TLMethod<NsMessages.AffectedHistory> {
            public static final int ID = 0xb08f922a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteHistory";
            public int flags;
            public True justClear = null;
            public True revoke = null;
            public ApiScheme.InputPeer peer;
            public int maxId;
            public Integer minDate = null;
            public Integer maxDate = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = justClear != null ? (flags | 1) : (flags & ~1);
                flags = revoke != null ? (flags | 2) : (flags & ~2);
                flags = minDate != null ? (flags | 4) : (flags & ~4);
                flags = maxDate != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && justClear != null) {
                    justClear.isBareType = true;
                    justClear.write(outputStream);
                }

                if ((flags & 2) != 0 && revoke != null) {
                    revoke.isBareType = true;
                    revoke.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(maxId);
                if ((flags & 4) != 0 && minDate != null) {
                    outputStream.writeInt(minDate);
                }

                if ((flags & 8) != 0 && maxDate != null) {
                    outputStream.writeInt(maxDate);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    justClear = new True();
                    justClear.isBareType = true;
                    justClear.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    revoke = new True();
                    revoke.isBareType = true;
                    revoke.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                maxId = inputStream.readInt();
                if ((flags & 4) != 0) {
                    minDate = inputStream.readInt();
                }

                if ((flags & 8) != 0) {
                    maxDate = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "DeleteHistory{" +
                        "flags=" + flags +
                        ", justClear=" + justClear +
                        ", revoke=" + revoke +
                        ", peer=" + peer +
                        ", maxId=" + maxId +
                        ", minDate=" + minDate +
                        ", maxDate=" + maxDate +
                        '}';

            }
        }


        public static class DeleteMessages extends TLMethod<NsMessages.AffectedMessages> {
            public static final int ID = 0xe58e95d2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteMessages";
            public int flags;
            public True revoke = null;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = revoke != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && revoke != null) {
                    revoke.isBareType = true;
                    revoke.write(outputStream);
                }

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    revoke = new True();
                    revoke.isBareType = true;
                    revoke.read(inputStream);
                }

                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteMessages{" +
                        "flags=" + flags +
                        ", revoke=" + revoke +
                        ", id=" + id +
                        '}';

            }
        }


        public static class ReceivedMessages extends TLMethod<TLVector<ReceivedNotifyMessage>> {
            public static final int ID = 0x5a954c0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.receivedMessages";
            public int maxId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(maxId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                maxId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReceivedMessages{" +
                        "maxId=" + maxId +
                        '}';

            }
        }


        public static class SetTyping extends TLMethod<Bool> {
            public static final int ID = 0x58943ee2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setTyping";
            public int flags;
            public ApiScheme.InputPeer peer;
            public Integer topMsgId = null;
            public ApiScheme.SendMessageAction action;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = topMsgId != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                peer.write(outputStream);

                if ((flags & 1) != 0 && topMsgId != null) {
                    outputStream.writeInt(topMsgId);
                }

                action.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    topMsgId = inputStream.readInt();
                }

                action = ApiScheme.SendMessageAction.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetTyping{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", topMsgId=" + topMsgId +
                        ", action=" + action +
                        '}';

            }
        }


        public static class SendMessage extends TLMethod<Updates> {
            public static final int ID = 0xd9d75a4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendMessage";
            public int flags;
            public True noWebpage = null;
            public True silent = null;
            public True background = null;
            public True clearDraft = null;
            public True noforwards = null;
            public ApiScheme.InputPeer peer;
            public Integer replyToMsgId = null;
            public String message;
            public long randomId;
            public ApiScheme.ReplyMarkup replyMarkup = null;
            public TLVector<ApiScheme.MessageEntity> entities = null;
            public Integer scheduleDate = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = noWebpage != null ? (flags | 2) : (flags & ~2);
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = background != null ? (flags | 64) : (flags & ~64);
                flags = clearDraft != null ? (flags | 128) : (flags & ~128);
                flags = noforwards != null ? (flags | 16384) : (flags & ~16384);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
                flags = entities != null ? (flags | 8) : (flags & ~8);
                flags = scheduleDate != null ? (flags | 1024) : (flags & ~1024);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && noWebpage != null) {
                    noWebpage.isBareType = true;
                    noWebpage.write(outputStream);
                }

                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 64) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                if ((flags & 128) != 0 && clearDraft != null) {
                    clearDraft.isBareType = true;
                    clearDraft.write(outputStream);
                }

                if ((flags & 16384) != 0 && noforwards != null) {
                    noforwards.isBareType = true;
                    noforwards.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                outputStream.writeTLString(message);
                outputStream.writeLong(randomId);
                if ((flags & 4) != 0 && replyMarkup != null) {
                    replyMarkup.write(outputStream);
                }

                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }

                if ((flags & 1024) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    noWebpage = new True();
                    noWebpage.isBareType = true;
                    noWebpage.read(inputStream);
                }

                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 64) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                if ((flags & 128) != 0) {
                    clearDraft = new True();
                    clearDraft.isBareType = true;
                    clearDraft.read(inputStream);
                }

                if ((flags & 16384) != 0) {
                    noforwards = new True();
                    noforwards.isBareType = true;
                    noforwards.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                message = inputStream.readTLString();
                randomId = inputStream.readLong();
                if ((flags & 4) != 0) {
                    replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }

                if ((flags & 1024) != 0) {
                    scheduleDate = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SendMessage{" +
                        "flags=" + flags +
                        ", noWebpage=" + noWebpage +
                        ", silent=" + silent +
                        ", background=" + background +
                        ", clearDraft=" + clearDraft +
                        ", noforwards=" + noforwards +
                        ", peer=" + peer +
                        ", replyToMsgId=" + replyToMsgId +
                        ", message=" + message +
                        ", randomId=" + randomId +
                        ", replyMarkup=" + replyMarkup +
                        ", entities=" + entities +
                        ", scheduleDate=" + scheduleDate +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class SendMedia extends TLMethod<Updates> {
            public static final int ID = 0xe25ff8e0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendMedia";
            public int flags;
            public True silent = null;
            public True background = null;
            public True clearDraft = null;
            public True noforwards = null;
            public ApiScheme.InputPeer peer;
            public Integer replyToMsgId = null;
            public ApiScheme.InputMedia media;
            public String message;
            public long randomId;
            public ApiScheme.ReplyMarkup replyMarkup = null;
            public TLVector<ApiScheme.MessageEntity> entities = null;
            public Integer scheduleDate = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = background != null ? (flags | 64) : (flags & ~64);
                flags = clearDraft != null ? (flags | 128) : (flags & ~128);
                flags = noforwards != null ? (flags | 16384) : (flags & ~16384);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
                flags = entities != null ? (flags | 8) : (flags & ~8);
                flags = scheduleDate != null ? (flags | 1024) : (flags & ~1024);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 64) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                if ((flags & 128) != 0 && clearDraft != null) {
                    clearDraft.isBareType = true;
                    clearDraft.write(outputStream);
                }

                if ((flags & 16384) != 0 && noforwards != null) {
                    noforwards.isBareType = true;
                    noforwards.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                media.write(outputStream);

                outputStream.writeTLString(message);
                outputStream.writeLong(randomId);
                if ((flags & 4) != 0 && replyMarkup != null) {
                    replyMarkup.write(outputStream);
                }

                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }

                if ((flags & 1024) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 64) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                if ((flags & 128) != 0) {
                    clearDraft = new True();
                    clearDraft.isBareType = true;
                    clearDraft.read(inputStream);
                }

                if ((flags & 16384) != 0) {
                    noforwards = new True();
                    noforwards.isBareType = true;
                    noforwards.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                media = ApiScheme.InputMedia.readObject(inputStream);
                message = inputStream.readTLString();
                randomId = inputStream.readLong();
                if ((flags & 4) != 0) {
                    replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }

                if ((flags & 1024) != 0) {
                    scheduleDate = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SendMedia{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", background=" + background +
                        ", clearDraft=" + clearDraft +
                        ", noforwards=" + noforwards +
                        ", peer=" + peer +
                        ", replyToMsgId=" + replyToMsgId +
                        ", media=" + media +
                        ", message=" + message +
                        ", randomId=" + randomId +
                        ", replyMarkup=" + replyMarkup +
                        ", entities=" + entities +
                        ", scheduleDate=" + scheduleDate +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class ForwardMessages extends TLMethod<Updates> {
            public static final int ID = 0xcc30290b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.forwardMessages";
            public int flags;
            public True silent = null;
            public True background = null;
            public True withMyScore = null;
            public True dropAuthor = null;
            public True dropMediaCaptions = null;
            public True noforwards = null;
            public ApiScheme.InputPeer fromPeer;
            public TLVector<TLInt> id;
            public TLVector<TLLong> randomId;
            public ApiScheme.InputPeer toPeer;
            public Integer scheduleDate = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = background != null ? (flags | 64) : (flags & ~64);
                flags = withMyScore != null ? (flags | 256) : (flags & ~256);
                flags = dropAuthor != null ? (flags | 2048) : (flags & ~2048);
                flags = dropMediaCaptions != null ? (flags | 4096) : (flags & ~4096);
                flags = noforwards != null ? (flags | 16384) : (flags & ~16384);
                flags = scheduleDate != null ? (flags | 1024) : (flags & ~1024);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 64) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                if ((flags & 256) != 0 && withMyScore != null) {
                    withMyScore.isBareType = true;
                    withMyScore.write(outputStream);
                }

                if ((flags & 2048) != 0 && dropAuthor != null) {
                    dropAuthor.isBareType = true;
                    dropAuthor.write(outputStream);
                }

                if ((flags & 4096) != 0 && dropMediaCaptions != null) {
                    dropMediaCaptions.isBareType = true;
                    dropMediaCaptions.write(outputStream);
                }

                if ((flags & 16384) != 0 && noforwards != null) {
                    noforwards.isBareType = true;
                    noforwards.write(outputStream);
                }

                fromPeer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);

                randomId.isBareTypeItem = true;
                randomId.write(outputStream);

                toPeer.write(outputStream);

                if ((flags & 1024) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 64) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                if ((flags & 256) != 0) {
                    withMyScore = new True();
                    withMyScore.isBareType = true;
                    withMyScore.read(inputStream);
                }

                if ((flags & 2048) != 0) {
                    dropAuthor = new True();
                    dropAuthor.isBareType = true;
                    dropAuthor.read(inputStream);
                }

                if ((flags & 4096) != 0) {
                    dropMediaCaptions = new True();
                    dropMediaCaptions.isBareType = true;
                    dropMediaCaptions.read(inputStream);
                }

                if ((flags & 16384) != 0) {
                    noforwards = new True();
                    noforwards.isBareType = true;
                    noforwards.read(inputStream);
                }

                fromPeer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);

                randomId = new TLVector<TLLong>(TLLong.class);
                randomId.isBareTypeItem = true;
                randomId.read(inputStream);

                toPeer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1024) != 0) {
                    scheduleDate = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ForwardMessages{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", background=" + background +
                        ", withMyScore=" + withMyScore +
                        ", dropAuthor=" + dropAuthor +
                        ", dropMediaCaptions=" + dropMediaCaptions +
                        ", noforwards=" + noforwards +
                        ", fromPeer=" + fromPeer +
                        ", id=" + id +
                        ", randomId=" + randomId +
                        ", toPeer=" + toPeer +
                        ", scheduleDate=" + scheduleDate +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class ReportSpam extends TLMethod<Bool> {
            public static final int ID = 0xcf1592db;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.reportSpam";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ReportSpam{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class GetPeerSettings extends TLMethod<NsMessages.PeerSettings> {
            public static final int ID = 0xefd9a6a2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getPeerSettings";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetPeerSettings{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class Report extends TLMethod<Bool> {
            public static final int ID = 0x8953ab4e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.report";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;
            public ApiScheme.ReportReason reason;
            public String message;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);

                reason.write(outputStream);

                outputStream.writeTLString(message);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);

                reason = ApiScheme.ReportReason.readObject(inputStream);
                message = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "Report{" +
                        "peer=" + peer +
                        ", id=" + id +
                        ", reason=" + reason +
                        ", message=" + message +
                        '}';

            }
        }


        public static class GetChats extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0x49e9528f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getChats";
            public TLVector<TLLong> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<TLLong>(TLLong.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetChats{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetFullChat extends TLMethod<NsMessages.ChatFull> {
            public static final int ID = 0xaeb00b34;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getFullChat";
            public long chatId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetFullChat{" +
                        "chatId=" + chatId +
                        '}';

            }
        }


        public static class EditChatTitle extends TLMethod<Updates> {
            public static final int ID = 0x73783ffd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editChatTitle";
            public long chatId;
            public String title;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);
                outputStream.writeTLString(title);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();
                title = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditChatTitle{" +
                        "chatId=" + chatId +
                        ", title=" + title +
                        '}';

            }
        }


        public static class EditChatPhoto extends TLMethod<Updates> {
            public static final int ID = 0x35ddd674;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editChatPhoto";
            public long chatId;
            public ApiScheme.InputChatPhoto photo;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);
                photo.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();
                photo = ApiScheme.InputChatPhoto.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditChatPhoto{" +
                        "chatId=" + chatId +
                        ", photo=" + photo +
                        '}';

            }
        }


        public static class AddChatUser extends TLMethod<Updates> {
            public static final int ID = 0xf24753e3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.addChatUser";
            public long chatId;
            public ApiScheme.InputUser userId;
            public int fwdLimit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);
                userId.write(outputStream);

                outputStream.writeInt(fwdLimit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();
                userId = ApiScheme.InputUser.readObject(inputStream);
                fwdLimit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "AddChatUser{" +
                        "chatId=" + chatId +
                        ", userId=" + userId +
                        ", fwdLimit=" + fwdLimit +
                        '}';

            }
        }


        public static class DeleteChatUser extends TLMethod<Updates> {
            public static final int ID = 0xa2185cab;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteChatUser";
            public int flags;
            public True revokeHistory = null;
            public long chatId;
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = revokeHistory != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && revokeHistory != null) {
                    revokeHistory.isBareType = true;
                    revokeHistory.write(outputStream);
                }

                outputStream.writeLong(chatId);
                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    revokeHistory = new True();
                    revokeHistory.isBareType = true;
                    revokeHistory.read(inputStream);
                }

                chatId = inputStream.readLong();
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DeleteChatUser{" +
                        "flags=" + flags +
                        ", revokeHistory=" + revokeHistory +
                        ", chatId=" + chatId +
                        ", userId=" + userId +
                        '}';

            }
        }


        public static class CreateChat extends TLMethod<Updates> {
            public static final int ID = 0x9cb126e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.createChat";
            public TLVector<ApiScheme.InputUser> users;
            public String title;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                users.write(outputStream);

                outputStream.writeTLString(title);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                users = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                users.read(inputStream);

                title = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CreateChat{" +
                        "users=" + users +
                        ", title=" + title +
                        '}';

            }
        }


        public static class GetDhConfig extends TLMethod<NsMessages.DhConfig> {
            public static final int ID = 0x26cf8950;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDhConfig";
            public int version;
            public int randomLength;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(version);
                outputStream.writeInt(randomLength);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                version = inputStream.readInt();
                randomLength = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetDhConfig{" +
                        "version=" + version +
                        ", randomLength=" + randomLength +
                        '}';

            }
        }


        public static class RequestEncryption extends TLMethod<EncryptedChat> {
            public static final int ID = 0xf64daf43;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.requestEncryption";
            public ApiScheme.InputUser userId;
            public int randomId;
            public byte[] gA;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                outputStream.writeInt(randomId);
                outputStream.writeTLBytes(gA);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                randomId = inputStream.readInt();
                gA = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "RequestEncryption{" +
                        "userId=" + userId +
                        ", randomId=" + randomId +
                        ", gA=" + gA +
                        '}';

            }
        }


        public static class AcceptEncryption extends TLMethod<EncryptedChat> {
            public static final int ID = 0x3dbc0415;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.acceptEncryption";
            public ApiScheme.InputEncryptedChat peer;
            public byte[] gB;
            public long keyFingerprint;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLBytes(gB);
                outputStream.writeLong(keyFingerprint);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                gB = inputStream.readTLBytes();
                keyFingerprint = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "AcceptEncryption{" +
                        "peer=" + peer +
                        ", gB=" + gB +
                        ", keyFingerprint=" + keyFingerprint +
                        '}';

            }
        }


        public static class DiscardEncryption extends TLMethod<Bool> {
            public static final int ID = 0xf393aea0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.discardEncryption";
            public int flags;
            public True deleteHistory = null;
            public int chatId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = deleteHistory != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && deleteHistory != null) {
                    deleteHistory.isBareType = true;
                    deleteHistory.write(outputStream);
                }

                outputStream.writeInt(chatId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    deleteHistory = new True();
                    deleteHistory.isBareType = true;
                    deleteHistory.read(inputStream);
                }

                chatId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DiscardEncryption{" +
                        "flags=" + flags +
                        ", deleteHistory=" + deleteHistory +
                        ", chatId=" + chatId +
                        '}';

            }
        }


        public static class SetEncryptedTyping extends TLMethod<Bool> {
            public static final int ID = 0x791451ed;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setEncryptedTyping";
            public ApiScheme.InputEncryptedChat peer;
            public ApiScheme.Bool typing;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                typing.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                typing = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetEncryptedTyping{" +
                        "peer=" + peer +
                        ", typing=" + typing +
                        '}';

            }
        }


        public static class ReadEncryptedHistory extends TLMethod<Bool> {
            public static final int ID = 0x7f4b690a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readEncryptedHistory";
            public ApiScheme.InputEncryptedChat peer;
            public int maxDate;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(maxDate);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                maxDate = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReadEncryptedHistory{" +
                        "peer=" + peer +
                        ", maxDate=" + maxDate +
                        '}';

            }
        }


        public static class SendEncrypted extends TLMethod<NsMessages.SentEncryptedMessage> {
            public static final int ID = 0x44fa7a15;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendEncrypted";
            public int flags;
            public True silent = null;
            public ApiScheme.InputEncryptedChat peer;
            public long randomId;
            public byte[] data;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeLong(randomId);
                outputStream.writeTLBytes(data);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                randomId = inputStream.readLong();
                data = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "SendEncrypted{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", peer=" + peer +
                        ", randomId=" + randomId +
                        ", data=" + data +
                        '}';

            }
        }


        public static class SendEncryptedFile extends TLMethod<NsMessages.SentEncryptedMessage> {
            public static final int ID = 0x5559481d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendEncryptedFile";
            public int flags;
            public True silent = null;
            public ApiScheme.InputEncryptedChat peer;
            public long randomId;
            public byte[] data;
            public ApiScheme.InputEncryptedFile file;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeLong(randomId);
                outputStream.writeTLBytes(data);
                file.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                randomId = inputStream.readLong();
                data = inputStream.readTLBytes();
                file = ApiScheme.InputEncryptedFile.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendEncryptedFile{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", peer=" + peer +
                        ", randomId=" + randomId +
                        ", data=" + data +
                        ", file=" + file +
                        '}';

            }
        }


        public static class SendEncryptedService extends TLMethod<NsMessages.SentEncryptedMessage> {
            public static final int ID = 0x32d439a4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendEncryptedService";
            public ApiScheme.InputEncryptedChat peer;
            public long randomId;
            public byte[] data;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeLong(randomId);
                outputStream.writeTLBytes(data);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                randomId = inputStream.readLong();
                data = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "SendEncryptedService{" +
                        "peer=" + peer +
                        ", randomId=" + randomId +
                        ", data=" + data +
                        '}';

            }
        }


        public static class ReceivedQueue extends TLMethod<TLVector<TLLong>> {
            public static final int ID = 0x55a5bb66;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.receivedQueue";
            public int maxQts;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(maxQts);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                maxQts = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReceivedQueue{" +
                        "maxQts=" + maxQts +
                        '}';

            }
        }


        public static class ReportEncryptedSpam extends TLMethod<Bool> {
            public static final int ID = 0x4b0c8c0f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.reportEncryptedSpam";
            public ApiScheme.InputEncryptedChat peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ReportEncryptedSpam{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class ReadMessageContents extends TLMethod<NsMessages.AffectedMessages> {
            public static final int ID = 0x36a73f77;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readMessageContents";
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReadMessageContents{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetStickers extends TLMethod<NsMessages.Stickers> {
            public static final int ID = 0xd5a5d3a1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getStickers";
            public String emoticon;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(emoticon);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                emoticon = inputStream.readTLString();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetStickers{" +
                        "emoticon=" + emoticon +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetAllStickers extends TLMethod<NsMessages.AllStickers> {
            public static final int ID = 0xb8a0a1a8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAllStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetAllStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetWebPagePreview extends TLMethod<MessageMedia> {
            public static final int ID = 0x8b68b0cc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getWebPagePreview";
            public int flags;
            public String message;
            public TLVector<ApiScheme.MessageEntity> entities = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = entities != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                outputStream.writeTLString(message);
                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                message = inputStream.readTLString();
                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "GetWebPagePreview{" +
                        "flags=" + flags +
                        ", message=" + message +
                        ", entities=" + entities +
                        '}';

            }
        }


        public static class ExportChatInvite extends TLMethod<ExportedChatInvite> {
            public static final int ID = 0xa02ce5d5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.exportChatInvite";
            public int flags;
            public True legacyRevokePermanent = null;
            public True requestNeeded = null;
            public ApiScheme.InputPeer peer;
            public Integer expireDate = null;
            public Integer usageLimit = null;
            public String title = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = legacyRevokePermanent != null ? (flags | 4) : (flags & ~4);
                flags = requestNeeded != null ? (flags | 8) : (flags & ~8);
                flags = expireDate != null ? (flags | 1) : (flags & ~1);
                flags = usageLimit != null ? (flags | 2) : (flags & ~2);
                flags = title != null ? (flags | 16) : (flags & ~16);
                outputStream.writeInt(flags);
                if ((flags & 4) != 0 && legacyRevokePermanent != null) {
                    legacyRevokePermanent.isBareType = true;
                    legacyRevokePermanent.write(outputStream);
                }

                if ((flags & 8) != 0 && requestNeeded != null) {
                    requestNeeded.isBareType = true;
                    requestNeeded.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 1) != 0 && expireDate != null) {
                    outputStream.writeInt(expireDate);
                }

                if ((flags & 2) != 0 && usageLimit != null) {
                    outputStream.writeInt(usageLimit);
                }

                if ((flags & 16) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 4) != 0) {
                    legacyRevokePermanent = new True();
                    legacyRevokePermanent.isBareType = true;
                    legacyRevokePermanent.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    requestNeeded = new True();
                    requestNeeded.isBareType = true;
                    requestNeeded.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    expireDate = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    usageLimit = inputStream.readInt();
                }

                if ((flags & 16) != 0) {
                    title = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "ExportChatInvite{" +
                        "flags=" + flags +
                        ", legacyRevokePermanent=" + legacyRevokePermanent +
                        ", requestNeeded=" + requestNeeded +
                        ", peer=" + peer +
                        ", expireDate=" + expireDate +
                        ", usageLimit=" + usageLimit +
                        ", title=" + title +
                        '}';

            }
        }


        public static class CheckChatInvite extends TLMethod<ChatInvite> {
            public static final int ID = 0x3eadb1bb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.checkChatInvite";
            public String hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckChatInvite{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class ImportChatInvite extends TLMethod<Updates> {
            public static final int ID = 0x6c50051c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.importChatInvite";
            public String hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ImportChatInvite{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetStickerSet extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0xc8a0ec74;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getStickerSet";
            public ApiScheme.InputStickerSet stickerset;
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                stickerset.write(outputStream);

                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetStickerSet{" +
                        "stickerset=" + stickerset +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class InstallStickerSet extends TLMethod<NsMessages.StickerSetInstallResult> {
            public static final int ID = 0xc78fe460;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.installStickerSet";
            public ApiScheme.InputStickerSet stickerset;
            public ApiScheme.Bool archived;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                stickerset.write(outputStream);

                archived.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
                archived = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "InstallStickerSet{" +
                        "stickerset=" + stickerset +
                        ", archived=" + archived +
                        '}';

            }
        }


        public static class UninstallStickerSet extends TLMethod<Bool> {
            public static final int ID = 0xf96e55de;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.uninstallStickerSet";
            public ApiScheme.InputStickerSet stickerset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                stickerset.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UninstallStickerSet{" +
                        "stickerset=" + stickerset +
                        '}';

            }
        }


        public static class StartBot extends TLMethod<Updates> {
            public static final int ID = 0xe6df7378;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.startBot";
            public ApiScheme.InputUser bot;
            public ApiScheme.InputPeer peer;
            public long randomId;
            public String startParam;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                bot.write(outputStream);

                peer.write(outputStream);

                outputStream.writeLong(randomId);
                outputStream.writeTLString(startParam);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                bot = ApiScheme.InputUser.readObject(inputStream);
                peer = ApiScheme.InputPeer.readObject(inputStream);
                randomId = inputStream.readLong();
                startParam = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "StartBot{" +
                        "bot=" + bot +
                        ", peer=" + peer +
                        ", randomId=" + randomId +
                        ", startParam=" + startParam +
                        '}';

            }
        }


        public static class GetMessagesViews extends TLMethod<NsMessages.MessageViews> {
            public static final int ID = 0x5784d3e1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessagesViews";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;
            public ApiScheme.Bool increment;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);

                increment.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);

                increment = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetMessagesViews{" +
                        "peer=" + peer +
                        ", id=" + id +
                        ", increment=" + increment +
                        '}';

            }
        }


        public static class EditChatAdmin extends TLMethod<Bool> {
            public static final int ID = 0xa85bd1c2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editChatAdmin";
            public long chatId;
            public ApiScheme.InputUser userId;
            public ApiScheme.Bool isAdmin;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);
                userId.write(outputStream);

                isAdmin.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();
                userId = ApiScheme.InputUser.readObject(inputStream);
                isAdmin = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditChatAdmin{" +
                        "chatId=" + chatId +
                        ", userId=" + userId +
                        ", isAdmin=" + isAdmin +
                        '}';

            }
        }


        public static class MigrateChat extends TLMethod<Updates> {
            public static final int ID = 0xa2875319;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.migrateChat";
            public long chatId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "MigrateChat{" +
                        "chatId=" + chatId +
                        '}';

            }
        }


        public static class SearchGlobal extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x4bc6589a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.searchGlobal";
            public int flags;
            public Integer folderId = null;
            public String q;
            public ApiScheme.MessagesFilter filter;
            public int minDate;
            public int maxDate;
            public int offsetRate;
            public ApiScheme.InputPeer offsetPeer;
            public int offsetId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = folderId != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && folderId != null) {
                    outputStream.writeInt(folderId);
                }

                outputStream.writeTLString(q);
                filter.write(outputStream);

                outputStream.writeInt(minDate);
                outputStream.writeInt(maxDate);
                outputStream.writeInt(offsetRate);
                offsetPeer.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    folderId = inputStream.readInt();
                }

                q = inputStream.readTLString();
                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                minDate = inputStream.readInt();
                maxDate = inputStream.readInt();
                offsetRate = inputStream.readInt();
                offsetPeer = ApiScheme.InputPeer.readObject(inputStream);
                offsetId = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SearchGlobal{" +
                        "flags=" + flags +
                        ", folderId=" + folderId +
                        ", q=" + q +
                        ", filter=" + filter +
                        ", minDate=" + minDate +
                        ", maxDate=" + maxDate +
                        ", offsetRate=" + offsetRate +
                        ", offsetPeer=" + offsetPeer +
                        ", offsetId=" + offsetId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class ReorderStickerSets extends TLMethod<Bool> {
            public static final int ID = 0x78337739;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.reorderStickerSets";
            public int flags;
            public True masks = null;
            public True emojis = null;
            public TLVector<TLLong> order;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = masks != null ? (flags | 1) : (flags & ~1);
                flags = emojis != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && masks != null) {
                    masks.isBareType = true;
                    masks.write(outputStream);
                }

                if ((flags & 2) != 0 && emojis != null) {
                    emojis.isBareType = true;
                    emojis.write(outputStream);
                }

                order.isBareTypeItem = true;
                order.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    masks = new True();
                    masks.isBareType = true;
                    masks.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    emojis = new True();
                    emojis.isBareType = true;
                    emojis.read(inputStream);
                }

                order = new TLVector<TLLong>(TLLong.class);
                order.isBareTypeItem = true;
                order.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReorderStickerSets{" +
                        "flags=" + flags +
                        ", masks=" + masks +
                        ", emojis=" + emojis +
                        ", order=" + order +
                        '}';

            }
        }


        public static class GetDocumentByHash extends TLMethod<Document> {
            public static final int ID = 0xb1f2061f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDocumentByHash";
            public byte[] sha256;
            public long size;
            public String mimeType;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(sha256);
                outputStream.writeLong(size);
                outputStream.writeTLString(mimeType);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                sha256 = inputStream.readTLBytes();
                size = inputStream.readLong();
                mimeType = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetDocumentByHash{" +
                        "sha256=" + sha256 +
                        ", size=" + size +
                        ", mimeType=" + mimeType +
                        '}';

            }
        }


        public static class GetSavedGifs extends TLMethod<NsMessages.SavedGifs> {
            public static final int ID = 0x5cf09635;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSavedGifs";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetSavedGifs{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class SaveGif extends TLMethod<Bool> {
            public static final int ID = 0x327a30cb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.saveGif";
            public ApiScheme.InputDocument id;
            public ApiScheme.Bool unsave;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);

                unsave.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputDocument.readObject(inputStream);
                unsave = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveGif{" +
                        "id=" + id +
                        ", unsave=" + unsave +
                        '}';

            }
        }


        public static class GetInlineBotResults extends TLMethod<NsMessages.BotResults> {
            public static final int ID = 0x514e999d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getInlineBotResults";
            public int flags;
            public ApiScheme.InputUser bot;
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputGeoPoint geoPoint = null;
            public String query;
            public String offset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = geoPoint != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                bot.write(outputStream);

                peer.write(outputStream);

                if ((flags & 1) != 0 && geoPoint != null) {
                    geoPoint.write(outputStream);
                }

                outputStream.writeTLString(query);
                outputStream.writeTLString(offset);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                bot = ApiScheme.InputUser.readObject(inputStream);
                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
                }

                query = inputStream.readTLString();
                offset = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetInlineBotResults{" +
                        "flags=" + flags +
                        ", bot=" + bot +
                        ", peer=" + peer +
                        ", geoPoint=" + geoPoint +
                        ", query=" + query +
                        ", offset=" + offset +
                        '}';

            }
        }


        public static class SetInlineBotResults extends TLMethod<Bool> {
            public static final int ID = 0xeb5ea206;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setInlineBotResults";
            public int flags;
            public True gallery = null;
            public True mPrivate = null;
            public long queryId;
            public TLVector<ApiScheme.InputBotInlineResult> results;
            public int cacheTime;
            public String nextOffset = null;
            public ApiScheme.InlineBotSwitchPM switchPm = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = gallery != null ? (flags | 1) : (flags & ~1);
                flags = mPrivate != null ? (flags | 2) : (flags & ~2);
                flags = nextOffset != null ? (flags | 4) : (flags & ~4);
                flags = switchPm != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && gallery != null) {
                    gallery.isBareType = true;
                    gallery.write(outputStream);
                }

                if ((flags & 2) != 0 && mPrivate != null) {
                    mPrivate.isBareType = true;
                    mPrivate.write(outputStream);
                }

                outputStream.writeLong(queryId);
                results.write(outputStream);

                outputStream.writeInt(cacheTime);
                if ((flags & 4) != 0 && nextOffset != null) {
                    outputStream.writeTLString(nextOffset);
                }

                if ((flags & 8) != 0 && switchPm != null) {
                    switchPm.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    gallery = new True();
                    gallery.isBareType = true;
                    gallery.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    mPrivate = new True();
                    mPrivate.isBareType = true;
                    mPrivate.read(inputStream);
                }

                queryId = inputStream.readLong();
                results = new TLVector<ApiScheme.InputBotInlineResult>(ApiScheme.InputBotInlineResult.class);
                results.read(inputStream);

                cacheTime = inputStream.readInt();
                if ((flags & 4) != 0) {
                    nextOffset = inputStream.readTLString();
                }

                if ((flags & 8) != 0) {
                    switchPm = ApiScheme.InlineBotSwitchPM.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SetInlineBotResults{" +
                        "flags=" + flags +
                        ", gallery=" + gallery +
                        ", mPrivate=" + mPrivate +
                        ", queryId=" + queryId +
                        ", results=" + results +
                        ", cacheTime=" + cacheTime +
                        ", nextOffset=" + nextOffset +
                        ", switchPm=" + switchPm +
                        '}';

            }
        }


        public static class SendInlineBotResult extends TLMethod<Updates> {
            public static final int ID = 0x7aa11297;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendInlineBotResult";
            public int flags;
            public True silent = null;
            public True background = null;
            public True clearDraft = null;
            public True hideVia = null;
            public ApiScheme.InputPeer peer;
            public Integer replyToMsgId = null;
            public long randomId;
            public long queryId;
            public String id;
            public Integer scheduleDate = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = background != null ? (flags | 64) : (flags & ~64);
                flags = clearDraft != null ? (flags | 128) : (flags & ~128);
                flags = hideVia != null ? (flags | 2048) : (flags & ~2048);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = scheduleDate != null ? (flags | 1024) : (flags & ~1024);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 64) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                if ((flags & 128) != 0 && clearDraft != null) {
                    clearDraft.isBareType = true;
                    clearDraft.write(outputStream);
                }

                if ((flags & 2048) != 0 && hideVia != null) {
                    hideVia.isBareType = true;
                    hideVia.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                outputStream.writeLong(randomId);
                outputStream.writeLong(queryId);
                outputStream.writeTLString(id);
                if ((flags & 1024) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 64) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                if ((flags & 128) != 0) {
                    clearDraft = new True();
                    clearDraft.isBareType = true;
                    clearDraft.read(inputStream);
                }

                if ((flags & 2048) != 0) {
                    hideVia = new True();
                    hideVia.isBareType = true;
                    hideVia.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                randomId = inputStream.readLong();
                queryId = inputStream.readLong();
                id = inputStream.readTLString();
                if ((flags & 1024) != 0) {
                    scheduleDate = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SendInlineBotResult{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", background=" + background +
                        ", clearDraft=" + clearDraft +
                        ", hideVia=" + hideVia +
                        ", peer=" + peer +
                        ", replyToMsgId=" + replyToMsgId +
                        ", randomId=" + randomId +
                        ", queryId=" + queryId +
                        ", id=" + id +
                        ", scheduleDate=" + scheduleDate +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class GetMessageEditData extends TLMethod<NsMessages.MessageEditData> {
            public static final int ID = 0xfda68d36;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessageEditData";
            public ApiScheme.InputPeer peer;
            public int id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(id);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetMessageEditData{" +
                        "peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class EditMessage extends TLMethod<Updates> {
            public static final int ID = 0x48f71778;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editMessage";
            public int flags;
            public True noWebpage = null;
            public ApiScheme.InputPeer peer;
            public int id;
            public String message = null;
            public ApiScheme.InputMedia media = null;
            public ApiScheme.ReplyMarkup replyMarkup = null;
            public TLVector<ApiScheme.MessageEntity> entities = null;
            public Integer scheduleDate = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = noWebpage != null ? (flags | 2) : (flags & ~2);
                flags = message != null ? (flags | 2048) : (flags & ~2048);
                flags = media != null ? (flags | 16384) : (flags & ~16384);
                flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
                flags = entities != null ? (flags | 8) : (flags & ~8);
                flags = scheduleDate != null ? (flags | 32768) : (flags & ~32768);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && noWebpage != null) {
                    noWebpage.isBareType = true;
                    noWebpage.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(id);
                if ((flags & 2048) != 0 && message != null) {
                    outputStream.writeTLString(message);
                }

                if ((flags & 16384) != 0 && media != null) {
                    media.write(outputStream);
                }

                if ((flags & 4) != 0 && replyMarkup != null) {
                    replyMarkup.write(outputStream);
                }

                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }

                if ((flags & 32768) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    noWebpage = new True();
                    noWebpage.isBareType = true;
                    noWebpage.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();
                if ((flags & 2048) != 0) {
                    message = inputStream.readTLString();
                }

                if ((flags & 16384) != 0) {
                    media = ApiScheme.InputMedia.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }

                if ((flags & 32768) != 0) {
                    scheduleDate = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "EditMessage{" +
                        "flags=" + flags +
                        ", noWebpage=" + noWebpage +
                        ", peer=" + peer +
                        ", id=" + id +
                        ", message=" + message +
                        ", media=" + media +
                        ", replyMarkup=" + replyMarkup +
                        ", entities=" + entities +
                        ", scheduleDate=" + scheduleDate +
                        '}';

            }
        }


        public static class EditInlineBotMessage extends TLMethod<Bool> {
            public static final int ID = 0x83557dba;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editInlineBotMessage";
            public int flags;
            public True noWebpage = null;
            public ApiScheme.InputBotInlineMessageID id;
            public String message = null;
            public ApiScheme.InputMedia media = null;
            public ApiScheme.ReplyMarkup replyMarkup = null;
            public TLVector<ApiScheme.MessageEntity> entities = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = noWebpage != null ? (flags | 2) : (flags & ~2);
                flags = message != null ? (flags | 2048) : (flags & ~2048);
                flags = media != null ? (flags | 16384) : (flags & ~16384);
                flags = replyMarkup != null ? (flags | 4) : (flags & ~4);
                flags = entities != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && noWebpage != null) {
                    noWebpage.isBareType = true;
                    noWebpage.write(outputStream);
                }

                id.write(outputStream);

                if ((flags & 2048) != 0 && message != null) {
                    outputStream.writeTLString(message);
                }

                if ((flags & 16384) != 0 && media != null) {
                    media.write(outputStream);
                }

                if ((flags & 4) != 0 && replyMarkup != null) {
                    replyMarkup.write(outputStream);
                }

                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    noWebpage = new True();
                    noWebpage.isBareType = true;
                    noWebpage.read(inputStream);
                }

                id = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
                if ((flags & 2048) != 0) {
                    message = inputStream.readTLString();
                }

                if ((flags & 16384) != 0) {
                    media = ApiScheme.InputMedia.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    replyMarkup = ApiScheme.ReplyMarkup.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "EditInlineBotMessage{" +
                        "flags=" + flags +
                        ", noWebpage=" + noWebpage +
                        ", id=" + id +
                        ", message=" + message +
                        ", media=" + media +
                        ", replyMarkup=" + replyMarkup +
                        ", entities=" + entities +
                        '}';

            }
        }


        public static class GetBotCallbackAnswer extends TLMethod<NsMessages.BotCallbackAnswer> {
            public static final int ID = 0x9342ca07;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getBotCallbackAnswer";
            public int flags;
            public True game = null;
            public ApiScheme.InputPeer peer;
            public int msgId;
            public byte[] data = null;
            public ApiScheme.InputCheckPasswordSRP password = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = game != null ? (flags | 2) : (flags & ~2);
                flags = data != null ? (flags | 1) : (flags & ~1);
                flags = password != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && game != null) {
                    game.isBareType = true;
                    game.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(msgId);
                if ((flags & 1) != 0 && data != null) {
                    outputStream.writeTLBytes(data);
                }

                if ((flags & 4) != 0 && password != null) {
                    password.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    game = new True();
                    game.isBareType = true;
                    game.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                if ((flags & 1) != 0) {
                    data = inputStream.readTLBytes();
                }

                if ((flags & 4) != 0) {
                    password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "GetBotCallbackAnswer{" +
                        "flags=" + flags +
                        ", game=" + game +
                        ", peer=" + peer +
                        ", msgId=" + msgId +
                        ", data=" + data +
                        ", password=" + password +
                        '}';

            }
        }


        public static class SetBotCallbackAnswer extends TLMethod<Bool> {
            public static final int ID = 0xd58f130a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setBotCallbackAnswer";
            public int flags;
            public True alert = null;
            public long queryId;
            public String message = null;
            public String url = null;
            public int cacheTime;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = alert != null ? (flags | 2) : (flags & ~2);
                flags = message != null ? (flags | 1) : (flags & ~1);
                flags = url != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && alert != null) {
                    alert.isBareType = true;
                    alert.write(outputStream);
                }

                outputStream.writeLong(queryId);
                if ((flags & 1) != 0 && message != null) {
                    outputStream.writeTLString(message);
                }

                if ((flags & 4) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }

                outputStream.writeInt(cacheTime);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    alert = new True();
                    alert.isBareType = true;
                    alert.read(inputStream);
                }

                queryId = inputStream.readLong();
                if ((flags & 1) != 0) {
                    message = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    url = inputStream.readTLString();
                }

                cacheTime = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SetBotCallbackAnswer{" +
                        "flags=" + flags +
                        ", alert=" + alert +
                        ", queryId=" + queryId +
                        ", message=" + message +
                        ", url=" + url +
                        ", cacheTime=" + cacheTime +
                        '}';

            }
        }


        public static class GetPeerDialogs extends TLMethod<NsMessages.PeerDialogs> {
            public static final int ID = 0xe470bcfd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getPeerDialogs";
            public TLVector<ApiScheme.InputDialogPeer> peers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peers = new TLVector<ApiScheme.InputDialogPeer>(ApiScheme.InputDialogPeer.class);
                peers.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetPeerDialogs{" +
                        "peers=" + peers +
                        '}';

            }
        }


        public static class SaveDraft extends TLMethod<Bool> {
            public static final int ID = 0xbc39e14b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.saveDraft";
            public int flags;
            public True noWebpage = null;
            public Integer replyToMsgId = null;
            public ApiScheme.InputPeer peer;
            public String message;
            public TLVector<ApiScheme.MessageEntity> entities = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = noWebpage != null ? (flags | 2) : (flags & ~2);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = entities != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && noWebpage != null) {
                    noWebpage.isBareType = true;
                    noWebpage.write(outputStream);
                }

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                peer.write(outputStream);

                outputStream.writeTLString(message);
                if ((flags & 8) != 0 && entities != null) {
                    entities.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    noWebpage = new True();
                    noWebpage.isBareType = true;
                    noWebpage.read(inputStream);
                }

                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                message = inputStream.readTLString();
                if ((flags & 8) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SaveDraft{" +
                        "flags=" + flags +
                        ", noWebpage=" + noWebpage +
                        ", replyToMsgId=" + replyToMsgId +
                        ", peer=" + peer +
                        ", message=" + message +
                        ", entities=" + entities +
                        '}';

            }
        }


        public static class GetAllDrafts extends TLMethod<Updates> {
            public static final int ID = 0x6a3f8d65;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAllDrafts";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAllDrafts{" +
                        '}';

            }
        }


        public static class GetFeaturedStickers extends TLMethod<NsMessages.FeaturedStickers> {
            public static final int ID = 0x64780b14;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getFeaturedStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetFeaturedStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class ReadFeaturedStickers extends TLMethod<Bool> {
            public static final int ID = 0x5b118126;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readFeaturedStickers";
            public TLVector<TLLong> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<TLLong>(TLLong.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReadFeaturedStickers{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetRecentStickers extends TLMethod<NsMessages.RecentStickers> {
            public static final int ID = 0x9da9403b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getRecentStickers";
            public int flags;
            public True attached = null;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = attached != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && attached != null) {
                    attached.isBareType = true;
                    attached.write(outputStream);
                }

                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    attached = new True();
                    attached.isBareType = true;
                    attached.read(inputStream);
                }

                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetRecentStickers{" +
                        "flags=" + flags +
                        ", attached=" + attached +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class SaveRecentSticker extends TLMethod<Bool> {
            public static final int ID = 0x392718f8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.saveRecentSticker";
            public int flags;
            public True attached = null;
            public ApiScheme.InputDocument id;
            public ApiScheme.Bool unsave;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = attached != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && attached != null) {
                    attached.isBareType = true;
                    attached.write(outputStream);
                }

                id.write(outputStream);

                unsave.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    attached = new True();
                    attached.isBareType = true;
                    attached.read(inputStream);
                }

                id = ApiScheme.InputDocument.readObject(inputStream);
                unsave = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveRecentSticker{" +
                        "flags=" + flags +
                        ", attached=" + attached +
                        ", id=" + id +
                        ", unsave=" + unsave +
                        '}';

            }
        }


        public static class ClearRecentStickers extends TLMethod<Bool> {
            public static final int ID = 0x8999602d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.clearRecentStickers";
            public int flags;
            public True attached = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = attached != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && attached != null) {
                    attached.isBareType = true;
                    attached.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    attached = new True();
                    attached.isBareType = true;
                    attached.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ClearRecentStickers{" +
                        "flags=" + flags +
                        ", attached=" + attached +
                        '}';

            }
        }


        public static class GetArchivedStickers extends TLMethod<NsMessages.ArchivedStickers> {
            public static final int ID = 0x57f17692;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getArchivedStickers";
            public int flags;
            public True masks = null;
            public True emojis = null;
            public long offsetId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = masks != null ? (flags | 1) : (flags & ~1);
                flags = emojis != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && masks != null) {
                    masks.isBareType = true;
                    masks.write(outputStream);
                }

                if ((flags & 2) != 0 && emojis != null) {
                    emojis.isBareType = true;
                    emojis.write(outputStream);
                }

                outputStream.writeLong(offsetId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    masks = new True();
                    masks.isBareType = true;
                    masks.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    emojis = new True();
                    emojis.isBareType = true;
                    emojis.read(inputStream);
                }

                offsetId = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetArchivedStickers{" +
                        "flags=" + flags +
                        ", masks=" + masks +
                        ", emojis=" + emojis +
                        ", offsetId=" + offsetId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetMaskStickers extends TLMethod<NsMessages.AllStickers> {
            public static final int ID = 0x640f82b8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMaskStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetMaskStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetAttachedStickers extends TLMethod<TLVector<StickerSetCovered>> {
            public static final int ID = 0xcc5b67cc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAttachedStickers";
            public ApiScheme.InputStickeredMedia media;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                media.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                media = ApiScheme.InputStickeredMedia.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetAttachedStickers{" +
                        "media=" + media +
                        '}';

            }
        }


        public static class SetGameScore extends TLMethod<Updates> {
            public static final int ID = 0x8ef8ecc0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setGameScore";
            public int flags;
            public True editMessage = null;
            public True force = null;
            public ApiScheme.InputPeer peer;
            public int id;
            public ApiScheme.InputUser userId;
            public int score;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = editMessage != null ? (flags | 1) : (flags & ~1);
                flags = force != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && editMessage != null) {
                    editMessage.isBareType = true;
                    editMessage.write(outputStream);
                }

                if ((flags & 2) != 0 && force != null) {
                    force.isBareType = true;
                    force.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(id);
                userId.write(outputStream);

                outputStream.writeInt(score);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    editMessage = new True();
                    editMessage.isBareType = true;
                    editMessage.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    force = new True();
                    force.isBareType = true;
                    force.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();
                userId = ApiScheme.InputUser.readObject(inputStream);
                score = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SetGameScore{" +
                        "flags=" + flags +
                        ", editMessage=" + editMessage +
                        ", force=" + force +
                        ", peer=" + peer +
                        ", id=" + id +
                        ", userId=" + userId +
                        ", score=" + score +
                        '}';

            }
        }


        public static class SetInlineGameScore extends TLMethod<Bool> {
            public static final int ID = 0x15ad9f64;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setInlineGameScore";
            public int flags;
            public True editMessage = null;
            public True force = null;
            public ApiScheme.InputBotInlineMessageID id;
            public ApiScheme.InputUser userId;
            public int score;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = editMessage != null ? (flags | 1) : (flags & ~1);
                flags = force != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && editMessage != null) {
                    editMessage.isBareType = true;
                    editMessage.write(outputStream);
                }

                if ((flags & 2) != 0 && force != null) {
                    force.isBareType = true;
                    force.write(outputStream);
                }

                id.write(outputStream);

                userId.write(outputStream);

                outputStream.writeInt(score);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    editMessage = new True();
                    editMessage.isBareType = true;
                    editMessage.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    force = new True();
                    force.isBareType = true;
                    force.read(inputStream);
                }

                id = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
                userId = ApiScheme.InputUser.readObject(inputStream);
                score = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SetInlineGameScore{" +
                        "flags=" + flags +
                        ", editMessage=" + editMessage +
                        ", force=" + force +
                        ", id=" + id +
                        ", userId=" + userId +
                        ", score=" + score +
                        '}';

            }
        }


        public static class GetGameHighScores extends TLMethod<NsMessages.HighScores> {
            public static final int ID = 0xe822649d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getGameHighScores";
            public ApiScheme.InputPeer peer;
            public int id;
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(id);
                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetGameHighScores{" +
                        "peer=" + peer +
                        ", id=" + id +
                        ", userId=" + userId +
                        '}';

            }
        }


        public static class GetInlineGameHighScores extends TLMethod<NsMessages.HighScores> {
            public static final int ID = 0xf635e1b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getInlineGameHighScores";
            public ApiScheme.InputBotInlineMessageID id;
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);

                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputBotInlineMessageID.readObject(inputStream);
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetInlineGameHighScores{" +
                        "id=" + id +
                        ", userId=" + userId +
                        '}';

            }
        }


        public static class GetCommonChats extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0xe40ca104;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getCommonChats";
            public ApiScheme.InputUser userId;
            public long maxId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                outputStream.writeLong(maxId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                maxId = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetCommonChats{" +
                        "userId=" + userId +
                        ", maxId=" + maxId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetAllChats extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0x875f74be;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAllChats";
            public TLVector<TLLong> exceptIds;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                exceptIds.isBareTypeItem = true;
                exceptIds.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                exceptIds = new TLVector<TLLong>(TLLong.class);
                exceptIds.isBareTypeItem = true;
                exceptIds.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetAllChats{" +
                        "exceptIds=" + exceptIds +
                        '}';

            }
        }


        public static class GetWebPage extends TLMethod<WebPage> {
            public static final int ID = 0x32ca8f91;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getWebPage";
            public String url;
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(url);
                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                url = inputStream.readTLString();
                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetWebPage{" +
                        "url=" + url +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class ToggleDialogPin extends TLMethod<Bool> {
            public static final int ID = 0xa731e257;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.toggleDialogPin";
            public int flags;
            public True pinned = null;
            public ApiScheme.InputDialogPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = pinned != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && pinned != null) {
                    pinned.isBareType = true;
                    pinned.write(outputStream);
                }

                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    pinned = new True();
                    pinned.isBareType = true;
                    pinned.read(inputStream);
                }

                peer = ApiScheme.InputDialogPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleDialogPin{" +
                        "flags=" + flags +
                        ", pinned=" + pinned +
                        ", peer=" + peer +
                        '}';

            }
        }


        public static class ReorderPinnedDialogs extends TLMethod<Bool> {
            public static final int ID = 0x3b1adf37;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.reorderPinnedDialogs";
            public int flags;
            public True force = null;
            public int folderId;
            public TLVector<ApiScheme.InputDialogPeer> order;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = force != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && force != null) {
                    force.isBareType = true;
                    force.write(outputStream);
                }

                outputStream.writeInt(folderId);
                order.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    force = new True();
                    force.isBareType = true;
                    force.read(inputStream);
                }

                folderId = inputStream.readInt();
                order = new TLVector<ApiScheme.InputDialogPeer>(ApiScheme.InputDialogPeer.class);
                order.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReorderPinnedDialogs{" +
                        "flags=" + flags +
                        ", force=" + force +
                        ", folderId=" + folderId +
                        ", order=" + order +
                        '}';

            }
        }


        public static class GetPinnedDialogs extends TLMethod<NsMessages.PeerDialogs> {
            public static final int ID = 0xd6b94df2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getPinnedDialogs";
            public int folderId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(folderId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                folderId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetPinnedDialogs{" +
                        "folderId=" + folderId +
                        '}';

            }
        }


        public static class SetBotShippingResults extends TLMethod<Bool> {
            public static final int ID = 0xe5f672fa;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setBotShippingResults";
            public int flags;
            public long queryId;
            public String error = null;
            public TLVector<ApiScheme.ShippingOption> shippingOptions = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = error != null ? (flags | 1) : (flags & ~1);
                flags = shippingOptions != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                outputStream.writeLong(queryId);
                if ((flags & 1) != 0 && error != null) {
                    outputStream.writeTLString(error);
                }

                if ((flags & 2) != 0 && shippingOptions != null) {
                    shippingOptions.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                queryId = inputStream.readLong();
                if ((flags & 1) != 0) {
                    error = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    shippingOptions = new TLVector<ApiScheme.ShippingOption>(ApiScheme.ShippingOption.class);
                    shippingOptions.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SetBotShippingResults{" +
                        "flags=" + flags +
                        ", queryId=" + queryId +
                        ", error=" + error +
                        ", shippingOptions=" + shippingOptions +
                        '}';

            }
        }


        public static class SetBotPrecheckoutResults extends TLMethod<Bool> {
            public static final int ID = 0x9c2dd95;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setBotPrecheckoutResults";
            public int flags;
            public True success = null;
            public long queryId;
            public String error = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = success != null ? (flags | 2) : (flags & ~2);
                flags = error != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && success != null) {
                    success.isBareType = true;
                    success.write(outputStream);
                }

                outputStream.writeLong(queryId);
                if ((flags & 1) != 0 && error != null) {
                    outputStream.writeTLString(error);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    success = new True();
                    success.isBareType = true;
                    success.read(inputStream);
                }

                queryId = inputStream.readLong();
                if ((flags & 1) != 0) {
                    error = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "SetBotPrecheckoutResults{" +
                        "flags=" + flags +
                        ", success=" + success +
                        ", queryId=" + queryId +
                        ", error=" + error +
                        '}';

            }
        }


        public static class UploadMedia extends TLMethod<MessageMedia> {
            public static final int ID = 0x519bc2b1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.uploadMedia";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputMedia media;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                media.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                media = ApiScheme.InputMedia.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UploadMedia{" +
                        "peer=" + peer +
                        ", media=" + media +
                        '}';

            }
        }


        public static class SendScreenshotNotification extends TLMethod<Updates> {
            public static final int ID = 0xc97df020;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendScreenshotNotification";
            public ApiScheme.InputPeer peer;
            public int replyToMsgId;
            public long randomId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(replyToMsgId);
                outputStream.writeLong(randomId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                replyToMsgId = inputStream.readInt();
                randomId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "SendScreenshotNotification{" +
                        "peer=" + peer +
                        ", replyToMsgId=" + replyToMsgId +
                        ", randomId=" + randomId +
                        '}';

            }
        }


        public static class GetFavedStickers extends TLMethod<NsMessages.FavedStickers> {
            public static final int ID = 0x4f1aaa9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getFavedStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetFavedStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class FaveSticker extends TLMethod<Bool> {
            public static final int ID = 0xb9ffc55b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.faveSticker";
            public ApiScheme.InputDocument id;
            public ApiScheme.Bool unfave;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);

                unfave.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputDocument.readObject(inputStream);
                unfave = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "FaveSticker{" +
                        "id=" + id +
                        ", unfave=" + unfave +
                        '}';

            }
        }


        public static class GetUnreadMentions extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x46578472;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getUnreadMentions";
            public ApiScheme.InputPeer peer;
            public int offsetId;
            public int addOffset;
            public int limit;
            public int maxId;
            public int minId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(addOffset);
                outputStream.writeInt(limit);
                outputStream.writeInt(maxId);
                outputStream.writeInt(minId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                offsetId = inputStream.readInt();
                addOffset = inputStream.readInt();
                limit = inputStream.readInt();
                maxId = inputStream.readInt();
                minId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetUnreadMentions{" +
                        "peer=" + peer +
                        ", offsetId=" + offsetId +
                        ", addOffset=" + addOffset +
                        ", limit=" + limit +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        '}';

            }
        }


        public static class ReadMentions extends TLMethod<NsMessages.AffectedHistory> {
            public static final int ID = 0xf0189d3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readMentions";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ReadMentions{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class GetRecentLocations extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x702a40e0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getRecentLocations";
            public ApiScheme.InputPeer peer;
            public int limit;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(limit);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                limit = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetRecentLocations{" +
                        "peer=" + peer +
                        ", limit=" + limit +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class SendMultiMedia extends TLMethod<Updates> {
            public static final int ID = 0xf803138f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendMultiMedia";
            public int flags;
            public True silent = null;
            public True background = null;
            public True clearDraft = null;
            public True noforwards = null;
            public ApiScheme.InputPeer peer;
            public Integer replyToMsgId = null;
            public TLVector<ApiScheme.InputSingleMedia> multiMedia;
            public Integer scheduleDate = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = background != null ? (flags | 64) : (flags & ~64);
                flags = clearDraft != null ? (flags | 128) : (flags & ~128);
                flags = noforwards != null ? (flags | 16384) : (flags & ~16384);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = scheduleDate != null ? (flags | 1024) : (flags & ~1024);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 64) != 0 && background != null) {
                    background.isBareType = true;
                    background.write(outputStream);
                }

                if ((flags & 128) != 0 && clearDraft != null) {
                    clearDraft.isBareType = true;
                    clearDraft.write(outputStream);
                }

                if ((flags & 16384) != 0 && noforwards != null) {
                    noforwards.isBareType = true;
                    noforwards.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                multiMedia.write(outputStream);

                if ((flags & 1024) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 64) != 0) {
                    background = new True();
                    background.isBareType = true;
                    background.read(inputStream);
                }

                if ((flags & 128) != 0) {
                    clearDraft = new True();
                    clearDraft.isBareType = true;
                    clearDraft.read(inputStream);
                }

                if ((flags & 16384) != 0) {
                    noforwards = new True();
                    noforwards.isBareType = true;
                    noforwards.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                multiMedia = new TLVector<ApiScheme.InputSingleMedia>(ApiScheme.InputSingleMedia.class);
                multiMedia.read(inputStream);

                if ((flags & 1024) != 0) {
                    scheduleDate = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SendMultiMedia{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", background=" + background +
                        ", clearDraft=" + clearDraft +
                        ", noforwards=" + noforwards +
                        ", peer=" + peer +
                        ", replyToMsgId=" + replyToMsgId +
                        ", multiMedia=" + multiMedia +
                        ", scheduleDate=" + scheduleDate +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class UploadEncryptedFile extends TLMethod<EncryptedFile> {
            public static final int ID = 0x5057c497;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.uploadEncryptedFile";
            public ApiScheme.InputEncryptedChat peer;
            public ApiScheme.InputEncryptedFile file;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                file.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputEncryptedChat.readObject(inputStream);
                file = ApiScheme.InputEncryptedFile.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UploadEncryptedFile{" +
                        "peer=" + peer +
                        ", file=" + file +
                        '}';

            }
        }


        public static class SearchStickerSets extends TLMethod<NsMessages.FoundStickerSets> {
            public static final int ID = 0x35705b8a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.searchStickerSets";
            public int flags;
            public True excludeFeatured = null;
            public String q;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = excludeFeatured != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && excludeFeatured != null) {
                    excludeFeatured.isBareType = true;
                    excludeFeatured.write(outputStream);
                }

                outputStream.writeTLString(q);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    excludeFeatured = new True();
                    excludeFeatured.isBareType = true;
                    excludeFeatured.read(inputStream);
                }

                q = inputStream.readTLString();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "SearchStickerSets{" +
                        "flags=" + flags +
                        ", excludeFeatured=" + excludeFeatured +
                        ", q=" + q +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetSplitRanges extends TLMethod<TLVector<MessageRange>> {
            public static final int ID = 0x1cff7e08;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSplitRanges";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSplitRanges{" +
                        '}';

            }
        }


        public static class MarkDialogUnread extends TLMethod<Bool> {
            public static final int ID = 0xc286d98f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.markDialogUnread";
            public int flags;
            public True unread = null;
            public ApiScheme.InputDialogPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = unread != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && unread != null) {
                    unread.isBareType = true;
                    unread.write(outputStream);
                }

                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    unread = new True();
                    unread.isBareType = true;
                    unread.read(inputStream);
                }

                peer = ApiScheme.InputDialogPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "MarkDialogUnread{" +
                        "flags=" + flags +
                        ", unread=" + unread +
                        ", peer=" + peer +
                        '}';

            }
        }


        public static class GetDialogUnreadMarks extends TLMethod<TLVector<DialogPeer>> {
            public static final int ID = 0x22e24e22;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDialogUnreadMarks";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetDialogUnreadMarks{" +
                        '}';

            }
        }


        public static class ClearAllDrafts extends TLMethod<Bool> {
            public static final int ID = 0x7e58ee9c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.clearAllDrafts";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ClearAllDrafts{" +
                        '}';

            }
        }


        public static class UpdatePinnedMessage extends TLMethod<Updates> {
            public static final int ID = 0xd2aaf7ec;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.updatePinnedMessage";
            public int flags;
            public True silent = null;
            public True unpin = null;
            public True pmOneside = null;
            public ApiScheme.InputPeer peer;
            public int id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 1) : (flags & ~1);
                flags = unpin != null ? (flags | 2) : (flags & ~2);
                flags = pmOneside != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                if ((flags & 2) != 0 && unpin != null) {
                    unpin.isBareType = true;
                    unpin.write(outputStream);
                }

                if ((flags & 4) != 0 && pmOneside != null) {
                    pmOneside.isBareType = true;
                    pmOneside.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(id);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    unpin = new True();
                    unpin.isBareType = true;
                    unpin.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    pmOneside = new True();
                    pmOneside.isBareType = true;
                    pmOneside.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "UpdatePinnedMessage{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", unpin=" + unpin +
                        ", pmOneside=" + pmOneside +
                        ", peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class SendVote extends TLMethod<Updates> {
            public static final int ID = 0x10ea6184;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendVote";
            public ApiScheme.InputPeer peer;
            public int msgId;
            public TLVector<TLBytes> options;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);
                options.isBareTypeItem = true;
                options.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                options = new TLVector<TLBytes>(TLBytes.class);
                options.isBareTypeItem = true;
                options.read(inputStream);


            }

            @Override
            public String toString() {
                return "SendVote{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        ", options=" + options +
                        '}';

            }
        }


        public static class GetPollResults extends TLMethod<Updates> {
            public static final int ID = 0x73bb643b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getPollResults";
            public ApiScheme.InputPeer peer;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetPollResults{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class GetOnlines extends TLMethod<ChatOnlines> {
            public static final int ID = 0x6e2be050;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getOnlines";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetOnlines{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class EditChatAbout extends TLMethod<Bool> {
            public static final int ID = 0xdef60797;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editChatAbout";
            public ApiScheme.InputPeer peer;
            public String about;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLString(about);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                about = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditChatAbout{" +
                        "peer=" + peer +
                        ", about=" + about +
                        '}';

            }
        }


        public static class EditChatDefaultBannedRights extends TLMethod<Updates> {
            public static final int ID = 0xa5866b41;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editChatDefaultBannedRights";
            public ApiScheme.InputPeer peer;
            public ApiScheme.ChatBannedRights bannedRights;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                bannedRights.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                bannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditChatDefaultBannedRights{" +
                        "peer=" + peer +
                        ", bannedRights=" + bannedRights +
                        '}';

            }
        }


        public static class GetEmojiKeywords extends TLMethod<EmojiKeywordsDifference> {
            public static final int ID = 0x35a0e062;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getEmojiKeywords";
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetEmojiKeywords{" +
                        "langCode=" + langCode +
                        '}';

            }
        }


        public static class GetEmojiKeywordsDifference extends TLMethod<EmojiKeywordsDifference> {
            public static final int ID = 0x1508b6af;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getEmojiKeywordsDifference";
            public String langCode;
            public int fromVersion;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langCode);
                outputStream.writeInt(fromVersion);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langCode = inputStream.readTLString();
                fromVersion = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetEmojiKeywordsDifference{" +
                        "langCode=" + langCode +
                        ", fromVersion=" + fromVersion +
                        '}';

            }
        }


        public static class GetEmojiKeywordsLanguages extends TLMethod<TLVector<EmojiLanguage>> {
            public static final int ID = 0x4e9963b2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getEmojiKeywordsLanguages";
            public TLVector<TLString> langCodes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                langCodes.isBareTypeItem = true;
                langCodes.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langCodes = new TLVector<TLString>(TLString.class);
                langCodes.isBareTypeItem = true;
                langCodes.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetEmojiKeywordsLanguages{" +
                        "langCodes=" + langCodes +
                        '}';

            }
        }


        public static class GetEmojiURL extends TLMethod<EmojiURL> {
            public static final int ID = 0xd5b10c26;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getEmojiURL";
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetEmojiURL{" +
                        "langCode=" + langCode +
                        '}';

            }
        }


        public static class GetSearchCounters extends TLMethod<TLVector<NsMessages.SearchCounter>> {
            public static final int ID = 0x732eef00;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSearchCounters";
            public ApiScheme.InputPeer peer;
            public TLVector<ApiScheme.MessagesFilter> filters;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                filters.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                filters = new TLVector<ApiScheme.MessagesFilter>(ApiScheme.MessagesFilter.class);
                filters.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetSearchCounters{" +
                        "peer=" + peer +
                        ", filters=" + filters +
                        '}';

            }
        }


        public static class RequestUrlAuth extends TLMethod<UrlAuthResult> {
            public static final int ID = 0x198fb446;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.requestUrlAuth";
            public int flags;
            public ApiScheme.InputPeer peer = null;
            public Integer msgId = null;
            public Integer buttonId = null;
            public String url = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = peer != null ? (flags | 2) : (flags & ~2);
                flags = msgId != null ? (flags | 2) : (flags & ~2);
                flags = buttonId != null ? (flags | 2) : (flags & ~2);
                flags = url != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && peer != null) {
                    peer.write(outputStream);
                }

                if ((flags & 2) != 0 && msgId != null) {
                    outputStream.writeInt(msgId);
                }

                if ((flags & 2) != 0 && buttonId != null) {
                    outputStream.writeInt(buttonId);
                }

                if ((flags & 4) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    peer = ApiScheme.InputPeer.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    msgId = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    buttonId = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    url = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "RequestUrlAuth{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", msgId=" + msgId +
                        ", buttonId=" + buttonId +
                        ", url=" + url +
                        '}';

            }
        }


        public static class AcceptUrlAuth extends TLMethod<UrlAuthResult> {
            public static final int ID = 0xb12c7125;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.acceptUrlAuth";
            public int flags;
            public True writeAllowed = null;
            public ApiScheme.InputPeer peer = null;
            public Integer msgId = null;
            public Integer buttonId = null;
            public String url = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = writeAllowed != null ? (flags | 1) : (flags & ~1);
                flags = peer != null ? (flags | 2) : (flags & ~2);
                flags = msgId != null ? (flags | 2) : (flags & ~2);
                flags = buttonId != null ? (flags | 2) : (flags & ~2);
                flags = url != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && writeAllowed != null) {
                    writeAllowed.isBareType = true;
                    writeAllowed.write(outputStream);
                }

                if ((flags & 2) != 0 && peer != null) {
                    peer.write(outputStream);
                }

                if ((flags & 2) != 0 && msgId != null) {
                    outputStream.writeInt(msgId);
                }

                if ((flags & 2) != 0 && buttonId != null) {
                    outputStream.writeInt(buttonId);
                }

                if ((flags & 4) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    writeAllowed = new True();
                    writeAllowed.isBareType = true;
                    writeAllowed.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    peer = ApiScheme.InputPeer.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    msgId = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    buttonId = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    url = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "AcceptUrlAuth{" +
                        "flags=" + flags +
                        ", writeAllowed=" + writeAllowed +
                        ", peer=" + peer +
                        ", msgId=" + msgId +
                        ", buttonId=" + buttonId +
                        ", url=" + url +
                        '}';

            }
        }


        public static class HidePeerSettingsBar extends TLMethod<Bool> {
            public static final int ID = 0x4facb138;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.hidePeerSettingsBar";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "HidePeerSettingsBar{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class GetScheduledHistory extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0xf516760b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getScheduledHistory";
            public ApiScheme.InputPeer peer;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetScheduledHistory{" +
                        "peer=" + peer +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetScheduledMessages extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0xbdbb0464;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getScheduledMessages";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetScheduledMessages{" +
                        "peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class SendScheduledMessages extends TLMethod<Updates> {
            public static final int ID = 0xbd38850a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendScheduledMessages";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "SendScheduledMessages{" +
                        "peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class DeleteScheduledMessages extends TLMethod<Updates> {
            public static final int ID = 0x59ae2b16;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteScheduledMessages";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteScheduledMessages{" +
                        "peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class GetPollVotes extends TLMethod<NsMessages.VotesList> {
            public static final int ID = 0xb86e380e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getPollVotes";
            public int flags;
            public ApiScheme.InputPeer peer;
            public int id;
            public byte[] option = null;
            public String offset = null;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = option != null ? (flags | 1) : (flags & ~1);
                flags = offset != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                peer.write(outputStream);

                outputStream.writeInt(id);
                if ((flags & 1) != 0 && option != null) {
                    outputStream.writeTLBytes(option);
                }

                if ((flags & 2) != 0 && offset != null) {
                    outputStream.writeTLString(offset);
                }

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();
                if ((flags & 1) != 0) {
                    option = inputStream.readTLBytes();
                }

                if ((flags & 2) != 0) {
                    offset = inputStream.readTLString();
                }

                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetPollVotes{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", id=" + id +
                        ", option=" + option +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class ToggleStickerSets extends TLMethod<Bool> {
            public static final int ID = 0xb5052fea;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.toggleStickerSets";
            public int flags;
            public True uninstall = null;
            public True archive = null;
            public True unarchive = null;
            public TLVector<ApiScheme.InputStickerSet> stickersets;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = uninstall != null ? (flags | 1) : (flags & ~1);
                flags = archive != null ? (flags | 2) : (flags & ~2);
                flags = unarchive != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && uninstall != null) {
                    uninstall.isBareType = true;
                    uninstall.write(outputStream);
                }

                if ((flags & 2) != 0 && archive != null) {
                    archive.isBareType = true;
                    archive.write(outputStream);
                }

                if ((flags & 4) != 0 && unarchive != null) {
                    unarchive.isBareType = true;
                    unarchive.write(outputStream);
                }

                stickersets.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    uninstall = new True();
                    uninstall.isBareType = true;
                    uninstall.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    archive = new True();
                    archive.isBareType = true;
                    archive.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    unarchive = new True();
                    unarchive.isBareType = true;
                    unarchive.read(inputStream);
                }

                stickersets = new TLVector<ApiScheme.InputStickerSet>(ApiScheme.InputStickerSet.class);
                stickersets.read(inputStream);


            }

            @Override
            public String toString() {
                return "ToggleStickerSets{" +
                        "flags=" + flags +
                        ", uninstall=" + uninstall +
                        ", archive=" + archive +
                        ", unarchive=" + unarchive +
                        ", stickersets=" + stickersets +
                        '}';

            }
        }


        public static class GetDialogFilters extends TLMethod<TLVector<DialogFilter>> {
            public static final int ID = 0xf19ed96d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDialogFilters";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetDialogFilters{" +
                        '}';

            }
        }


        public static class GetSuggestedDialogFilters extends TLMethod<TLVector<DialogFilterSuggested>> {
            public static final int ID = 0xa29cd42c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSuggestedDialogFilters";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSuggestedDialogFilters{" +
                        '}';

            }
        }


        public static class UpdateDialogFilter extends TLMethod<Bool> {
            public static final int ID = 0x1ad4a04a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.updateDialogFilter";
            public int flags;
            public int id;
            public ApiScheme.DialogFilter filter = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = filter != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeInt(id);
                if ((flags & 1) != 0 && filter != null) {
                    filter.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                id = inputStream.readInt();
                if ((flags & 1) != 0) {
                    filter = ApiScheme.DialogFilter.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "UpdateDialogFilter{" +
                        "flags=" + flags +
                        ", id=" + id +
                        ", filter=" + filter +
                        '}';

            }
        }


        public static class UpdateDialogFiltersOrder extends TLMethod<Bool> {
            public static final int ID = 0xc563c1e4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.updateDialogFiltersOrder";
            public TLVector<TLInt> order;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                order.isBareTypeItem = true;
                order.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                order = new TLVector<TLInt>(TLInt.class);
                order.isBareTypeItem = true;
                order.read(inputStream);


            }

            @Override
            public String toString() {
                return "UpdateDialogFiltersOrder{" +
                        "order=" + order +
                        '}';

            }
        }


        public static class GetOldFeaturedStickers extends TLMethod<NsMessages.FeaturedStickers> {
            public static final int ID = 0x7ed094a1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getOldFeaturedStickers";
            public int offset;
            public int limit;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(offset);
                outputStream.writeInt(limit);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                offset = inputStream.readInt();
                limit = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetOldFeaturedStickers{" +
                        "offset=" + offset +
                        ", limit=" + limit +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetReplies extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x22ddd30c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getReplies";
            public ApiScheme.InputPeer peer;
            public int msgId;
            public int offsetId;
            public int offsetDate;
            public int addOffset;
            public int limit;
            public int maxId;
            public int minId;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);
                outputStream.writeInt(offsetId);
                outputStream.writeInt(offsetDate);
                outputStream.writeInt(addOffset);
                outputStream.writeInt(limit);
                outputStream.writeInt(maxId);
                outputStream.writeInt(minId);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                offsetId = inputStream.readInt();
                offsetDate = inputStream.readInt();
                addOffset = inputStream.readInt();
                limit = inputStream.readInt();
                maxId = inputStream.readInt();
                minId = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetReplies{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        ", offsetId=" + offsetId +
                        ", offsetDate=" + offsetDate +
                        ", addOffset=" + addOffset +
                        ", limit=" + limit +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetDiscussionMessage extends TLMethod<NsMessages.DiscussionMessage> {
            public static final int ID = 0x446972fd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getDiscussionMessage";
            public ApiScheme.InputPeer peer;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetDiscussionMessage{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class ReadDiscussion extends TLMethod<Bool> {
            public static final int ID = 0xf731a9f4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readDiscussion";
            public ApiScheme.InputPeer peer;
            public int msgId;
            public int readMaxId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);
                outputStream.writeInt(readMaxId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                readMaxId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReadDiscussion{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        ", readMaxId=" + readMaxId +
                        '}';

            }
        }


        public static class UnpinAllMessages extends TLMethod<NsMessages.AffectedHistory> {
            public static final int ID = 0xf025bc8b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.unpinAllMessages";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UnpinAllMessages{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class DeleteChat extends TLMethod<Bool> {
            public static final int ID = 0x5bd0ee50;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteChat";
            public long chatId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(chatId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                chatId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "DeleteChat{" +
                        "chatId=" + chatId +
                        '}';

            }
        }


        public static class DeletePhoneCallHistory extends TLMethod<NsMessages.AffectedFoundMessages> {
            public static final int ID = 0xf9cbe409;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deletePhoneCallHistory";
            public int flags;
            public True revoke = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = revoke != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && revoke != null) {
                    revoke.isBareType = true;
                    revoke.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    revoke = new True();
                    revoke.isBareType = true;
                    revoke.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "DeletePhoneCallHistory{" +
                        "flags=" + flags +
                        ", revoke=" + revoke +
                        '}';

            }
        }


        public static class CheckHistoryImport extends TLMethod<NsMessages.HistoryImportParsed> {
            public static final int ID = 0x43fe19f3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.checkHistoryImport";
            public String importHead;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(importHead);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                importHead = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckHistoryImport{" +
                        "importHead=" + importHead +
                        '}';

            }
        }


        public static class InitHistoryImport extends TLMethod<NsMessages.HistoryImport> {
            public static final int ID = 0x34090c3b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.initHistoryImport";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputFile file;
            public int mediaCount;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                file.write(outputStream);

                outputStream.writeInt(mediaCount);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                file = ApiScheme.InputFile.readObject(inputStream);
                mediaCount = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "InitHistoryImport{" +
                        "peer=" + peer +
                        ", file=" + file +
                        ", mediaCount=" + mediaCount +
                        '}';

            }
        }


        public static class UploadImportedMedia extends TLMethod<MessageMedia> {
            public static final int ID = 0x2a862092;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.uploadImportedMedia";
            public ApiScheme.InputPeer peer;
            public long importId;
            public String fileName;
            public ApiScheme.InputMedia media;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeLong(importId);
                outputStream.writeTLString(fileName);
                media.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                importId = inputStream.readLong();
                fileName = inputStream.readTLString();
                media = ApiScheme.InputMedia.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UploadImportedMedia{" +
                        "peer=" + peer +
                        ", importId=" + importId +
                        ", fileName=" + fileName +
                        ", media=" + media +
                        '}';

            }
        }


        public static class StartHistoryImport extends TLMethod<Bool> {
            public static final int ID = 0xb43df344;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.startHistoryImport";
            public ApiScheme.InputPeer peer;
            public long importId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeLong(importId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                importId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "StartHistoryImport{" +
                        "peer=" + peer +
                        ", importId=" + importId +
                        '}';

            }
        }


        public static class GetExportedChatInvites extends TLMethod<NsMessages.ExportedChatInvites> {
            public static final int ID = 0xa2b5a3f6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getExportedChatInvites";
            public int flags;
            public True revoked = null;
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputUser adminId;
            public Integer offsetDate = null;
            public String offsetLink = null;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = revoked != null ? (flags | 8) : (flags & ~8);
                flags = offsetDate != null ? (flags | 4) : (flags & ~4);
                flags = offsetLink != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 8) != 0 && revoked != null) {
                    revoked.isBareType = true;
                    revoked.write(outputStream);
                }

                peer.write(outputStream);

                adminId.write(outputStream);

                if ((flags & 4) != 0 && offsetDate != null) {
                    outputStream.writeInt(offsetDate);
                }

                if ((flags & 4) != 0 && offsetLink != null) {
                    outputStream.writeTLString(offsetLink);
                }

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 8) != 0) {
                    revoked = new True();
                    revoked.isBareType = true;
                    revoked.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                adminId = ApiScheme.InputUser.readObject(inputStream);
                if ((flags & 4) != 0) {
                    offsetDate = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    offsetLink = inputStream.readTLString();
                }

                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetExportedChatInvites{" +
                        "flags=" + flags +
                        ", revoked=" + revoked +
                        ", peer=" + peer +
                        ", adminId=" + adminId +
                        ", offsetDate=" + offsetDate +
                        ", offsetLink=" + offsetLink +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetExportedChatInvite extends TLMethod<NsMessages.ExportedChatInvite> {
            public static final int ID = 0x73746f5c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getExportedChatInvite";
            public ApiScheme.InputPeer peer;
            public String link;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLString(link);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                link = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetExportedChatInvite{" +
                        "peer=" + peer +
                        ", link=" + link +
                        '}';

            }
        }


        public static class EditExportedChatInvite extends TLMethod<NsMessages.ExportedChatInvite> {
            public static final int ID = 0xbdca2f75;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.editExportedChatInvite";
            public int flags;
            public True revoked = null;
            public ApiScheme.InputPeer peer;
            public String link;
            public Integer expireDate = null;
            public Integer usageLimit = null;
            public ApiScheme.Bool requestNeeded = null;
            public String title = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = revoked != null ? (flags | 4) : (flags & ~4);
                flags = expireDate != null ? (flags | 1) : (flags & ~1);
                flags = usageLimit != null ? (flags | 2) : (flags & ~2);
                flags = requestNeeded != null ? (flags | 8) : (flags & ~8);
                flags = title != null ? (flags | 16) : (flags & ~16);
                outputStream.writeInt(flags);
                if ((flags & 4) != 0 && revoked != null) {
                    revoked.isBareType = true;
                    revoked.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeTLString(link);
                if ((flags & 1) != 0 && expireDate != null) {
                    outputStream.writeInt(expireDate);
                }

                if ((flags & 2) != 0 && usageLimit != null) {
                    outputStream.writeInt(usageLimit);
                }

                if ((flags & 8) != 0 && requestNeeded != null) {
                    requestNeeded.write(outputStream);
                }

                if ((flags & 16) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 4) != 0) {
                    revoked = new True();
                    revoked.isBareType = true;
                    revoked.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                link = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    expireDate = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    usageLimit = inputStream.readInt();
                }

                if ((flags & 8) != 0) {
                    requestNeeded = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 16) != 0) {
                    title = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "EditExportedChatInvite{" +
                        "flags=" + flags +
                        ", revoked=" + revoked +
                        ", peer=" + peer +
                        ", link=" + link +
                        ", expireDate=" + expireDate +
                        ", usageLimit=" + usageLimit +
                        ", requestNeeded=" + requestNeeded +
                        ", title=" + title +
                        '}';

            }
        }


        public static class DeleteRevokedExportedChatInvites extends TLMethod<Bool> {
            public static final int ID = 0x56987bd5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteRevokedExportedChatInvites";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputUser adminId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                adminId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                adminId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DeleteRevokedExportedChatInvites{" +
                        "peer=" + peer +
                        ", adminId=" + adminId +
                        '}';

            }
        }


        public static class DeleteExportedChatInvite extends TLMethod<Bool> {
            public static final int ID = 0xd464a42b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.deleteExportedChatInvite";
            public ApiScheme.InputPeer peer;
            public String link;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLString(link);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                link = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "DeleteExportedChatInvite{" +
                        "peer=" + peer +
                        ", link=" + link +
                        '}';

            }
        }


        public static class GetAdminsWithInvites extends TLMethod<NsMessages.ChatAdminsWithInvites> {
            public static final int ID = 0x3920e6ef;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAdminsWithInvites";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetAdminsWithInvites{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class GetChatInviteImporters extends TLMethod<NsMessages.ChatInviteImporters> {
            public static final int ID = 0xdf04dd4e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getChatInviteImporters";
            public int flags;
            public True requested = null;
            public ApiScheme.InputPeer peer;
            public String link = null;
            public String q = null;
            public int offsetDate;
            public ApiScheme.InputUser offsetUser;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = requested != null ? (flags | 1) : (flags & ~1);
                flags = link != null ? (flags | 2) : (flags & ~2);
                flags = q != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && requested != null) {
                    requested.isBareType = true;
                    requested.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 2) != 0 && link != null) {
                    outputStream.writeTLString(link);
                }

                if ((flags & 4) != 0 && q != null) {
                    outputStream.writeTLString(q);
                }

                outputStream.writeInt(offsetDate);
                offsetUser.write(outputStream);

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    requested = new True();
                    requested.isBareType = true;
                    requested.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 2) != 0) {
                    link = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    q = inputStream.readTLString();
                }

                offsetDate = inputStream.readInt();
                offsetUser = ApiScheme.InputUser.readObject(inputStream);
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetChatInviteImporters{" +
                        "flags=" + flags +
                        ", requested=" + requested +
                        ", peer=" + peer +
                        ", link=" + link +
                        ", q=" + q +
                        ", offsetDate=" + offsetDate +
                        ", offsetUser=" + offsetUser +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class SetHistoryTTL extends TLMethod<Updates> {
            public static final int ID = 0xb80e5fe4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setHistoryTTL";
            public ApiScheme.InputPeer peer;
            public int period;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(period);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                period = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SetHistoryTTL{" +
                        "peer=" + peer +
                        ", period=" + period +
                        '}';

            }
        }


        public static class CheckHistoryImportPeer extends TLMethod<NsMessages.CheckedHistoryImportPeer> {
            public static final int ID = 0x5dc60f03;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.checkHistoryImportPeer";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "CheckHistoryImportPeer{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class SetChatTheme extends TLMethod<Updates> {
            public static final int ID = 0xe63be13f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setChatTheme";
            public ApiScheme.InputPeer peer;
            public String emoticon;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLString(emoticon);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                emoticon = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SetChatTheme{" +
                        "peer=" + peer +
                        ", emoticon=" + emoticon +
                        '}';

            }
        }


        public static class GetMessageReadParticipants extends TLMethod<TLVector<TLLong>> {
            public static final int ID = 0x2c6f97b7;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessageReadParticipants";
            public ApiScheme.InputPeer peer;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetMessageReadParticipants{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class GetSearchResultsCalendar extends TLMethod<NsMessages.SearchResultsCalendar> {
            public static final int ID = 0x49f0bde9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSearchResultsCalendar";
            public ApiScheme.InputPeer peer;
            public ApiScheme.MessagesFilter filter;
            public int offsetId;
            public int offsetDate;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                filter.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(offsetDate);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                offsetId = inputStream.readInt();
                offsetDate = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetSearchResultsCalendar{" +
                        "peer=" + peer +
                        ", filter=" + filter +
                        ", offsetId=" + offsetId +
                        ", offsetDate=" + offsetDate +
                        '}';

            }
        }


        public static class GetSearchResultsPositions extends TLMethod<NsMessages.SearchResultsPositions> {
            public static final int ID = 0x6e9583a3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getSearchResultsPositions";
            public ApiScheme.InputPeer peer;
            public ApiScheme.MessagesFilter filter;
            public int offsetId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                filter.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                offsetId = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetSearchResultsPositions{" +
                        "peer=" + peer +
                        ", filter=" + filter +
                        ", offsetId=" + offsetId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class HideChatJoinRequest extends TLMethod<Updates> {
            public static final int ID = 0x7fe7e815;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.hideChatJoinRequest";
            public int flags;
            public True approved = null;
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = approved != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && approved != null) {
                    approved.isBareType = true;
                    approved.write(outputStream);
                }

                peer.write(outputStream);

                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    approved = new True();
                    approved.isBareType = true;
                    approved.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "HideChatJoinRequest{" +
                        "flags=" + flags +
                        ", approved=" + approved +
                        ", peer=" + peer +
                        ", userId=" + userId +
                        '}';

            }
        }


        public static class HideAllChatJoinRequests extends TLMethod<Updates> {
            public static final int ID = 0xe085f4ea;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.hideAllChatJoinRequests";
            public int flags;
            public True approved = null;
            public ApiScheme.InputPeer peer;
            public String link = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = approved != null ? (flags | 1) : (flags & ~1);
                flags = link != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && approved != null) {
                    approved.isBareType = true;
                    approved.write(outputStream);
                }

                peer.write(outputStream);

                if ((flags & 2) != 0 && link != null) {
                    outputStream.writeTLString(link);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    approved = new True();
                    approved.isBareType = true;
                    approved.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 2) != 0) {
                    link = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "HideAllChatJoinRequests{" +
                        "flags=" + flags +
                        ", approved=" + approved +
                        ", peer=" + peer +
                        ", link=" + link +
                        '}';

            }
        }


        public static class ToggleNoForwards extends TLMethod<Updates> {
            public static final int ID = 0xb11eafa2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.toggleNoForwards";
            public ApiScheme.InputPeer peer;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleNoForwards{" +
                        "peer=" + peer +
                        ", enabled=" + enabled +
                        '}';

            }
        }


        public static class SaveDefaultSendAs extends TLMethod<Bool> {
            public static final int ID = 0xccfddf96;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.saveDefaultSendAs";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputPeer sendAs;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                sendAs.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                sendAs = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveDefaultSendAs{" +
                        "peer=" + peer +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class SendReaction extends TLMethod<Updates> {
            public static final int ID = 0x25690ce4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendReaction";
            public int flags;
            public True big = null;
            public ApiScheme.InputPeer peer;
            public int msgId;
            public String reaction = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = big != null ? (flags | 2) : (flags & ~2);
                flags = reaction != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && big != null) {
                    big.isBareType = true;
                    big.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(msgId);
                if ((flags & 1) != 0 && reaction != null) {
                    outputStream.writeTLString(reaction);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    big = new True();
                    big.isBareType = true;
                    big.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                if ((flags & 1) != 0) {
                    reaction = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "SendReaction{" +
                        "flags=" + flags +
                        ", big=" + big +
                        ", peer=" + peer +
                        ", msgId=" + msgId +
                        ", reaction=" + reaction +
                        '}';

            }
        }


        public static class GetMessagesReactions extends TLMethod<Updates> {
            public static final int ID = 0x8bba90e6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessagesReactions";
            public ApiScheme.InputPeer peer;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetMessagesReactions{" +
                        "peer=" + peer +
                        ", id=" + id +
                        '}';

            }
        }


        public static class GetMessageReactionsList extends TLMethod<NsMessages.MessageReactionsList> {
            public static final int ID = 0xe0ee6b77;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getMessageReactionsList";
            public int flags;
            public ApiScheme.InputPeer peer;
            public int id;
            public String reaction = null;
            public String offset = null;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = reaction != null ? (flags | 1) : (flags & ~1);
                flags = offset != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                peer.write(outputStream);

                outputStream.writeInt(id);
                if ((flags & 1) != 0 && reaction != null) {
                    outputStream.writeTLString(reaction);
                }

                if ((flags & 2) != 0 && offset != null) {
                    outputStream.writeTLString(offset);
                }

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                peer = ApiScheme.InputPeer.readObject(inputStream);
                id = inputStream.readInt();
                if ((flags & 1) != 0) {
                    reaction = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    offset = inputStream.readTLString();
                }

                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetMessageReactionsList{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", id=" + id +
                        ", reaction=" + reaction +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class SetChatAvailableReactions extends TLMethod<Updates> {
            public static final int ID = 0x14050ea6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setChatAvailableReactions";
            public ApiScheme.InputPeer peer;
            public TLVector<TLString> availableReactions;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                availableReactions.isBareTypeItem = true;
                availableReactions.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                availableReactions = new TLVector<TLString>(TLString.class);
                availableReactions.isBareTypeItem = true;
                availableReactions.read(inputStream);


            }

            @Override
            public String toString() {
                return "SetChatAvailableReactions{" +
                        "peer=" + peer +
                        ", availableReactions=" + availableReactions +
                        '}';

            }
        }


        public static class GetAvailableReactions extends TLMethod<NsMessages.AvailableReactions> {
            public static final int ID = 0x18dea0ac;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAvailableReactions";
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetAvailableReactions{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class SetDefaultReaction extends TLMethod<Bool> {
            public static final int ID = 0xd960c4d4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.setDefaultReaction";
            public String reaction;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(reaction);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                reaction = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SetDefaultReaction{" +
                        "reaction=" + reaction +
                        '}';

            }
        }


        public static class TranslateText extends TLMethod<NsMessages.TranslatedText> {
            public static final int ID = 0x24ce6dee;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.translateText";
            public int flags;
            public ApiScheme.InputPeer peer = null;
            public Integer msgId = null;
            public String text = null;
            public String fromLang = null;
            public String toLang;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = peer != null ? (flags | 1) : (flags & ~1);
                flags = msgId != null ? (flags | 1) : (flags & ~1);
                flags = text != null ? (flags | 2) : (flags & ~2);
                flags = fromLang != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && peer != null) {
                    peer.write(outputStream);
                }

                if ((flags & 1) != 0 && msgId != null) {
                    outputStream.writeInt(msgId);
                }

                if ((flags & 2) != 0 && text != null) {
                    outputStream.writeTLString(text);
                }

                if ((flags & 4) != 0 && fromLang != null) {
                    outputStream.writeTLString(fromLang);
                }

                outputStream.writeTLString(toLang);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    peer = ApiScheme.InputPeer.readObject(inputStream);
                }

                if ((flags & 1) != 0) {
                    msgId = inputStream.readInt();
                }

                if ((flags & 2) != 0) {
                    text = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    fromLang = inputStream.readTLString();
                }

                toLang = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "TranslateText{" +
                        "flags=" + flags +
                        ", peer=" + peer +
                        ", msgId=" + msgId +
                        ", text=" + text +
                        ", fromLang=" + fromLang +
                        ", toLang=" + toLang +
                        '}';

            }
        }


        public static class GetUnreadReactions extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0xe85bae1a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getUnreadReactions";
            public ApiScheme.InputPeer peer;
            public int offsetId;
            public int addOffset;
            public int limit;
            public int maxId;
            public int minId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(addOffset);
                outputStream.writeInt(limit);
                outputStream.writeInt(maxId);
                outputStream.writeInt(minId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                offsetId = inputStream.readInt();
                addOffset = inputStream.readInt();
                limit = inputStream.readInt();
                maxId = inputStream.readInt();
                minId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetUnreadReactions{" +
                        "peer=" + peer +
                        ", offsetId=" + offsetId +
                        ", addOffset=" + addOffset +
                        ", limit=" + limit +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        '}';

            }
        }


        public static class ReadReactions extends TLMethod<NsMessages.AffectedHistory> {
            public static final int ID = 0x82e251d7;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.readReactions";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ReadReactions{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class SearchSentMedia extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x107e31a0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.searchSentMedia";
            public String q;
            public ApiScheme.MessagesFilter filter;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(q);
                filter.write(outputStream);

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                q = inputStream.readTLString();
                filter = ApiScheme.MessagesFilter.readObject(inputStream);
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SearchSentMedia{" +
                        "q=" + q +
                        ", filter=" + filter +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetAttachMenuBots extends TLMethod<AttachMenuBots> {
            public static final int ID = 0x16fcc2cb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAttachMenuBots";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetAttachMenuBots{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetAttachMenuBot extends TLMethod<AttachMenuBotsBot> {
            public static final int ID = 0x77216192;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getAttachMenuBot";
            public ApiScheme.InputUser bot;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                bot.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                bot = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetAttachMenuBot{" +
                        "bot=" + bot +
                        '}';

            }
        }


        public static class ToggleBotInAttachMenu extends TLMethod<Bool> {
            public static final int ID = 0x1aee33af;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.toggleBotInAttachMenu";
            public ApiScheme.InputUser bot;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                bot.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                bot = ApiScheme.InputUser.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleBotInAttachMenu{" +
                        "bot=" + bot +
                        ", enabled=" + enabled +
                        '}';

            }
        }


        public static class RequestWebView extends TLMethod<WebViewResult> {
            public static final int ID = 0x91b15831;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.requestWebView";
            public int flags;
            public True fromBotMenu = null;
            public True silent = null;
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputUser bot;
            public String url = null;
            public String startParam = null;
            public ApiScheme.DataJSON themeParams = null;
            public Integer replyToMsgId = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = fromBotMenu != null ? (flags | 16) : (flags & ~16);
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = url != null ? (flags | 2) : (flags & ~2);
                flags = startParam != null ? (flags | 8) : (flags & ~8);
                flags = themeParams != null ? (flags | 4) : (flags & ~4);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 16) != 0 && fromBotMenu != null) {
                    fromBotMenu.isBareType = true;
                    fromBotMenu.write(outputStream);
                }

                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                peer.write(outputStream);

                bot.write(outputStream);

                if ((flags & 2) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }

                if ((flags & 8) != 0 && startParam != null) {
                    outputStream.writeTLString(startParam);
                }

                if ((flags & 4) != 0 && themeParams != null) {
                    themeParams.write(outputStream);
                }

                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 16) != 0) {
                    fromBotMenu = new True();
                    fromBotMenu.isBareType = true;
                    fromBotMenu.read(inputStream);
                }

                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                bot = ApiScheme.InputUser.readObject(inputStream);
                if ((flags & 2) != 0) {
                    url = inputStream.readTLString();
                }

                if ((flags & 8) != 0) {
                    startParam = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    themeParams = ApiScheme.DataJSON.readObject(inputStream);
                }

                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "RequestWebView{" +
                        "flags=" + flags +
                        ", fromBotMenu=" + fromBotMenu +
                        ", silent=" + silent +
                        ", peer=" + peer +
                        ", bot=" + bot +
                        ", url=" + url +
                        ", startParam=" + startParam +
                        ", themeParams=" + themeParams +
                        ", replyToMsgId=" + replyToMsgId +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class ProlongWebView extends TLMethod<Bool> {
            public static final int ID = 0xea5fbcce;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.prolongWebView";
            public int flags;
            public True silent = null;
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputUser bot;
            public long queryId;
            public Integer replyToMsgId = null;
            public ApiScheme.InputPeer sendAs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = silent != null ? (flags | 32) : (flags & ~32);
                flags = replyToMsgId != null ? (flags | 1) : (flags & ~1);
                flags = sendAs != null ? (flags | 8192) : (flags & ~8192);
                outputStream.writeInt(flags);
                if ((flags & 32) != 0 && silent != null) {
                    silent.isBareType = true;
                    silent.write(outputStream);
                }

                peer.write(outputStream);

                bot.write(outputStream);

                outputStream.writeLong(queryId);
                if ((flags & 1) != 0 && replyToMsgId != null) {
                    outputStream.writeInt(replyToMsgId);
                }

                if ((flags & 8192) != 0 && sendAs != null) {
                    sendAs.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 32) != 0) {
                    silent = new True();
                    silent.isBareType = true;
                    silent.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                bot = ApiScheme.InputUser.readObject(inputStream);
                queryId = inputStream.readLong();
                if ((flags & 1) != 0) {
                    replyToMsgId = inputStream.readInt();
                }

                if ((flags & 8192) != 0) {
                    sendAs = ApiScheme.InputPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ProlongWebView{" +
                        "flags=" + flags +
                        ", silent=" + silent +
                        ", peer=" + peer +
                        ", bot=" + bot +
                        ", queryId=" + queryId +
                        ", replyToMsgId=" + replyToMsgId +
                        ", sendAs=" + sendAs +
                        '}';

            }
        }


        public static class RequestSimpleWebView extends TLMethod<SimpleWebViewResult> {
            public static final int ID = 0x6abb2f73;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.requestSimpleWebView";
            public int flags;
            public ApiScheme.InputUser bot;
            public String url;
            public ApiScheme.DataJSON themeParams = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = themeParams != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                bot.write(outputStream);

                outputStream.writeTLString(url);
                if ((flags & 1) != 0 && themeParams != null) {
                    themeParams.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                bot = ApiScheme.InputUser.readObject(inputStream);
                url = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    themeParams = ApiScheme.DataJSON.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "RequestSimpleWebView{" +
                        "flags=" + flags +
                        ", bot=" + bot +
                        ", url=" + url +
                        ", themeParams=" + themeParams +
                        '}';

            }
        }


        public static class SendWebViewResultMessage extends TLMethod<WebViewMessageSent> {
            public static final int ID = 0xa4314f5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendWebViewResultMessage";
            public String botQueryId;
            public ApiScheme.InputBotInlineResult result;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(botQueryId);
                result.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                botQueryId = inputStream.readTLString();
                result = ApiScheme.InputBotInlineResult.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendWebViewResultMessage{" +
                        "botQueryId=" + botQueryId +
                        ", result=" + result +
                        '}';

            }
        }


        public static class SendWebViewData extends TLMethod<Updates> {
            public static final int ID = 0xdc0242c8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.sendWebViewData";
            public ApiScheme.InputUser bot;
            public long randomId;
            public String buttonText;
            public String data;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                bot.write(outputStream);

                outputStream.writeLong(randomId);
                outputStream.writeTLString(buttonText);
                outputStream.writeTLString(data);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                bot = ApiScheme.InputUser.readObject(inputStream);
                randomId = inputStream.readLong();
                buttonText = inputStream.readTLString();
                data = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SendWebViewData{" +
                        "bot=" + bot +
                        ", randomId=" + randomId +
                        ", buttonText=" + buttonText +
                        ", data=" + data +
                        '}';

            }
        }


        public static class TranscribeAudio extends TLMethod<NsMessages.TranscribedAudio> {
            public static final int ID = 0x269e9a49;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.transcribeAudio";
            public ApiScheme.InputPeer peer;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "TranscribeAudio{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class RateTranscribedAudio extends TLMethod<Bool> {
            public static final int ID = 0x7f1d072f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.rateTranscribedAudio";
            public ApiScheme.InputPeer peer;
            public int msgId;
            public long transcriptionId;
            public ApiScheme.Bool good;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);
                outputStream.writeLong(transcriptionId);
                good.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();
                transcriptionId = inputStream.readLong();
                good = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "RateTranscribedAudio{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        ", transcriptionId=" + transcriptionId +
                        ", good=" + good +
                        '}';

            }
        }


        public static class GetCustomEmojiDocuments extends TLMethod<TLVector<Document>> {
            public static final int ID = 0xd9ab0f54;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getCustomEmojiDocuments";
            public TLVector<TLLong> documentId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                documentId.isBareTypeItem = true;
                documentId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                documentId = new TLVector<TLLong>(TLLong.class);
                documentId.isBareTypeItem = true;
                documentId.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetCustomEmojiDocuments{" +
                        "documentId=" + documentId +
                        '}';

            }
        }


        public static class GetEmojiStickers extends TLMethod<NsMessages.AllStickers> {
            public static final int ID = 0xfbfca18f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getEmojiStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetEmojiStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetFeaturedEmojiStickers extends TLMethod<NsMessages.FeaturedStickers> {
            public static final int ID = 0xecf6736;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "messages.getFeaturedEmojiStickers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetFeaturedEmojiStickers{" +
                        "hash=" + hash +
                        '}';

            }
        }


    }

    public static abstract class NsUpdates {
        public static abstract class State extends TLObject {
            public static State readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpdates.State a = null;
                if (id == NsUpdates.State2.ID) {
                    a = new NsUpdates.State2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Difference extends TLObject {
            public static Difference readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpdates.Difference a = null;
                if (id == NsUpdates.DifferenceEmpty.ID) {
                    a = new NsUpdates.DifferenceEmpty();
                } else if (id == NsUpdates.Difference2.ID) {
                    a = new NsUpdates.Difference2();
                } else if (id == NsUpdates.DifferenceSlice.ID) {
                    a = new NsUpdates.DifferenceSlice();
                } else if (id == NsUpdates.DifferenceTooLong.ID) {
                    a = new NsUpdates.DifferenceTooLong();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ChannelDifference extends TLObject {
            public static ChannelDifference readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpdates.ChannelDifference a = null;
                if (id == NsUpdates.ChannelDifferenceEmpty.ID) {
                    a = new NsUpdates.ChannelDifferenceEmpty();
                } else if (id == NsUpdates.ChannelDifferenceTooLong.ID) {
                    a = new NsUpdates.ChannelDifferenceTooLong();
                } else if (id == NsUpdates.ChannelDifference2.ID) {
                    a = new NsUpdates.ChannelDifference2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class State2 extends NsUpdates.State {
            public static final int ID = 0xa56c2a3e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.state";
            public int pts;
            public int qts;
            public int date;
            public int seq;
            public int unreadCount;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pts);
                outputStream.writeInt(qts);
                outputStream.writeInt(date);
                outputStream.writeInt(seq);
                outputStream.writeInt(unreadCount);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pts = inputStream.readInt();
                qts = inputStream.readInt();
                date = inputStream.readInt();
                seq = inputStream.readInt();
                unreadCount = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "State{" +
                        "pts=" + pts +
                        ", qts=" + qts +
                        ", date=" + date +
                        ", seq=" + seq +
                        ", unreadCount=" + unreadCount +
                        '}';

            }
        }


        public static class DifferenceEmpty extends NsUpdates.Difference {
            public static final int ID = 0x5d75a138;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.differenceEmpty";
            public int date;
            public int seq;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(date);
                outputStream.writeInt(seq);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                date = inputStream.readInt();
                seq = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DifferenceEmpty{" +
                        "date=" + date +
                        ", seq=" + seq +
                        '}';

            }
        }


        public static class Difference2 extends NsUpdates.Difference {
            public static final int ID = 0xf49ca0;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.difference";
            public TLVector<ApiScheme.Message> newMessages;
            public TLVector<ApiScheme.EncryptedMessage> newEncryptedMessages;
            public TLVector<ApiScheme.Update> otherUpdates;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public ApiScheme.NsUpdates.State state;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                newMessages.write(outputStream);

                newEncryptedMessages.write(outputStream);

                otherUpdates.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);

                state.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                newMessages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                newMessages.read(inputStream);

                newEncryptedMessages = new TLVector<ApiScheme.EncryptedMessage>(ApiScheme.EncryptedMessage.class);
                newEncryptedMessages.read(inputStream);

                otherUpdates = new TLVector<ApiScheme.Update>(ApiScheme.Update.class);
                otherUpdates.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                state = ApiScheme.NsUpdates.State.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "Difference{" +
                        "newMessages=" + newMessages +
                        ", newEncryptedMessages=" + newEncryptedMessages +
                        ", otherUpdates=" + otherUpdates +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", state=" + state +
                        '}';

            }
        }


        public static class DifferenceSlice extends NsUpdates.Difference {
            public static final int ID = 0xa8fb1981;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.differenceSlice";
            public TLVector<ApiScheme.Message> newMessages;
            public TLVector<ApiScheme.EncryptedMessage> newEncryptedMessages;
            public TLVector<ApiScheme.Update> otherUpdates;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public ApiScheme.NsUpdates.State intermediateState;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                newMessages.write(outputStream);

                newEncryptedMessages.write(outputStream);

                otherUpdates.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);

                intermediateState.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                newMessages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                newMessages.read(inputStream);

                newEncryptedMessages = new TLVector<ApiScheme.EncryptedMessage>(ApiScheme.EncryptedMessage.class);
                newEncryptedMessages.read(inputStream);

                otherUpdates = new TLVector<ApiScheme.Update>(ApiScheme.Update.class);
                otherUpdates.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                intermediateState = ApiScheme.NsUpdates.State.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DifferenceSlice{" +
                        "newMessages=" + newMessages +
                        ", newEncryptedMessages=" + newEncryptedMessages +
                        ", otherUpdates=" + otherUpdates +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", intermediateState=" + intermediateState +
                        '}';

            }
        }


        public static class DifferenceTooLong extends NsUpdates.Difference {
            public static final int ID = 0x4afe8f6d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.differenceTooLong";
            public int pts;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pts);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pts = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DifferenceTooLong{" +
                        "pts=" + pts +
                        '}';

            }
        }


        public static class ChannelDifferenceEmpty extends NsUpdates.ChannelDifference {
            public static final int ID = 0x3e11affb;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.channelDifferenceEmpty";
            public int flags;
            public True mFinal = null;
            public int pts;
            public Integer timeout = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = mFinal != null ? (flags | 1) : (flags & ~1);
                flags = timeout != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && mFinal != null) {
                    mFinal.isBareType = true;
                    mFinal.write(outputStream);
                }

                outputStream.writeInt(pts);
                if ((flags & 2) != 0 && timeout != null) {
                    outputStream.writeInt(timeout);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    mFinal = new True();
                    mFinal.isBareType = true;
                    mFinal.read(inputStream);
                }

                pts = inputStream.readInt();
                if ((flags & 2) != 0) {
                    timeout = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "ChannelDifferenceEmpty{" +
                        "flags=" + flags +
                        ", mFinal=" + mFinal +
                        ", pts=" + pts +
                        ", timeout=" + timeout +
                        '}';

            }
        }


        public static class ChannelDifferenceTooLong extends NsUpdates.ChannelDifference {
            public static final int ID = 0xa4bcc6fe;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.channelDifferenceTooLong";
            public int flags;
            public True mFinal = null;
            public Integer timeout = null;
            public ApiScheme.Dialog dialog;
            public TLVector<ApiScheme.Message> messages;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = mFinal != null ? (flags | 1) : (flags & ~1);
                flags = timeout != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && mFinal != null) {
                    mFinal.isBareType = true;
                    mFinal.write(outputStream);
                }

                if ((flags & 2) != 0 && timeout != null) {
                    outputStream.writeInt(timeout);
                }

                dialog.write(outputStream);

                messages.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    mFinal = new True();
                    mFinal.isBareType = true;
                    mFinal.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    timeout = inputStream.readInt();
                }

                dialog = ApiScheme.Dialog.readObject(inputStream);
                messages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                messages.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChannelDifferenceTooLong{" +
                        "flags=" + flags +
                        ", mFinal=" + mFinal +
                        ", timeout=" + timeout +
                        ", dialog=" + dialog +
                        ", messages=" + messages +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ChannelDifference2 extends NsUpdates.ChannelDifference {
            public static final int ID = 0x2064674e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "updates.channelDifference";
            public int flags;
            public True mFinal = null;
            public int pts;
            public Integer timeout = null;
            public TLVector<ApiScheme.Message> newMessages;
            public TLVector<ApiScheme.Update> otherUpdates;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = mFinal != null ? (flags | 1) : (flags & ~1);
                flags = timeout != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && mFinal != null) {
                    mFinal.isBareType = true;
                    mFinal.write(outputStream);
                }

                outputStream.writeInt(pts);
                if ((flags & 2) != 0 && timeout != null) {
                    outputStream.writeInt(timeout);
                }

                newMessages.write(outputStream);

                otherUpdates.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    mFinal = new True();
                    mFinal.isBareType = true;
                    mFinal.read(inputStream);
                }

                pts = inputStream.readInt();
                if ((flags & 2) != 0) {
                    timeout = inputStream.readInt();
                }

                newMessages = new TLVector<ApiScheme.Message>(ApiScheme.Message.class);
                newMessages.read(inputStream);

                otherUpdates = new TLVector<ApiScheme.Update>(ApiScheme.Update.class);
                otherUpdates.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChannelDifference{" +
                        "flags=" + flags +
                        ", mFinal=" + mFinal +
                        ", pts=" + pts +
                        ", timeout=" + timeout +
                        ", newMessages=" + newMessages +
                        ", otherUpdates=" + otherUpdates +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class GetState extends TLMethod<NsUpdates.State> {
            public static final int ID = 0xedd4882a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "updates.getState";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetState{" +
                        '}';

            }
        }


        public static class GetDifference extends TLMethod<NsUpdates.Difference> {
            public static final int ID = 0x25939651;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "updates.getDifference";
            public int flags;
            public int pts;
            public Integer ptsTotalLimit = null;
            public int date;
            public int qts;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = ptsTotalLimit != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeInt(pts);
                if ((flags & 1) != 0 && ptsTotalLimit != null) {
                    outputStream.writeInt(ptsTotalLimit);
                }

                outputStream.writeInt(date);
                outputStream.writeInt(qts);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                pts = inputStream.readInt();
                if ((flags & 1) != 0) {
                    ptsTotalLimit = inputStream.readInt();
                }

                date = inputStream.readInt();
                qts = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetDifference{" +
                        "flags=" + flags +
                        ", pts=" + pts +
                        ", ptsTotalLimit=" + ptsTotalLimit +
                        ", date=" + date +
                        ", qts=" + qts +
                        '}';

            }
        }


        public static class GetChannelDifference extends TLMethod<NsUpdates.ChannelDifference> {
            public static final int ID = 0x3173d78;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "updates.getChannelDifference";
            public int flags;
            public True force = null;
            public ApiScheme.InputChannel channel;
            public ApiScheme.ChannelMessagesFilter filter;
            public int pts;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = force != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && force != null) {
                    force.isBareType = true;
                    force.write(outputStream);
                }

                channel.write(outputStream);

                filter.write(outputStream);

                outputStream.writeInt(pts);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    force = new True();
                    force.isBareType = true;
                    force.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);
                filter = ApiScheme.ChannelMessagesFilter.readObject(inputStream);
                pts = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetChannelDifference{" +
                        "flags=" + flags +
                        ", force=" + force +
                        ", channel=" + channel +
                        ", filter=" + filter +
                        ", pts=" + pts +
                        ", limit=" + limit +
                        '}';

            }
        }


    }

    public static abstract class NsPhotos {
        public static abstract class Photos extends TLObject {
            public static Photos readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhotos.Photos a = null;
                if (id == NsPhotos.Photos2.ID) {
                    a = new NsPhotos.Photos2();
                } else if (id == NsPhotos.PhotosSlice.ID) {
                    a = new NsPhotos.PhotosSlice();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Photo extends TLObject {
            public static Photo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhotos.Photo a = null;
                if (id == NsPhotos.Photo2.ID) {
                    a = new NsPhotos.Photo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class Photos2 extends NsPhotos.Photos {
            public static final int ID = 0x8dca6aa5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "photos.photos";
            public TLVector<ApiScheme.Photo> photos;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                photos.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                photos = new TLVector<ApiScheme.Photo>(ApiScheme.Photo.class);
                photos.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Photos{" +
                        "photos=" + photos +
                        ", users=" + users +
                        '}';

            }
        }


        public static class PhotosSlice extends NsPhotos.Photos {
            public static final int ID = 0x15051f54;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "photos.photosSlice";
            public int count;
            public TLVector<ApiScheme.Photo> photos;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                photos.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                photos = new TLVector<ApiScheme.Photo>(ApiScheme.Photo.class);
                photos.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PhotosSlice{" +
                        "count=" + count +
                        ", photos=" + photos +
                        ", users=" + users +
                        '}';

            }
        }


        public static class Photo2 extends NsPhotos.Photo {
            public static final int ID = 0x20212ca8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "photos.photo";
            public ApiScheme.Photo photo;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                photo.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                photo = ApiScheme.Photo.readObject(inputStream);
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "Photo{" +
                        "photo=" + photo +
                        ", users=" + users +
                        '}';

            }
        }


        public static class UpdateProfilePhoto extends TLMethod<NsPhotos.Photo> {
            public static final int ID = 0x72d4742c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "photos.updateProfilePhoto";
            public ApiScheme.InputPhoto id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputPhoto.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UpdateProfilePhoto{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class UploadProfilePhoto extends TLMethod<NsPhotos.Photo> {
            public static final int ID = 0x89f30f69;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "photos.uploadProfilePhoto";
            public int flags;
            public ApiScheme.InputFile file = null;
            public ApiScheme.InputFile video = null;
            public Double videoStartTs = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = file != null ? (flags | 1) : (flags & ~1);
                flags = video != null ? (flags | 2) : (flags & ~2);
                flags = videoStartTs != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && file != null) {
                    file.write(outputStream);
                }

                if ((flags & 2) != 0 && video != null) {
                    video.write(outputStream);
                }

                if ((flags & 4) != 0 && videoStartTs != null) {
                    outputStream.writeDouble(videoStartTs);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    file = ApiScheme.InputFile.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    video = ApiScheme.InputFile.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    videoStartTs = inputStream.readDouble();
                }


            }

            @Override
            public String toString() {
                return "UploadProfilePhoto{" +
                        "flags=" + flags +
                        ", file=" + file +
                        ", video=" + video +
                        ", videoStartTs=" + videoStartTs +
                        '}';

            }
        }


        public static class DeletePhotos extends TLMethod<TLVector<TLLong>> {
            public static final int ID = 0x87cf7f2f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "photos.deletePhotos";
            public TLVector<ApiScheme.InputPhoto> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<ApiScheme.InputPhoto>(ApiScheme.InputPhoto.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeletePhotos{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetUserPhotos extends TLMethod<NsPhotos.Photos> {
            public static final int ID = 0x91cd32a8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "photos.getUserPhotos";
            public ApiScheme.InputUser userId;
            public int offset;
            public long maxId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                outputStream.writeInt(offset);
                outputStream.writeLong(maxId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                offset = inputStream.readInt();
                maxId = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetUserPhotos{" +
                        "userId=" + userId +
                        ", offset=" + offset +
                        ", maxId=" + maxId +
                        ", limit=" + limit +
                        '}';

            }
        }


    }

    public static abstract class NsUpload {
        public static abstract class File extends TLObject {
            public static File readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpload.File a = null;
                if (id == NsUpload.File2.ID) {
                    a = new NsUpload.File2();
                } else if (id == NsUpload.FileCdnRedirect.ID) {
                    a = new NsUpload.FileCdnRedirect();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class WebFile extends TLObject {
            public static WebFile readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpload.WebFile a = null;
                if (id == NsUpload.WebFile2.ID) {
                    a = new NsUpload.WebFile2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class CdnFile extends TLObject {
            public static CdnFile readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUpload.CdnFile a = null;
                if (id == NsUpload.CdnFileReuploadNeeded.ID) {
                    a = new NsUpload.CdnFileReuploadNeeded();
                } else if (id == NsUpload.CdnFile2.ID) {
                    a = new NsUpload.CdnFile2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class File2 extends NsUpload.File {
            public static final int ID = 0x96a18d5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "upload.file";
            public ApiScheme.NsStorage.FileType type;
            public int mtime;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                type.write(outputStream);

                outputStream.writeInt(mtime);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                type = ApiScheme.NsStorage.FileType.readObject(inputStream);
                mtime = inputStream.readInt();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "File{" +
                        "type=" + type +
                        ", mtime=" + mtime +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class FileCdnRedirect extends NsUpload.File {
            public static final int ID = 0xf18cda44;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "upload.fileCdnRedirect";
            public int dcId;
            public byte[] fileToken;
            public byte[] encryptionKey;
            public byte[] encryptionIv;
            public TLVector<ApiScheme.FileHash> fileHashes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(dcId);
                outputStream.writeTLBytes(fileToken);
                outputStream.writeTLBytes(encryptionKey);
                outputStream.writeTLBytes(encryptionIv);
                fileHashes.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                dcId = inputStream.readInt();
                fileToken = inputStream.readTLBytes();
                encryptionKey = inputStream.readTLBytes();
                encryptionIv = inputStream.readTLBytes();
                fileHashes = new TLVector<ApiScheme.FileHash>(ApiScheme.FileHash.class);
                fileHashes.read(inputStream);


            }

            @Override
            public String toString() {
                return "FileCdnRedirect{" +
                        "dcId=" + dcId +
                        ", fileToken=" + fileToken +
                        ", encryptionKey=" + encryptionKey +
                        ", encryptionIv=" + encryptionIv +
                        ", fileHashes=" + fileHashes +
                        '}';

            }
        }


        public static class WebFile2 extends NsUpload.WebFile {
            public static final int ID = 0x21e753bc;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "upload.webFile";
            public int size;
            public String mimeType;
            public ApiScheme.NsStorage.FileType fileType;
            public int mtime;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(size);
                outputStream.writeTLString(mimeType);
                fileType.write(outputStream);

                outputStream.writeInt(mtime);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                size = inputStream.readInt();
                mimeType = inputStream.readTLString();
                fileType = ApiScheme.NsStorage.FileType.readObject(inputStream);
                mtime = inputStream.readInt();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "WebFile{" +
                        "size=" + size +
                        ", mimeType=" + mimeType +
                        ", fileType=" + fileType +
                        ", mtime=" + mtime +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class CdnFileReuploadNeeded extends NsUpload.CdnFile {
            public static final int ID = 0xeea8e46e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "upload.cdnFileReuploadNeeded";
            public byte[] requestToken;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(requestToken);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                requestToken = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "CdnFileReuploadNeeded{" +
                        "requestToken=" + requestToken +
                        '}';

            }
        }


        public static class CdnFile2 extends NsUpload.CdnFile {
            public static final int ID = 0xa99fca4f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "upload.cdnFile";
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "CdnFile{" +
                        "bytes=" + bytes +
                        '}';

            }
        }


        public static class SaveFilePart extends TLMethod<Bool> {
            public static final int ID = 0xb304a621;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.saveFilePart";
            public long fileId;
            public int filePart;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(fileId);
                outputStream.writeInt(filePart);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fileId = inputStream.readLong();
                filePart = inputStream.readInt();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "SaveFilePart{" +
                        "fileId=" + fileId +
                        ", filePart=" + filePart +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class GetFile extends TLMethod<NsUpload.File> {
            public static final int ID = 0xbe5335be;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.getFile";
            public int flags;
            public True precise = null;
            public True cdnSupported = null;
            public ApiScheme.InputFileLocation location;
            public long offset;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = precise != null ? (flags | 1) : (flags & ~1);
                flags = cdnSupported != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && precise != null) {
                    precise.isBareType = true;
                    precise.write(outputStream);
                }

                if ((flags & 2) != 0 && cdnSupported != null) {
                    cdnSupported.isBareType = true;
                    cdnSupported.write(outputStream);
                }

                location.write(outputStream);

                outputStream.writeLong(offset);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    precise = new True();
                    precise.isBareType = true;
                    precise.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    cdnSupported = new True();
                    cdnSupported.isBareType = true;
                    cdnSupported.read(inputStream);
                }

                location = ApiScheme.InputFileLocation.readObject(inputStream);
                offset = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetFile{" +
                        "flags=" + flags +
                        ", precise=" + precise +
                        ", cdnSupported=" + cdnSupported +
                        ", location=" + location +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class SaveBigFilePart extends TLMethod<Bool> {
            public static final int ID = 0xde7b673d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.saveBigFilePart";
            public long fileId;
            public int filePart;
            public int fileTotalParts;
            public byte[] bytes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(fileId);
                outputStream.writeInt(filePart);
                outputStream.writeInt(fileTotalParts);
                outputStream.writeTLBytes(bytes);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fileId = inputStream.readLong();
                filePart = inputStream.readInt();
                fileTotalParts = inputStream.readInt();
                bytes = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "SaveBigFilePart{" +
                        "fileId=" + fileId +
                        ", filePart=" + filePart +
                        ", fileTotalParts=" + fileTotalParts +
                        ", bytes=" + bytes +
                        '}';

            }
        }


        public static class GetWebFile extends TLMethod<NsUpload.WebFile> {
            public static final int ID = 0x24e6818d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.getWebFile";
            public ApiScheme.InputWebFileLocation location;
            public int offset;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                location.write(outputStream);

                outputStream.writeInt(offset);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                location = ApiScheme.InputWebFileLocation.readObject(inputStream);
                offset = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetWebFile{" +
                        "location=" + location +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetCdnFile extends TLMethod<NsUpload.CdnFile> {
            public static final int ID = 0x395f69da;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.getCdnFile";
            public byte[] fileToken;
            public long offset;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(fileToken);
                outputStream.writeLong(offset);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fileToken = inputStream.readTLBytes();
                offset = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetCdnFile{" +
                        "fileToken=" + fileToken +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class ReuploadCdnFile extends TLMethod<TLVector<FileHash>> {
            public static final int ID = 0x9b2754a8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.reuploadCdnFile";
            public byte[] fileToken;
            public byte[] requestToken;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(fileToken);
                outputStream.writeTLBytes(requestToken);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fileToken = inputStream.readTLBytes();
                requestToken = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "ReuploadCdnFile{" +
                        "fileToken=" + fileToken +
                        ", requestToken=" + requestToken +
                        '}';

            }
        }


        public static class GetCdnFileHashes extends TLMethod<TLVector<FileHash>> {
            public static final int ID = 0x91dc3f31;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.getCdnFileHashes";
            public byte[] fileToken;
            public long offset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(fileToken);
                outputStream.writeLong(offset);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fileToken = inputStream.readTLBytes();
                offset = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetCdnFileHashes{" +
                        "fileToken=" + fileToken +
                        ", offset=" + offset +
                        '}';

            }
        }


        public static class GetFileHashes extends TLMethod<TLVector<FileHash>> {
            public static final int ID = 0x9156982a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "upload.getFileHashes";
            public ApiScheme.InputFileLocation location;
            public long offset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                location.write(outputStream);

                outputStream.writeLong(offset);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                location = ApiScheme.InputFileLocation.readObject(inputStream);
                offset = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetFileHashes{" +
                        "location=" + location +
                        ", offset=" + offset +
                        '}';

            }
        }


    }

    public static abstract class NsHelp {
        public static abstract class AppUpdate extends TLObject {
            public static AppUpdate readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.AppUpdate a = null;
                if (id == NsHelp.AppUpdate2.ID) {
                    a = new NsHelp.AppUpdate2();
                } else if (id == NsHelp.NoAppUpdate.ID) {
                    a = new NsHelp.NoAppUpdate();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class InviteText extends TLObject {
            public static InviteText readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.InviteText a = null;
                if (id == NsHelp.InviteText2.ID) {
                    a = new NsHelp.InviteText2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Support extends TLObject {
            public static Support readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.Support a = null;
                if (id == NsHelp.Support2.ID) {
                    a = new NsHelp.Support2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TermsOfService extends TLObject {
            public static TermsOfService readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.TermsOfService a = null;
                if (id == NsHelp.TermsOfService2.ID) {
                    a = new NsHelp.TermsOfService2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class RecentMeUrls extends TLObject {
            public static RecentMeUrls readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.RecentMeUrls a = null;
                if (id == NsHelp.RecentMeUrls2.ID) {
                    a = new NsHelp.RecentMeUrls2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TermsOfServiceUpdate extends TLObject {
            public static TermsOfServiceUpdate readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.TermsOfServiceUpdate a = null;
                if (id == NsHelp.TermsOfServiceUpdateEmpty.ID) {
                    a = new NsHelp.TermsOfServiceUpdateEmpty();
                } else if (id == NsHelp.TermsOfServiceUpdate2.ID) {
                    a = new NsHelp.TermsOfServiceUpdate2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class DeepLinkInfo extends TLObject {
            public static DeepLinkInfo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.DeepLinkInfo a = null;
                if (id == NsHelp.DeepLinkInfoEmpty.ID) {
                    a = new NsHelp.DeepLinkInfoEmpty();
                } else if (id == NsHelp.DeepLinkInfo2.ID) {
                    a = new NsHelp.DeepLinkInfo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PassportConfig extends TLObject {
            public static PassportConfig readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.PassportConfig a = null;
                if (id == NsHelp.PassportConfigNotModified.ID) {
                    a = new NsHelp.PassportConfigNotModified();
                } else if (id == NsHelp.PassportConfig2.ID) {
                    a = new NsHelp.PassportConfig2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SupportName extends TLObject {
            public static SupportName readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.SupportName a = null;
                if (id == NsHelp.SupportName2.ID) {
                    a = new NsHelp.SupportName2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class UserInfo extends TLObject {
            public static UserInfo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.UserInfo a = null;
                if (id == NsHelp.UserInfoEmpty.ID) {
                    a = new NsHelp.UserInfoEmpty();
                } else if (id == NsHelp.UserInfo2.ID) {
                    a = new NsHelp.UserInfo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PromoData extends TLObject {
            public static PromoData readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.PromoData a = null;
                if (id == NsHelp.PromoDataEmpty.ID) {
                    a = new NsHelp.PromoDataEmpty();
                } else if (id == NsHelp.PromoData2.ID) {
                    a = new NsHelp.PromoData2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class CountryCode extends TLObject {
            public static CountryCode readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.CountryCode a = null;
                if (id == NsHelp.CountryCode2.ID) {
                    a = new NsHelp.CountryCode2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Country extends TLObject {
            public static Country readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.Country a = null;
                if (id == NsHelp.Country2.ID) {
                    a = new NsHelp.Country2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class CountriesList extends TLObject {
            public static CountriesList readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.CountriesList a = null;
                if (id == NsHelp.CountriesListNotModified.ID) {
                    a = new NsHelp.CountriesListNotModified();
                } else if (id == NsHelp.CountriesList2.ID) {
                    a = new NsHelp.CountriesList2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PremiumPromo extends TLObject {
            public static PremiumPromo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsHelp.PremiumPromo a = null;
                if (id == NsHelp.PremiumPromo2.ID) {
                    a = new NsHelp.PremiumPromo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class AppUpdate2 extends NsHelp.AppUpdate {
            public static final int ID = 0xccbbce30;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.appUpdate";
            public int flags;
            public True canNotSkip = null;
            public int id;
            public String version;
            public String text;
            public TLVector<ApiScheme.MessageEntity> entities;
            public ApiScheme.Document document = null;
            public String url = null;
            public ApiScheme.Document sticker = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = canNotSkip != null ? (flags | 1) : (flags & ~1);
                flags = document != null ? (flags | 2) : (flags & ~2);
                flags = url != null ? (flags | 4) : (flags & ~4);
                flags = sticker != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && canNotSkip != null) {
                    canNotSkip.isBareType = true;
                    canNotSkip.write(outputStream);
                }

                outputStream.writeInt(id);
                outputStream.writeTLString(version);
                outputStream.writeTLString(text);
                entities.write(outputStream);

                if ((flags & 2) != 0 && document != null) {
                    document.write(outputStream);
                }

                if ((flags & 4) != 0 && url != null) {
                    outputStream.writeTLString(url);
                }

                if ((flags & 8) != 0 && sticker != null) {
                    sticker.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    canNotSkip = new True();
                    canNotSkip.isBareType = true;
                    canNotSkip.read(inputStream);
                }

                id = inputStream.readInt();
                version = inputStream.readTLString();
                text = inputStream.readTLString();
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);

                if ((flags & 2) != 0) {
                    document = ApiScheme.Document.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    url = inputStream.readTLString();
                }

                if ((flags & 8) != 0) {
                    sticker = ApiScheme.Document.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "AppUpdate{" +
                        "flags=" + flags +
                        ", canNotSkip=" + canNotSkip +
                        ", id=" + id +
                        ", version=" + version +
                        ", text=" + text +
                        ", entities=" + entities +
                        ", document=" + document +
                        ", url=" + url +
                        ", sticker=" + sticker +
                        '}';

            }
        }


        public static class NoAppUpdate extends NsHelp.AppUpdate {
            public static final int ID = 0xc45a6536;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.noAppUpdate";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "NoAppUpdate{" +
                        '}';

            }
        }


        public static class InviteText2 extends NsHelp.InviteText {
            public static final int ID = 0x18cb9f78;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.inviteText";
            public String message;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(message);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                message = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "InviteText{" +
                        "message=" + message +
                        '}';

            }
        }


        public static class Support2 extends NsHelp.Support {
            public static final int ID = 0x17c6b5f6;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.support";
            public String phoneNumber;
            public ApiScheme.User user;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                user.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                user = ApiScheme.User.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "Support{" +
                        "phoneNumber=" + phoneNumber +
                        ", user=" + user +
                        '}';

            }
        }


        public static class TermsOfService2 extends NsHelp.TermsOfService {
            public static final int ID = 0x780a0310;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.termsOfService";
            public int flags;
            public True popup = null;
            public ApiScheme.DataJSON id;
            public String text;
            public TLVector<ApiScheme.MessageEntity> entities;
            public Integer minAgeConfirm = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = popup != null ? (flags | 1) : (flags & ~1);
                flags = minAgeConfirm != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && popup != null) {
                    popup.isBareType = true;
                    popup.write(outputStream);
                }

                id.write(outputStream);

                outputStream.writeTLString(text);
                entities.write(outputStream);

                if ((flags & 2) != 0 && minAgeConfirm != null) {
                    outputStream.writeInt(minAgeConfirm);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    popup = new True();
                    popup.isBareType = true;
                    popup.read(inputStream);
                }

                id = ApiScheme.DataJSON.readObject(inputStream);
                text = inputStream.readTLString();
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);

                if ((flags & 2) != 0) {
                    minAgeConfirm = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "TermsOfService{" +
                        "flags=" + flags +
                        ", popup=" + popup +
                        ", id=" + id +
                        ", text=" + text +
                        ", entities=" + entities +
                        ", minAgeConfirm=" + minAgeConfirm +
                        '}';

            }
        }


        public static class RecentMeUrls2 extends NsHelp.RecentMeUrls {
            public static final int ID = 0xe0310d7;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.recentMeUrls";
            public TLVector<ApiScheme.RecentMeUrl> urls;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                urls.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                urls = new TLVector<ApiScheme.RecentMeUrl>(ApiScheme.RecentMeUrl.class);
                urls.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "RecentMeUrls{" +
                        "urls=" + urls +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class TermsOfServiceUpdateEmpty extends NsHelp.TermsOfServiceUpdate {
            public static final int ID = 0xe3309f7f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.termsOfServiceUpdateEmpty";
            public int expires;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(expires);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                expires = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "TermsOfServiceUpdateEmpty{" +
                        "expires=" + expires +
                        '}';

            }
        }


        public static class TermsOfServiceUpdate2 extends NsHelp.TermsOfServiceUpdate {
            public static final int ID = 0x28ecf961;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.termsOfServiceUpdate";
            public int expires;
            public ApiScheme.NsHelp.TermsOfService termsOfService;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(expires);
                termsOfService.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                expires = inputStream.readInt();
                termsOfService = ApiScheme.NsHelp.TermsOfService.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "TermsOfServiceUpdate{" +
                        "expires=" + expires +
                        ", termsOfService=" + termsOfService +
                        '}';

            }
        }


        public static class DeepLinkInfoEmpty extends NsHelp.DeepLinkInfo {
            public static final int ID = 0x66afa166;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.deepLinkInfoEmpty";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "DeepLinkInfoEmpty{" +
                        '}';

            }
        }


        public static class DeepLinkInfo2 extends NsHelp.DeepLinkInfo {
            public static final int ID = 0x6a4ee832;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.deepLinkInfo";
            public int flags;
            public True updateApp = null;
            public String message;
            public TLVector<ApiScheme.MessageEntity> entities = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = updateApp != null ? (flags | 1) : (flags & ~1);
                flags = entities != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && updateApp != null) {
                    updateApp.isBareType = true;
                    updateApp.write(outputStream);
                }

                outputStream.writeTLString(message);
                if ((flags & 2) != 0 && entities != null) {
                    entities.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    updateApp = new True();
                    updateApp.isBareType = true;
                    updateApp.read(inputStream);
                }

                message = inputStream.readTLString();
                if ((flags & 2) != 0) {
                    entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                    entities.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "DeepLinkInfo{" +
                        "flags=" + flags +
                        ", updateApp=" + updateApp +
                        ", message=" + message +
                        ", entities=" + entities +
                        '}';

            }
        }


        public static class PassportConfigNotModified extends NsHelp.PassportConfig {
            public static final int ID = 0xbfb9f457;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.passportConfigNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "PassportConfigNotModified{" +
                        '}';

            }
        }


        public static class PassportConfig2 extends NsHelp.PassportConfig {
            public static final int ID = 0xa098d6af;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.passportConfig";
            public int hash;
            public ApiScheme.DataJSON countriesLangs;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(hash);
                countriesLangs.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readInt();
                countriesLangs = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "PassportConfig{" +
                        "hash=" + hash +
                        ", countriesLangs=" + countriesLangs +
                        '}';

            }
        }


        public static class SupportName2 extends NsHelp.SupportName {
            public static final int ID = 0x8c05f1c9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.supportName";
            public String name;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(name);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                name = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SupportName{" +
                        "name=" + name +
                        '}';

            }
        }


        public static class UserInfoEmpty extends NsHelp.UserInfo {
            public static final int ID = 0xf3ae2eed;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.userInfoEmpty";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "UserInfoEmpty{" +
                        '}';

            }
        }


        public static class UserInfo2 extends NsHelp.UserInfo {
            public static final int ID = 0x1eb3758;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.userInfo";
            public String message;
            public TLVector<ApiScheme.MessageEntity> entities;
            public String author;
            public int date;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(message);
                entities.write(outputStream);

                outputStream.writeTLString(author);
                outputStream.writeInt(date);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                message = inputStream.readTLString();
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);

                author = inputStream.readTLString();
                date = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "UserInfo{" +
                        "message=" + message +
                        ", entities=" + entities +
                        ", author=" + author +
                        ", date=" + date +
                        '}';

            }
        }


        public static class PromoDataEmpty extends NsHelp.PromoData {
            public static final int ID = 0x98f6ac75;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.promoDataEmpty";
            public int expires;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(expires);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                expires = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "PromoDataEmpty{" +
                        "expires=" + expires +
                        '}';

            }
        }


        public static class PromoData2 extends NsHelp.PromoData {
            public static final int ID = 0x8c39793f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.promoData";
            public int flags;
            public True proxy = null;
            public int expires;
            public ApiScheme.Peer peer;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public String psaType = null;
            public String psaMessage = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = proxy != null ? (flags | 1) : (flags & ~1);
                flags = psaType != null ? (flags | 2) : (flags & ~2);
                flags = psaMessage != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && proxy != null) {
                    proxy.isBareType = true;
                    proxy.write(outputStream);
                }

                outputStream.writeInt(expires);
                peer.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);

                if ((flags & 2) != 0 && psaType != null) {
                    outputStream.writeTLString(psaType);
                }

                if ((flags & 4) != 0 && psaMessage != null) {
                    outputStream.writeTLString(psaMessage);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    proxy = new True();
                    proxy.isBareType = true;
                    proxy.read(inputStream);
                }

                expires = inputStream.readInt();
                peer = ApiScheme.Peer.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                if ((flags & 2) != 0) {
                    psaType = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    psaMessage = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "PromoData{" +
                        "flags=" + flags +
                        ", proxy=" + proxy +
                        ", expires=" + expires +
                        ", peer=" + peer +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", psaType=" + psaType +
                        ", psaMessage=" + psaMessage +
                        '}';

            }
        }


        public static class CountryCode2 extends NsHelp.CountryCode {
            public static final int ID = 0x4203c5ef;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.countryCode";
            public int flags;
            public String countryCode;
            public TLVector<TLString> prefixes = null;
            public TLVector<TLString> patterns = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = prefixes != null ? (flags | 1) : (flags & ~1);
                flags = patterns != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                outputStream.writeTLString(countryCode);
                if ((flags & 1) != 0 && prefixes != null) {
                    prefixes.isBareTypeItem = true;
                    prefixes.write(outputStream);
                }

                if ((flags & 2) != 0 && patterns != null) {
                    patterns.isBareTypeItem = true;
                    patterns.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                countryCode = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    prefixes = new TLVector<TLString>(TLString.class);
                    prefixes.isBareTypeItem = true;
                    prefixes.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    patterns = new TLVector<TLString>(TLString.class);
                    patterns.isBareTypeItem = true;
                    patterns.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "CountryCode{" +
                        "flags=" + flags +
                        ", countryCode=" + countryCode +
                        ", prefixes=" + prefixes +
                        ", patterns=" + patterns +
                        '}';

            }
        }


        public static class Country2 extends NsHelp.Country {
            public static final int ID = 0xc3878e23;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.country";
            public int flags;
            public True hidden = null;
            public String iso2;
            public String defaultName;
            public String name = null;
            public TLVector<ApiScheme.NsHelp.CountryCode> countryCodes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = hidden != null ? (flags | 1) : (flags & ~1);
                flags = name != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && hidden != null) {
                    hidden.isBareType = true;
                    hidden.write(outputStream);
                }

                outputStream.writeTLString(iso2);
                outputStream.writeTLString(defaultName);
                if ((flags & 2) != 0 && name != null) {
                    outputStream.writeTLString(name);
                }

                countryCodes.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    hidden = new True();
                    hidden.isBareType = true;
                    hidden.read(inputStream);
                }

                iso2 = inputStream.readTLString();
                defaultName = inputStream.readTLString();
                if ((flags & 2) != 0) {
                    name = inputStream.readTLString();
                }

                countryCodes = new TLVector<ApiScheme.NsHelp.CountryCode>(ApiScheme.NsHelp.CountryCode.class);
                countryCodes.read(inputStream);


            }

            @Override
            public String toString() {
                return "Country{" +
                        "flags=" + flags +
                        ", hidden=" + hidden +
                        ", iso2=" + iso2 +
                        ", defaultName=" + defaultName +
                        ", name=" + name +
                        ", countryCodes=" + countryCodes +
                        '}';

            }
        }


        public static class CountriesListNotModified extends NsHelp.CountriesList {
            public static final int ID = 0x93cc1f32;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.countriesListNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CountriesListNotModified{" +
                        '}';

            }
        }


        public static class CountriesList2 extends NsHelp.CountriesList {
            public static final int ID = 0x87d0759e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.countriesList";
            public TLVector<ApiScheme.NsHelp.Country> countries;
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                countries.write(outputStream);

                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                countries = new TLVector<ApiScheme.NsHelp.Country>(ApiScheme.NsHelp.Country.class);
                countries.read(inputStream);

                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "CountriesList{" +
                        "countries=" + countries +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class PremiumPromo2 extends NsHelp.PremiumPromo {
            public static final int ID = 0x8a4f3c29;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "help.premiumPromo";
            public String statusText;
            public TLVector<ApiScheme.MessageEntity> statusEntities;
            public TLVector<TLString> videoSections;
            public TLVector<ApiScheme.Document> videos;
            public String currency;
            public long monthlyAmount;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(statusText);
                statusEntities.write(outputStream);

                videoSections.isBareTypeItem = true;
                videoSections.write(outputStream);

                videos.write(outputStream);

                outputStream.writeTLString(currency);
                outputStream.writeLong(monthlyAmount);
                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                statusText = inputStream.readTLString();
                statusEntities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                statusEntities.read(inputStream);

                videoSections = new TLVector<TLString>(TLString.class);
                videoSections.isBareTypeItem = true;
                videoSections.read(inputStream);

                videos = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                videos.read(inputStream);

                currency = inputStream.readTLString();
                monthlyAmount = inputStream.readLong();
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PremiumPromo{" +
                        "statusText=" + statusText +
                        ", statusEntities=" + statusEntities +
                        ", videoSections=" + videoSections +
                        ", videos=" + videos +
                        ", currency=" + currency +
                        ", monthlyAmount=" + monthlyAmount +
                        ", users=" + users +
                        '}';

            }
        }


        public static class GetConfig extends TLMethod<Config> {
            public static final int ID = 0xc4f9186b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getConfig";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetConfig{" +
                        '}';

            }
        }


        public static class GetNearestDc extends TLMethod<NearestDc> {
            public static final int ID = 0x1fb33026;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getNearestDc";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetNearestDc{" +
                        '}';

            }
        }


        public static class GetAppUpdate extends TLMethod<NsHelp.AppUpdate> {
            public static final int ID = 0x522d5a7d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getAppUpdate";
            public String source;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(source);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                source = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetAppUpdate{" +
                        "source=" + source +
                        '}';

            }
        }


        public static class GetInviteText extends TLMethod<NsHelp.InviteText> {
            public static final int ID = 0x4d392343;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getInviteText";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetInviteText{" +
                        '}';

            }
        }


        public static class GetSupport extends TLMethod<NsHelp.Support> {
            public static final int ID = 0x9cdf08cd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getSupport";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSupport{" +
                        '}';

            }
        }


        public static class GetAppChangelog extends TLMethod<Updates> {
            public static final int ID = 0x9010ef6f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getAppChangelog";
            public String prevAppVersion;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(prevAppVersion);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                prevAppVersion = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetAppChangelog{" +
                        "prevAppVersion=" + prevAppVersion +
                        '}';

            }
        }


        public static class SetBotUpdatesStatus extends TLMethod<Bool> {
            public static final int ID = 0xec22cfcd;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.setBotUpdatesStatus";
            public int pendingUpdatesCount;
            public String message;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(pendingUpdatesCount);
                outputStream.writeTLString(message);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                pendingUpdatesCount = inputStream.readInt();
                message = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SetBotUpdatesStatus{" +
                        "pendingUpdatesCount=" + pendingUpdatesCount +
                        ", message=" + message +
                        '}';

            }
        }


        public static class GetCdnConfig extends TLMethod<CdnConfig> {
            public static final int ID = 0x52029342;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getCdnConfig";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetCdnConfig{" +
                        '}';

            }
        }


        public static class GetRecentMeUrls extends TLMethod<NsHelp.RecentMeUrls> {
            public static final int ID = 0x3dc0f114;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getRecentMeUrls";
            public String referer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(referer);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                referer = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetRecentMeUrls{" +
                        "referer=" + referer +
                        '}';

            }
        }


        public static class GetTermsOfServiceUpdate extends TLMethod<NsHelp.TermsOfServiceUpdate> {
            public static final int ID = 0x2ca51fd1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getTermsOfServiceUpdate";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetTermsOfServiceUpdate{" +
                        '}';

            }
        }


        public static class AcceptTermsOfService extends TLMethod<Bool> {
            public static final int ID = 0xee72f79a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.acceptTermsOfService";
            public ApiScheme.DataJSON id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AcceptTermsOfService{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetDeepLinkInfo extends TLMethod<NsHelp.DeepLinkInfo> {
            public static final int ID = 0x3fedc75f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getDeepLinkInfo";
            public String path;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(path);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                path = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetDeepLinkInfo{" +
                        "path=" + path +
                        '}';

            }
        }


        public static class GetAppConfig extends TLMethod<JSONValue> {
            public static final int ID = 0x98914110;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getAppConfig";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAppConfig{" +
                        '}';

            }
        }


        public static class SaveAppLog extends TLMethod<Bool> {
            public static final int ID = 0x6f02f748;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.saveAppLog";
            public TLVector<ApiScheme.InputAppEvent> events;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                events.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                events = new TLVector<ApiScheme.InputAppEvent>(ApiScheme.InputAppEvent.class);
                events.read(inputStream);


            }

            @Override
            public String toString() {
                return "SaveAppLog{" +
                        "events=" + events +
                        '}';

            }
        }


        public static class GetPassportConfig extends TLMethod<NsHelp.PassportConfig> {
            public static final int ID = 0xc661ad08;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getPassportConfig";
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetPassportConfig{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetSupportName extends TLMethod<NsHelp.SupportName> {
            public static final int ID = 0xd360e72c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getSupportName";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSupportName{" +
                        '}';

            }
        }


        public static class GetUserInfo extends TLMethod<NsHelp.UserInfo> {
            public static final int ID = 0x38a08d3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getUserInfo";
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetUserInfo{" +
                        "userId=" + userId +
                        '}';

            }
        }


        public static class EditUserInfo extends TLMethod<NsHelp.UserInfo> {
            public static final int ID = 0x66b91b70;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.editUserInfo";
            public ApiScheme.InputUser userId;
            public String message;
            public TLVector<ApiScheme.MessageEntity> entities;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                outputStream.writeTLString(message);
                entities.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                message = inputStream.readTLString();
                entities = new TLVector<ApiScheme.MessageEntity>(ApiScheme.MessageEntity.class);
                entities.read(inputStream);


            }

            @Override
            public String toString() {
                return "EditUserInfo{" +
                        "userId=" + userId +
                        ", message=" + message +
                        ", entities=" + entities +
                        '}';

            }
        }


        public static class GetPromoData extends TLMethod<NsHelp.PromoData> {
            public static final int ID = 0xc0977421;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getPromoData";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetPromoData{" +
                        '}';

            }
        }


        public static class HidePromoData extends TLMethod<Bool> {
            public static final int ID = 0x1e251c95;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.hidePromoData";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "HidePromoData{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class DismissSuggestion extends TLMethod<Bool> {
            public static final int ID = 0xf50dbaa1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.dismissSuggestion";
            public ApiScheme.InputPeer peer;
            public String suggestion;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLString(suggestion);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                suggestion = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "DismissSuggestion{" +
                        "peer=" + peer +
                        ", suggestion=" + suggestion +
                        '}';

            }
        }


        public static class GetCountriesList extends TLMethod<NsHelp.CountriesList> {
            public static final int ID = 0x735787a8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getCountriesList";
            public String langCode;
            public int hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langCode);
                outputStream.writeInt(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langCode = inputStream.readTLString();
                hash = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetCountriesList{" +
                        "langCode=" + langCode +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetPremiumPromo extends TLMethod<NsHelp.PremiumPromo> {
            public static final int ID = 0xb81b93d4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "help.getPremiumPromo";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetPremiumPromo{" +
                        '}';

            }
        }


    }

    public static abstract class NsAccount {
        public static abstract class PrivacyRules extends TLObject {
            public static PrivacyRules readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.PrivacyRules a = null;
                if (id == NsAccount.PrivacyRules2.ID) {
                    a = new NsAccount.PrivacyRules2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Authorizations extends TLObject {
            public static Authorizations readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.Authorizations a = null;
                if (id == NsAccount.Authorizations2.ID) {
                    a = new NsAccount.Authorizations2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Password extends TLObject {
            public static Password readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.Password a = null;
                if (id == NsAccount.Password2.ID) {
                    a = new NsAccount.Password2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PasswordSettings extends TLObject {
            public static PasswordSettings readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.PasswordSettings a = null;
                if (id == NsAccount.PasswordSettings2.ID) {
                    a = new NsAccount.PasswordSettings2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PasswordInputSettings extends TLObject {
            public static PasswordInputSettings readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.PasswordInputSettings a = null;
                if (id == NsAccount.PasswordInputSettings2.ID) {
                    a = new NsAccount.PasswordInputSettings2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class TmpPassword extends TLObject {
            public static TmpPassword readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.TmpPassword a = null;
                if (id == NsAccount.TmpPassword2.ID) {
                    a = new NsAccount.TmpPassword2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class WebAuthorizations extends TLObject {
            public static WebAuthorizations readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.WebAuthorizations a = null;
                if (id == NsAccount.WebAuthorizations2.ID) {
                    a = new NsAccount.WebAuthorizations2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AuthorizationForm extends TLObject {
            public static AuthorizationForm readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.AuthorizationForm a = null;
                if (id == NsAccount.AuthorizationForm2.ID) {
                    a = new NsAccount.AuthorizationForm2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SentEmailCode extends TLObject {
            public static SentEmailCode readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.SentEmailCode a = null;
                if (id == NsAccount.SentEmailCode2.ID) {
                    a = new NsAccount.SentEmailCode2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Takeout extends TLObject {
            public static Takeout readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.Takeout a = null;
                if (id == NsAccount.Takeout2.ID) {
                    a = new NsAccount.Takeout2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class WallPapers extends TLObject {
            public static WallPapers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.WallPapers a = null;
                if (id == NsAccount.WallPapersNotModified.ID) {
                    a = new NsAccount.WallPapersNotModified();
                } else if (id == NsAccount.WallPapers2.ID) {
                    a = new NsAccount.WallPapers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AutoDownloadSettings extends TLObject {
            public static AutoDownloadSettings readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.AutoDownloadSettings a = null;
                if (id == NsAccount.AutoDownloadSettings2.ID) {
                    a = new NsAccount.AutoDownloadSettings2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class Themes extends TLObject {
            public static Themes readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.Themes a = null;
                if (id == NsAccount.ThemesNotModified.ID) {
                    a = new NsAccount.ThemesNotModified();
                } else if (id == NsAccount.Themes2.ID) {
                    a = new NsAccount.Themes2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ContentSettings extends TLObject {
            public static ContentSettings readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.ContentSettings a = null;
                if (id == NsAccount.ContentSettings2.ID) {
                    a = new NsAccount.ContentSettings2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ResetPasswordResult extends TLObject {
            public static ResetPasswordResult readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.ResetPasswordResult a = null;
                if (id == NsAccount.ResetPasswordFailedWait.ID) {
                    a = new NsAccount.ResetPasswordFailedWait();
                } else if (id == NsAccount.ResetPasswordRequestedWait.ID) {
                    a = new NsAccount.ResetPasswordRequestedWait();
                } else if (id == NsAccount.ResetPasswordOk.ID) {
                    a = new NsAccount.ResetPasswordOk();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SavedRingtones extends TLObject {
            public static SavedRingtones readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.SavedRingtones a = null;
                if (id == NsAccount.SavedRingtonesNotModified.ID) {
                    a = new NsAccount.SavedRingtonesNotModified();
                } else if (id == NsAccount.SavedRingtones2.ID) {
                    a = new NsAccount.SavedRingtones2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SavedRingtone extends TLObject {
            public static SavedRingtone readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsAccount.SavedRingtone a = null;
                if (id == NsAccount.SavedRingtone2.ID) {
                    a = new NsAccount.SavedRingtone2();
                } else if (id == NsAccount.SavedRingtoneConverted.ID) {
                    a = new NsAccount.SavedRingtoneConverted();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class PrivacyRules2 extends NsAccount.PrivacyRules {
            public static final int ID = 0x50a04e45;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.privacyRules";
            public TLVector<ApiScheme.PrivacyRule> rules;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                rules.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                rules = new TLVector<ApiScheme.PrivacyRule>(ApiScheme.PrivacyRule.class);
                rules.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PrivacyRules{" +
                        "rules=" + rules +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class Authorizations2 extends NsAccount.Authorizations {
            public static final int ID = 0x4bff8ea0;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.authorizations";
            public int authorizationTtlDays;
            public TLVector<ApiScheme.Authorization> authorizations;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(authorizationTtlDays);
                authorizations.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                authorizationTtlDays = inputStream.readInt();
                authorizations = new TLVector<ApiScheme.Authorization>(ApiScheme.Authorization.class);
                authorizations.read(inputStream);


            }

            @Override
            public String toString() {
                return "Authorizations{" +
                        "authorizationTtlDays=" + authorizationTtlDays +
                        ", authorizations=" + authorizations +
                        '}';

            }
        }


        public static class Password2 extends NsAccount.Password {
            public static final int ID = 0x185b184f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.password";
            public int flags;
            public True hasRecovery = null;
            public True hasSecureValues = null;
            public True hasPassword = null;
            public ApiScheme.PasswordKdfAlgo currentAlgo = null;
            public byte[] srpB = null;
            public Long srpId = null;
            public String hint = null;
            public String emailUnconfirmedPattern = null;
            public ApiScheme.PasswordKdfAlgo newAlgo;
            public ApiScheme.SecurePasswordKdfAlgo newSecureAlgo;
            public byte[] secureRandom;
            public Integer pendingResetDate = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = hasRecovery != null ? (flags | 1) : (flags & ~1);
                flags = hasSecureValues != null ? (flags | 2) : (flags & ~2);
                flags = hasPassword != null ? (flags | 4) : (flags & ~4);
                flags = currentAlgo != null ? (flags | 4) : (flags & ~4);
                flags = srpB != null ? (flags | 4) : (flags & ~4);
                flags = srpId != null ? (flags | 4) : (flags & ~4);
                flags = hint != null ? (flags | 8) : (flags & ~8);
                flags = emailUnconfirmedPattern != null ? (flags | 16) : (flags & ~16);
                flags = pendingResetDate != null ? (flags | 32) : (flags & ~32);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && hasRecovery != null) {
                    hasRecovery.isBareType = true;
                    hasRecovery.write(outputStream);
                }

                if ((flags & 2) != 0 && hasSecureValues != null) {
                    hasSecureValues.isBareType = true;
                    hasSecureValues.write(outputStream);
                }

                if ((flags & 4) != 0 && hasPassword != null) {
                    hasPassword.isBareType = true;
                    hasPassword.write(outputStream);
                }

                if ((flags & 4) != 0 && currentAlgo != null) {
                    currentAlgo.write(outputStream);
                }

                if ((flags & 4) != 0 && srpB != null) {
                    outputStream.writeTLBytes(srpB);
                }

                if ((flags & 4) != 0 && srpId != null) {
                    outputStream.writeLong(srpId);
                }

                if ((flags & 8) != 0 && hint != null) {
                    outputStream.writeTLString(hint);
                }

                if ((flags & 16) != 0 && emailUnconfirmedPattern != null) {
                    outputStream.writeTLString(emailUnconfirmedPattern);
                }

                newAlgo.write(outputStream);

                newSecureAlgo.write(outputStream);

                outputStream.writeTLBytes(secureRandom);
                if ((flags & 32) != 0 && pendingResetDate != null) {
                    outputStream.writeInt(pendingResetDate);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    hasRecovery = new True();
                    hasRecovery.isBareType = true;
                    hasRecovery.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    hasSecureValues = new True();
                    hasSecureValues.isBareType = true;
                    hasSecureValues.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    hasPassword = new True();
                    hasPassword.isBareType = true;
                    hasPassword.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    currentAlgo = ApiScheme.PasswordKdfAlgo.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    srpB = inputStream.readTLBytes();
                }

                if ((flags & 4) != 0) {
                    srpId = inputStream.readLong();
                }

                if ((flags & 8) != 0) {
                    hint = inputStream.readTLString();
                }

                if ((flags & 16) != 0) {
                    emailUnconfirmedPattern = inputStream.readTLString();
                }

                newAlgo = ApiScheme.PasswordKdfAlgo.readObject(inputStream);
                newSecureAlgo = ApiScheme.SecurePasswordKdfAlgo.readObject(inputStream);
                secureRandom = inputStream.readTLBytes();
                if ((flags & 32) != 0) {
                    pendingResetDate = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "Password{" +
                        "flags=" + flags +
                        ", hasRecovery=" + hasRecovery +
                        ", hasSecureValues=" + hasSecureValues +
                        ", hasPassword=" + hasPassword +
                        ", currentAlgo=" + currentAlgo +
                        ", srpB=" + srpB +
                        ", srpId=" + srpId +
                        ", hint=" + hint +
                        ", emailUnconfirmedPattern=" + emailUnconfirmedPattern +
                        ", newAlgo=" + newAlgo +
                        ", newSecureAlgo=" + newSecureAlgo +
                        ", secureRandom=" + secureRandom +
                        ", pendingResetDate=" + pendingResetDate +
                        '}';

            }
        }


        public static class PasswordSettings2 extends NsAccount.PasswordSettings {
            public static final int ID = 0x9a5c33e5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.passwordSettings";
            public int flags;
            public String email = null;
            public ApiScheme.SecureSecretSettings secureSettings = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = email != null ? (flags | 1) : (flags & ~1);
                flags = secureSettings != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && email != null) {
                    outputStream.writeTLString(email);
                }

                if ((flags & 2) != 0 && secureSettings != null) {
                    secureSettings.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    email = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    secureSettings = ApiScheme.SecureSecretSettings.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "PasswordSettings{" +
                        "flags=" + flags +
                        ", email=" + email +
                        ", secureSettings=" + secureSettings +
                        '}';

            }
        }


        public static class PasswordInputSettings2 extends NsAccount.PasswordInputSettings {
            public static final int ID = 0xc23727c9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.passwordInputSettings";
            public int flags;
            public ApiScheme.PasswordKdfAlgo newAlgo = null;
            public byte[] newPasswordHash = null;
            public String hint = null;
            public String email = null;
            public ApiScheme.SecureSecretSettings newSecureSettings = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = newAlgo != null ? (flags | 1) : (flags & ~1);
                flags = newPasswordHash != null ? (flags | 1) : (flags & ~1);
                flags = hint != null ? (flags | 1) : (flags & ~1);
                flags = email != null ? (flags | 2) : (flags & ~2);
                flags = newSecureSettings != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && newAlgo != null) {
                    newAlgo.write(outputStream);
                }

                if ((flags & 1) != 0 && newPasswordHash != null) {
                    outputStream.writeTLBytes(newPasswordHash);
                }

                if ((flags & 1) != 0 && hint != null) {
                    outputStream.writeTLString(hint);
                }

                if ((flags & 2) != 0 && email != null) {
                    outputStream.writeTLString(email);
                }

                if ((flags & 4) != 0 && newSecureSettings != null) {
                    newSecureSettings.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    newAlgo = ApiScheme.PasswordKdfAlgo.readObject(inputStream);
                }

                if ((flags & 1) != 0) {
                    newPasswordHash = inputStream.readTLBytes();
                }

                if ((flags & 1) != 0) {
                    hint = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    email = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    newSecureSettings = ApiScheme.SecureSecretSettings.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "PasswordInputSettings{" +
                        "flags=" + flags +
                        ", newAlgo=" + newAlgo +
                        ", newPasswordHash=" + newPasswordHash +
                        ", hint=" + hint +
                        ", email=" + email +
                        ", newSecureSettings=" + newSecureSettings +
                        '}';

            }
        }


        public static class TmpPassword2 extends NsAccount.TmpPassword {
            public static final int ID = 0xdb64fd34;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.tmpPassword";
            public byte[] tmpPassword;
            public int validUntil;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(tmpPassword);
                outputStream.writeInt(validUntil);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                tmpPassword = inputStream.readTLBytes();
                validUntil = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "TmpPassword{" +
                        "tmpPassword=" + tmpPassword +
                        ", validUntil=" + validUntil +
                        '}';

            }
        }


        public static class WebAuthorizations2 extends NsAccount.WebAuthorizations {
            public static final int ID = 0xed56c9fc;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.webAuthorizations";
            public TLVector<ApiScheme.WebAuthorization> authorizations;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                authorizations.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                authorizations = new TLVector<ApiScheme.WebAuthorization>(ApiScheme.WebAuthorization.class);
                authorizations.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "WebAuthorizations{" +
                        "authorizations=" + authorizations +
                        ", users=" + users +
                        '}';

            }
        }


        public static class AuthorizationForm2 extends NsAccount.AuthorizationForm {
            public static final int ID = 0xad2e1cd8;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.authorizationForm";
            public int flags;
            public TLVector<ApiScheme.SecureRequiredType> requiredTypes;
            public TLVector<ApiScheme.SecureValue> values;
            public TLVector<ApiScheme.SecureValueError> errors;
            public TLVector<ApiScheme.User> users;
            public String privacyPolicyUrl = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = privacyPolicyUrl != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                requiredTypes.write(outputStream);

                values.write(outputStream);

                errors.write(outputStream);

                users.write(outputStream);

                if ((flags & 1) != 0 && privacyPolicyUrl != null) {
                    outputStream.writeTLString(privacyPolicyUrl);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                requiredTypes = new TLVector<ApiScheme.SecureRequiredType>(ApiScheme.SecureRequiredType.class);
                requiredTypes.read(inputStream);

                values = new TLVector<ApiScheme.SecureValue>(ApiScheme.SecureValue.class);
                values.read(inputStream);

                errors = new TLVector<ApiScheme.SecureValueError>(ApiScheme.SecureValueError.class);
                errors.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                if ((flags & 1) != 0) {
                    privacyPolicyUrl = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "AuthorizationForm{" +
                        "flags=" + flags +
                        ", requiredTypes=" + requiredTypes +
                        ", values=" + values +
                        ", errors=" + errors +
                        ", users=" + users +
                        ", privacyPolicyUrl=" + privacyPolicyUrl +
                        '}';

            }
        }


        public static class SentEmailCode2 extends NsAccount.SentEmailCode {
            public static final int ID = 0x811f854f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.sentEmailCode";
            public String emailPattern;
            public int length;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(emailPattern);
                outputStream.writeInt(length);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                emailPattern = inputStream.readTLString();
                length = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SentEmailCode{" +
                        "emailPattern=" + emailPattern +
                        ", length=" + length +
                        '}';

            }
        }


        public static class Takeout2 extends NsAccount.Takeout {
            public static final int ID = 0x4dba4501;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.takeout";
            public long id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(id);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "Takeout{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class WallPapersNotModified extends NsAccount.WallPapers {
            public static final int ID = 0x1c199183;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.wallPapersNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "WallPapersNotModified{" +
                        '}';

            }
        }


        public static class WallPapers2 extends NsAccount.WallPapers {
            public static final int ID = 0xcdc3858c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.wallPapers";
            public long hash;
            public TLVector<ApiScheme.WallPaper> wallpapers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                wallpapers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                wallpapers = new TLVector<ApiScheme.WallPaper>(ApiScheme.WallPaper.class);
                wallpapers.read(inputStream);


            }

            @Override
            public String toString() {
                return "WallPapers{" +
                        "hash=" + hash +
                        ", wallpapers=" + wallpapers +
                        '}';

            }
        }


        public static class AutoDownloadSettings2 extends NsAccount.AutoDownloadSettings {
            public static final int ID = 0x63cacf26;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.autoDownloadSettings";
            public ApiScheme.AutoDownloadSettings low;
            public ApiScheme.AutoDownloadSettings medium;
            public ApiScheme.AutoDownloadSettings high;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                low.write(outputStream);

                medium.write(outputStream);

                high.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                low = ApiScheme.AutoDownloadSettings.readObject(inputStream);
                medium = ApiScheme.AutoDownloadSettings.readObject(inputStream);
                high = ApiScheme.AutoDownloadSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AutoDownloadSettings{" +
                        "low=" + low +
                        ", medium=" + medium +
                        ", high=" + high +
                        '}';

            }
        }


        public static class ThemesNotModified extends NsAccount.Themes {
            public static final int ID = 0xf41eb622;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.themesNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ThemesNotModified{" +
                        '}';

            }
        }


        public static class Themes2 extends NsAccount.Themes {
            public static final int ID = 0x9a3d8c6d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.themes";
            public long hash;
            public TLVector<ApiScheme.Theme> themes;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                themes.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                themes = new TLVector<ApiScheme.Theme>(ApiScheme.Theme.class);
                themes.read(inputStream);


            }

            @Override
            public String toString() {
                return "Themes{" +
                        "hash=" + hash +
                        ", themes=" + themes +
                        '}';

            }
        }


        public static class ContentSettings2 extends NsAccount.ContentSettings {
            public static final int ID = 0x57e28221;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.contentSettings";
            public int flags;
            public True sensitiveEnabled = null;
            public True sensitiveCanChange = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = sensitiveEnabled != null ? (flags | 1) : (flags & ~1);
                flags = sensitiveCanChange != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && sensitiveEnabled != null) {
                    sensitiveEnabled.isBareType = true;
                    sensitiveEnabled.write(outputStream);
                }

                if ((flags & 2) != 0 && sensitiveCanChange != null) {
                    sensitiveCanChange.isBareType = true;
                    sensitiveCanChange.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    sensitiveEnabled = new True();
                    sensitiveEnabled.isBareType = true;
                    sensitiveEnabled.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    sensitiveCanChange = new True();
                    sensitiveCanChange.isBareType = true;
                    sensitiveCanChange.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ContentSettings{" +
                        "flags=" + flags +
                        ", sensitiveEnabled=" + sensitiveEnabled +
                        ", sensitiveCanChange=" + sensitiveCanChange +
                        '}';

            }
        }


        public static class ResetPasswordFailedWait extends NsAccount.ResetPasswordResult {
            public static final int ID = 0xe3779861;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.resetPasswordFailedWait";
            public int retryDate;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(retryDate);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                retryDate = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ResetPasswordFailedWait{" +
                        "retryDate=" + retryDate +
                        '}';

            }
        }


        public static class ResetPasswordRequestedWait extends NsAccount.ResetPasswordResult {
            public static final int ID = 0xe9effc7d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.resetPasswordRequestedWait";
            public int untilDate;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(untilDate);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                untilDate = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ResetPasswordRequestedWait{" +
                        "untilDate=" + untilDate +
                        '}';

            }
        }


        public static class ResetPasswordOk extends NsAccount.ResetPasswordResult {
            public static final int ID = 0xe926d63e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.resetPasswordOk";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetPasswordOk{" +
                        '}';

            }
        }


        public static class SavedRingtonesNotModified extends NsAccount.SavedRingtones {
            public static final int ID = 0xfbf6e8b1;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.savedRingtonesNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "SavedRingtonesNotModified{" +
                        '}';

            }
        }


        public static class SavedRingtones2 extends NsAccount.SavedRingtones {
            public static final int ID = 0xc1e92cc5;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.savedRingtones";
            public long hash;
            public TLVector<ApiScheme.Document> ringtones;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);
                ringtones.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();
                ringtones = new TLVector<ApiScheme.Document>(ApiScheme.Document.class);
                ringtones.read(inputStream);


            }

            @Override
            public String toString() {
                return "SavedRingtones{" +
                        "hash=" + hash +
                        ", ringtones=" + ringtones +
                        '}';

            }
        }


        public static class SavedRingtone2 extends NsAccount.SavedRingtone {
            public static final int ID = 0xb7263f6d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.savedRingtone";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "SavedRingtone{" +
                        '}';

            }
        }


        public static class SavedRingtoneConverted extends NsAccount.SavedRingtone {
            public static final int ID = 0x1f307eb7;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "account.savedRingtoneConverted";
            public ApiScheme.Document document;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                document.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                document = ApiScheme.Document.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SavedRingtoneConverted{" +
                        "document=" + document +
                        '}';

            }
        }


        public static class RegisterDevice extends TLMethod<Bool> {
            public static final int ID = 0xec86017a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.registerDevice";
            public int flags;
            public True noMuted = null;
            public int tokenType;
            public String token;
            public ApiScheme.Bool appSandbox;
            public byte[] secret;
            public TLVector<TLLong> otherUids;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = noMuted != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && noMuted != null) {
                    noMuted.isBareType = true;
                    noMuted.write(outputStream);
                }

                outputStream.writeInt(tokenType);
                outputStream.writeTLString(token);
                appSandbox.write(outputStream);

                outputStream.writeTLBytes(secret);
                otherUids.isBareTypeItem = true;
                otherUids.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    noMuted = new True();
                    noMuted.isBareType = true;
                    noMuted.read(inputStream);
                }

                tokenType = inputStream.readInt();
                token = inputStream.readTLString();
                appSandbox = ApiScheme.Bool.readObject(inputStream);
                secret = inputStream.readTLBytes();
                otherUids = new TLVector<TLLong>(TLLong.class);
                otherUids.isBareTypeItem = true;
                otherUids.read(inputStream);


            }

            @Override
            public String toString() {
                return "RegisterDevice{" +
                        "flags=" + flags +
                        ", noMuted=" + noMuted +
                        ", tokenType=" + tokenType +
                        ", token=" + token +
                        ", appSandbox=" + appSandbox +
                        ", secret=" + secret +
                        ", otherUids=" + otherUids +
                        '}';

            }
        }


        public static class UnregisterDevice extends TLMethod<Bool> {
            public static final int ID = 0x6a0d3206;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.unregisterDevice";
            public int tokenType;
            public String token;
            public TLVector<TLLong> otherUids;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(tokenType);
                outputStream.writeTLString(token);
                otherUids.isBareTypeItem = true;
                otherUids.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                tokenType = inputStream.readInt();
                token = inputStream.readTLString();
                otherUids = new TLVector<TLLong>(TLLong.class);
                otherUids.isBareTypeItem = true;
                otherUids.read(inputStream);


            }

            @Override
            public String toString() {
                return "UnregisterDevice{" +
                        "tokenType=" + tokenType +
                        ", token=" + token +
                        ", otherUids=" + otherUids +
                        '}';

            }
        }


        public static class UpdateNotifySettings extends TLMethod<Bool> {
            public static final int ID = 0x84be5b93;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateNotifySettings";
            public ApiScheme.InputNotifyPeer peer;
            public ApiScheme.InputPeerNotifySettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputNotifyPeer.readObject(inputStream);
                settings = ApiScheme.InputPeerNotifySettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UpdateNotifySettings{" +
                        "peer=" + peer +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class GetNotifySettings extends TLMethod<PeerNotifySettings> {
            public static final int ID = 0x12b3ad31;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getNotifySettings";
            public ApiScheme.InputNotifyPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputNotifyPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetNotifySettings{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class ResetNotifySettings extends TLMethod<Bool> {
            public static final int ID = 0xdb7e1747;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetNotifySettings";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetNotifySettings{" +
                        '}';

            }
        }


        public static class UpdateProfile extends TLMethod<User> {
            public static final int ID = 0x78515775;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateProfile";
            public int flags;
            public String firstName = null;
            public String lastName = null;
            public String about = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = firstName != null ? (flags | 1) : (flags & ~1);
                flags = lastName != null ? (flags | 2) : (flags & ~2);
                flags = about != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && firstName != null) {
                    outputStream.writeTLString(firstName);
                }

                if ((flags & 2) != 0 && lastName != null) {
                    outputStream.writeTLString(lastName);
                }

                if ((flags & 4) != 0 && about != null) {
                    outputStream.writeTLString(about);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    firstName = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    lastName = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    about = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "UpdateProfile{" +
                        "flags=" + flags +
                        ", firstName=" + firstName +
                        ", lastName=" + lastName +
                        ", about=" + about +
                        '}';

            }
        }


        public static class UpdateStatus extends TLMethod<Bool> {
            public static final int ID = 0x6628562c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateStatus";
            public ApiScheme.Bool offline;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                offline.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                offline = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UpdateStatus{" +
                        "offline=" + offline +
                        '}';

            }
        }


        public static class GetWallPapers extends TLMethod<NsAccount.WallPapers> {
            public static final int ID = 0x7967d36;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getWallPapers";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetWallPapers{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class ReportPeer extends TLMethod<Bool> {
            public static final int ID = 0xc5ba3d86;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.reportPeer";
            public ApiScheme.InputPeer peer;
            public ApiScheme.ReportReason reason;
            public String message;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                reason.write(outputStream);

                outputStream.writeTLString(message);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                reason = ApiScheme.ReportReason.readObject(inputStream);
                message = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ReportPeer{" +
                        "peer=" + peer +
                        ", reason=" + reason +
                        ", message=" + message +
                        '}';

            }
        }


        public static class CheckUsername extends TLMethod<Bool> {
            public static final int ID = 0x2714d86c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.checkUsername";
            public String username;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(username);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                username = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckUsername{" +
                        "username=" + username +
                        '}';

            }
        }


        public static class UpdateUsername extends TLMethod<User> {
            public static final int ID = 0x3e0bdd7c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateUsername";
            public String username;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(username);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                username = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "UpdateUsername{" +
                        "username=" + username +
                        '}';

            }
        }


        public static class GetPrivacy extends TLMethod<NsAccount.PrivacyRules> {
            public static final int ID = 0xdadbc950;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getPrivacy";
            public ApiScheme.InputPrivacyKey key;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                key.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                key = ApiScheme.InputPrivacyKey.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetPrivacy{" +
                        "key=" + key +
                        '}';

            }
        }


        public static class SetPrivacy extends TLMethod<NsAccount.PrivacyRules> {
            public static final int ID = 0xc9f81ce8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setPrivacy";
            public ApiScheme.InputPrivacyKey key;
            public TLVector<ApiScheme.InputPrivacyRule> rules;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                key.write(outputStream);

                rules.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                key = ApiScheme.InputPrivacyKey.readObject(inputStream);
                rules = new TLVector<ApiScheme.InputPrivacyRule>(ApiScheme.InputPrivacyRule.class);
                rules.read(inputStream);


            }

            @Override
            public String toString() {
                return "SetPrivacy{" +
                        "key=" + key +
                        ", rules=" + rules +
                        '}';

            }
        }


        public static class DeleteAccount extends TLMethod<Bool> {
            public static final int ID = 0xa2c0cf74;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.deleteAccount";
            public int flags;
            public String reason;
            public ApiScheme.InputCheckPasswordSRP password = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = password != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeTLString(reason);
                if ((flags & 1) != 0 && password != null) {
                    password.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                reason = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "DeleteAccount{" +
                        "flags=" + flags +
                        ", reason=" + reason +
                        ", password=" + password +
                        '}';

            }
        }


        public static class GetAccountTTL extends TLMethod<AccountDaysTTL> {
            public static final int ID = 0x8fc711d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getAccountTTL";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAccountTTL{" +
                        '}';

            }
        }


        public static class SetAccountTTL extends TLMethod<Bool> {
            public static final int ID = 0x2442485e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setAccountTTL";
            public ApiScheme.AccountDaysTTL ttl;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                ttl.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                ttl = ApiScheme.AccountDaysTTL.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetAccountTTL{" +
                        "ttl=" + ttl +
                        '}';

            }
        }


        public static class SendChangePhoneCode extends TLMethod<NsAuth.SentCode> {
            public static final int ID = 0x82574ae5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.sendChangePhoneCode";
            public String phoneNumber;
            public ApiScheme.CodeSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                settings = ApiScheme.CodeSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendChangePhoneCode{" +
                        "phoneNumber=" + phoneNumber +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class ChangePhone extends TLMethod<User> {
            public static final int ID = 0x70c32edb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.changePhone";
            public String phoneNumber;
            public String phoneCodeHash;
            public String phoneCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);
                outputStream.writeTLString(phoneCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();
                phoneCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ChangePhone{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        ", phoneCode=" + phoneCode +
                        '}';

            }
        }


        public static class UpdateDeviceLocked extends TLMethod<Bool> {
            public static final int ID = 0x38df3532;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateDeviceLocked";
            public int period;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(period);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                period = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "UpdateDeviceLocked{" +
                        "period=" + period +
                        '}';

            }
        }


        public static class GetAuthorizations extends TLMethod<NsAccount.Authorizations> {
            public static final int ID = 0xe320c158;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getAuthorizations";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAuthorizations{" +
                        '}';

            }
        }


        public static class ResetAuthorization extends TLMethod<Bool> {
            public static final int ID = 0xdf77f3bc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetAuthorization";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "ResetAuthorization{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class GetPassword extends TLMethod<NsAccount.Password> {
            public static final int ID = 0x548a30f5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getPassword";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetPassword{" +
                        '}';

            }
        }


        public static class GetPasswordSettings extends TLMethod<NsAccount.PasswordSettings> {
            public static final int ID = 0x9cd4eaf9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getPasswordSettings";
            public ApiScheme.InputCheckPasswordSRP password;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                password.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetPasswordSettings{" +
                        "password=" + password +
                        '}';

            }
        }


        public static class UpdatePasswordSettings extends TLMethod<Bool> {
            public static final int ID = 0xa59b102f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updatePasswordSettings";
            public ApiScheme.InputCheckPasswordSRP password;
            public ApiScheme.NsAccount.PasswordInputSettings newSettings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                password.write(outputStream);

                newSettings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);
                newSettings = ApiScheme.NsAccount.PasswordInputSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UpdatePasswordSettings{" +
                        "password=" + password +
                        ", newSettings=" + newSettings +
                        '}';

            }
        }


        public static class SendConfirmPhoneCode extends TLMethod<NsAuth.SentCode> {
            public static final int ID = 0x1b3faa88;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.sendConfirmPhoneCode";
            public String hash;
            public ApiScheme.CodeSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(hash);
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readTLString();
                settings = ApiScheme.CodeSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendConfirmPhoneCode{" +
                        "hash=" + hash +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class ConfirmPhone extends TLMethod<Bool> {
            public static final int ID = 0x5f2178c3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.confirmPhone";
            public String phoneCodeHash;
            public String phoneCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneCodeHash);
                outputStream.writeTLString(phoneCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneCodeHash = inputStream.readTLString();
                phoneCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ConfirmPhone{" +
                        "phoneCodeHash=" + phoneCodeHash +
                        ", phoneCode=" + phoneCode +
                        '}';

            }
        }


        public static class GetTmpPassword extends TLMethod<NsAccount.TmpPassword> {
            public static final int ID = 0x449e0b51;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getTmpPassword";
            public ApiScheme.InputCheckPasswordSRP password;
            public int period;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                password.write(outputStream);

                outputStream.writeInt(period);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);
                period = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetTmpPassword{" +
                        "password=" + password +
                        ", period=" + period +
                        '}';

            }
        }


        public static class GetWebAuthorizations extends TLMethod<NsAccount.WebAuthorizations> {
            public static final int ID = 0x182e6d6f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getWebAuthorizations";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetWebAuthorizations{" +
                        '}';

            }
        }


        public static class ResetWebAuthorization extends TLMethod<Bool> {
            public static final int ID = 0x2d01b9ef;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetWebAuthorization";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "ResetWebAuthorization{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class ResetWebAuthorizations extends TLMethod<Bool> {
            public static final int ID = 0x682d2594;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetWebAuthorizations";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetWebAuthorizations{" +
                        '}';

            }
        }


        public static class GetAllSecureValues extends TLMethod<TLVector<SecureValue>> {
            public static final int ID = 0xb288bc7d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getAllSecureValues";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAllSecureValues{" +
                        '}';

            }
        }


        public static class GetSecureValue extends TLMethod<TLVector<SecureValue>> {
            public static final int ID = 0x73665bc2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getSecureValue";
            public TLVector<ApiScheme.SecureValueType> types;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                types.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                types = new TLVector<ApiScheme.SecureValueType>(ApiScheme.SecureValueType.class);
                types.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetSecureValue{" +
                        "types=" + types +
                        '}';

            }
        }


        public static class SaveSecureValue extends TLMethod<SecureValue> {
            public static final int ID = 0x899fe31d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.saveSecureValue";
            public ApiScheme.InputSecureValue value;
            public long secureSecretId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                value.write(outputStream);

                outputStream.writeLong(secureSecretId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                value = ApiScheme.InputSecureValue.readObject(inputStream);
                secureSecretId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "SaveSecureValue{" +
                        "value=" + value +
                        ", secureSecretId=" + secureSecretId +
                        '}';

            }
        }


        public static class DeleteSecureValue extends TLMethod<Bool> {
            public static final int ID = 0xb880bc4b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.deleteSecureValue";
            public TLVector<ApiScheme.SecureValueType> types;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                types.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                types = new TLVector<ApiScheme.SecureValueType>(ApiScheme.SecureValueType.class);
                types.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteSecureValue{" +
                        "types=" + types +
                        '}';

            }
        }


        public static class GetAuthorizationForm extends TLMethod<NsAccount.AuthorizationForm> {
            public static final int ID = 0xa929597a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getAuthorizationForm";
            public long botId;
            public String scope;
            public String publicKey;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(botId);
                outputStream.writeTLString(scope);
                outputStream.writeTLString(publicKey);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                botId = inputStream.readLong();
                scope = inputStream.readTLString();
                publicKey = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetAuthorizationForm{" +
                        "botId=" + botId +
                        ", scope=" + scope +
                        ", publicKey=" + publicKey +
                        '}';

            }
        }


        public static class AcceptAuthorization extends TLMethod<Bool> {
            public static final int ID = 0xf3ed4c73;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.acceptAuthorization";
            public long botId;
            public String scope;
            public String publicKey;
            public TLVector<ApiScheme.SecureValueHash> valueHashes;
            public ApiScheme.SecureCredentialsEncrypted credentials;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(botId);
                outputStream.writeTLString(scope);
                outputStream.writeTLString(publicKey);
                valueHashes.write(outputStream);

                credentials.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                botId = inputStream.readLong();
                scope = inputStream.readTLString();
                publicKey = inputStream.readTLString();
                valueHashes = new TLVector<ApiScheme.SecureValueHash>(ApiScheme.SecureValueHash.class);
                valueHashes.read(inputStream);

                credentials = ApiScheme.SecureCredentialsEncrypted.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AcceptAuthorization{" +
                        "botId=" + botId +
                        ", scope=" + scope +
                        ", publicKey=" + publicKey +
                        ", valueHashes=" + valueHashes +
                        ", credentials=" + credentials +
                        '}';

            }
        }


        public static class SendVerifyPhoneCode extends TLMethod<NsAuth.SentCode> {
            public static final int ID = 0xa5a356f9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.sendVerifyPhoneCode";
            public String phoneNumber;
            public ApiScheme.CodeSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                settings = ApiScheme.CodeSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendVerifyPhoneCode{" +
                        "phoneNumber=" + phoneNumber +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class VerifyPhone extends TLMethod<Bool> {
            public static final int ID = 0x4dd3a7f6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.verifyPhone";
            public String phoneNumber;
            public String phoneCodeHash;
            public String phoneCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(phoneNumber);
                outputStream.writeTLString(phoneCodeHash);
                outputStream.writeTLString(phoneCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneNumber = inputStream.readTLString();
                phoneCodeHash = inputStream.readTLString();
                phoneCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "VerifyPhone{" +
                        "phoneNumber=" + phoneNumber +
                        ", phoneCodeHash=" + phoneCodeHash +
                        ", phoneCode=" + phoneCode +
                        '}';

            }
        }


        public static class SendVerifyEmailCode extends TLMethod<NsAccount.SentEmailCode> {
            public static final int ID = 0x7011509f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.sendVerifyEmailCode";
            public String email;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(email);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                email = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SendVerifyEmailCode{" +
                        "email=" + email +
                        '}';

            }
        }


        public static class VerifyEmail extends TLMethod<Bool> {
            public static final int ID = 0xecba39db;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.verifyEmail";
            public String email;
            public String code;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(email);
                outputStream.writeTLString(code);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                email = inputStream.readTLString();
                code = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "VerifyEmail{" +
                        "email=" + email +
                        ", code=" + code +
                        '}';

            }
        }


        public static class InitTakeoutSession extends TLMethod<NsAccount.Takeout> {
            public static final int ID = 0x8ef3eab0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.initTakeoutSession";
            public int flags;
            public True contacts = null;
            public True messageUsers = null;
            public True messageChats = null;
            public True messageMegagroups = null;
            public True messageChannels = null;
            public True files = null;
            public Long fileMaxSize = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = contacts != null ? (flags | 1) : (flags & ~1);
                flags = messageUsers != null ? (flags | 2) : (flags & ~2);
                flags = messageChats != null ? (flags | 4) : (flags & ~4);
                flags = messageMegagroups != null ? (flags | 8) : (flags & ~8);
                flags = messageChannels != null ? (flags | 16) : (flags & ~16);
                flags = files != null ? (flags | 32) : (flags & ~32);
                flags = fileMaxSize != null ? (flags | 32) : (flags & ~32);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && contacts != null) {
                    contacts.isBareType = true;
                    contacts.write(outputStream);
                }

                if ((flags & 2) != 0 && messageUsers != null) {
                    messageUsers.isBareType = true;
                    messageUsers.write(outputStream);
                }

                if ((flags & 4) != 0 && messageChats != null) {
                    messageChats.isBareType = true;
                    messageChats.write(outputStream);
                }

                if ((flags & 8) != 0 && messageMegagroups != null) {
                    messageMegagroups.isBareType = true;
                    messageMegagroups.write(outputStream);
                }

                if ((flags & 16) != 0 && messageChannels != null) {
                    messageChannels.isBareType = true;
                    messageChannels.write(outputStream);
                }

                if ((flags & 32) != 0 && files != null) {
                    files.isBareType = true;
                    files.write(outputStream);
                }

                if ((flags & 32) != 0 && fileMaxSize != null) {
                    outputStream.writeLong(fileMaxSize);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    contacts = new True();
                    contacts.isBareType = true;
                    contacts.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    messageUsers = new True();
                    messageUsers.isBareType = true;
                    messageUsers.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    messageChats = new True();
                    messageChats.isBareType = true;
                    messageChats.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    messageMegagroups = new True();
                    messageMegagroups.isBareType = true;
                    messageMegagroups.read(inputStream);
                }

                if ((flags & 16) != 0) {
                    messageChannels = new True();
                    messageChannels.isBareType = true;
                    messageChannels.read(inputStream);
                }

                if ((flags & 32) != 0) {
                    files = new True();
                    files.isBareType = true;
                    files.read(inputStream);
                }

                if ((flags & 32) != 0) {
                    fileMaxSize = inputStream.readLong();
                }


            }

            @Override
            public String toString() {
                return "InitTakeoutSession{" +
                        "flags=" + flags +
                        ", contacts=" + contacts +
                        ", messageUsers=" + messageUsers +
                        ", messageChats=" + messageChats +
                        ", messageMegagroups=" + messageMegagroups +
                        ", messageChannels=" + messageChannels +
                        ", files=" + files +
                        ", fileMaxSize=" + fileMaxSize +
                        '}';

            }
        }


        public static class FinishTakeoutSession extends TLMethod<Bool> {
            public static final int ID = 0x1d2652ee;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.finishTakeoutSession";
            public int flags;
            public True success = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = success != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && success != null) {
                    success.isBareType = true;
                    success.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    success = new True();
                    success.isBareType = true;
                    success.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "FinishTakeoutSession{" +
                        "flags=" + flags +
                        ", success=" + success +
                        '}';

            }
        }


        public static class ConfirmPasswordEmail extends TLMethod<Bool> {
            public static final int ID = 0x8fdf1920;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.confirmPasswordEmail";
            public String code;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(code);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                code = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ConfirmPasswordEmail{" +
                        "code=" + code +
                        '}';

            }
        }


        public static class ResendPasswordEmail extends TLMethod<Bool> {
            public static final int ID = 0x7a7f2a15;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resendPasswordEmail";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResendPasswordEmail{" +
                        '}';

            }
        }


        public static class CancelPasswordEmail extends TLMethod<Bool> {
            public static final int ID = 0xc1cbd5b6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.cancelPasswordEmail";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "CancelPasswordEmail{" +
                        '}';

            }
        }


        public static class GetContactSignUpNotification extends TLMethod<Bool> {
            public static final int ID = 0x9f07c728;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getContactSignUpNotification";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetContactSignUpNotification{" +
                        '}';

            }
        }


        public static class SetContactSignUpNotification extends TLMethod<Bool> {
            public static final int ID = 0xcff43f61;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setContactSignUpNotification";
            public ApiScheme.Bool silent;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                silent.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                silent = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetContactSignUpNotification{" +
                        "silent=" + silent +
                        '}';

            }
        }


        public static class GetNotifyExceptions extends TLMethod<Updates> {
            public static final int ID = 0x53577479;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getNotifyExceptions";
            public int flags;
            public True compareSound = null;
            public ApiScheme.InputNotifyPeer peer = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = compareSound != null ? (flags | 2) : (flags & ~2);
                flags = peer != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && compareSound != null) {
                    compareSound.isBareType = true;
                    compareSound.write(outputStream);
                }

                if ((flags & 1) != 0 && peer != null) {
                    peer.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    compareSound = new True();
                    compareSound.isBareType = true;
                    compareSound.read(inputStream);
                }

                if ((flags & 1) != 0) {
                    peer = ApiScheme.InputNotifyPeer.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "GetNotifyExceptions{" +
                        "flags=" + flags +
                        ", compareSound=" + compareSound +
                        ", peer=" + peer +
                        '}';

            }
        }


        public static class GetWallPaper extends TLMethod<WallPaper> {
            public static final int ID = 0xfc8ddbea;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getWallPaper";
            public ApiScheme.InputWallPaper wallpaper;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                wallpaper.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                wallpaper = ApiScheme.InputWallPaper.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetWallPaper{" +
                        "wallpaper=" + wallpaper +
                        '}';

            }
        }


        public static class UploadWallPaper extends TLMethod<WallPaper> {
            public static final int ID = 0xdd853661;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.uploadWallPaper";
            public ApiScheme.InputFile file;
            public String mimeType;
            public ApiScheme.WallPaperSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                file.write(outputStream);

                outputStream.writeTLString(mimeType);
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                file = ApiScheme.InputFile.readObject(inputStream);
                mimeType = inputStream.readTLString();
                settings = ApiScheme.WallPaperSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "UploadWallPaper{" +
                        "file=" + file +
                        ", mimeType=" + mimeType +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class SaveWallPaper extends TLMethod<Bool> {
            public static final int ID = 0x6c5a5b37;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.saveWallPaper";
            public ApiScheme.InputWallPaper wallpaper;
            public ApiScheme.Bool unsave;
            public ApiScheme.WallPaperSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                wallpaper.write(outputStream);

                unsave.write(outputStream);

                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                wallpaper = ApiScheme.InputWallPaper.readObject(inputStream);
                unsave = ApiScheme.Bool.readObject(inputStream);
                settings = ApiScheme.WallPaperSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveWallPaper{" +
                        "wallpaper=" + wallpaper +
                        ", unsave=" + unsave +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class InstallWallPaper extends TLMethod<Bool> {
            public static final int ID = 0xfeed5769;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.installWallPaper";
            public ApiScheme.InputWallPaper wallpaper;
            public ApiScheme.WallPaperSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                wallpaper.write(outputStream);

                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                wallpaper = ApiScheme.InputWallPaper.readObject(inputStream);
                settings = ApiScheme.WallPaperSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "InstallWallPaper{" +
                        "wallpaper=" + wallpaper +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class ResetWallPapers extends TLMethod<Bool> {
            public static final int ID = 0xbb3b9804;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetWallPapers";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetWallPapers{" +
                        '}';

            }
        }


        public static class GetAutoDownloadSettings extends TLMethod<NsAccount.AutoDownloadSettings> {
            public static final int ID = 0x56da0b3f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getAutoDownloadSettings";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetAutoDownloadSettings{" +
                        '}';

            }
        }


        public static class SaveAutoDownloadSettings extends TLMethod<Bool> {
            public static final int ID = 0x76f36233;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.saveAutoDownloadSettings";
            public int flags;
            public True low = null;
            public True high = null;
            public ApiScheme.AutoDownloadSettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = low != null ? (flags | 1) : (flags & ~1);
                flags = high != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && low != null) {
                    low.isBareType = true;
                    low.write(outputStream);
                }

                if ((flags & 2) != 0 && high != null) {
                    high.isBareType = true;
                    high.write(outputStream);
                }

                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    low = new True();
                    low.isBareType = true;
                    low.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    high = new True();
                    high.isBareType = true;
                    high.read(inputStream);
                }

                settings = ApiScheme.AutoDownloadSettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveAutoDownloadSettings{" +
                        "flags=" + flags +
                        ", low=" + low +
                        ", high=" + high +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class UploadTheme extends TLMethod<Document> {
            public static final int ID = 0x1c3db333;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.uploadTheme";
            public int flags;
            public ApiScheme.InputFile file;
            public ApiScheme.InputFile thumb = null;
            public String fileName;
            public String mimeType;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = thumb != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                file.write(outputStream);

                if ((flags & 1) != 0 && thumb != null) {
                    thumb.write(outputStream);
                }

                outputStream.writeTLString(fileName);
                outputStream.writeTLString(mimeType);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                file = ApiScheme.InputFile.readObject(inputStream);
                if ((flags & 1) != 0) {
                    thumb = ApiScheme.InputFile.readObject(inputStream);
                }

                fileName = inputStream.readTLString();
                mimeType = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "UploadTheme{" +
                        "flags=" + flags +
                        ", file=" + file +
                        ", thumb=" + thumb +
                        ", fileName=" + fileName +
                        ", mimeType=" + mimeType +
                        '}';

            }
        }


        public static class CreateTheme extends TLMethod<Theme> {
            public static final int ID = 0x652e4400;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.createTheme";
            public int flags;
            public String slug;
            public String title;
            public ApiScheme.InputDocument document = null;
            public TLVector<ApiScheme.InputThemeSettings> settings = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = document != null ? (flags | 4) : (flags & ~4);
                flags = settings != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                outputStream.writeTLString(slug);
                outputStream.writeTLString(title);
                if ((flags & 4) != 0 && document != null) {
                    document.write(outputStream);
                }

                if ((flags & 8) != 0 && settings != null) {
                    settings.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                slug = inputStream.readTLString();
                title = inputStream.readTLString();
                if ((flags & 4) != 0) {
                    document = ApiScheme.InputDocument.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    settings = new TLVector<ApiScheme.InputThemeSettings>(ApiScheme.InputThemeSettings.class);
                    settings.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "CreateTheme{" +
                        "flags=" + flags +
                        ", slug=" + slug +
                        ", title=" + title +
                        ", document=" + document +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class UpdateTheme extends TLMethod<Theme> {
            public static final int ID = 0x2bf40ccc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.updateTheme";
            public int flags;
            public String format;
            public ApiScheme.InputTheme theme;
            public String slug = null;
            public String title = null;
            public ApiScheme.InputDocument document = null;
            public TLVector<ApiScheme.InputThemeSettings> settings = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = slug != null ? (flags | 1) : (flags & ~1);
                flags = title != null ? (flags | 2) : (flags & ~2);
                flags = document != null ? (flags | 4) : (flags & ~4);
                flags = settings != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                outputStream.writeTLString(format);
                theme.write(outputStream);

                if ((flags & 1) != 0 && slug != null) {
                    outputStream.writeTLString(slug);
                }

                if ((flags & 2) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }

                if ((flags & 4) != 0 && document != null) {
                    document.write(outputStream);
                }

                if ((flags & 8) != 0 && settings != null) {
                    settings.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                format = inputStream.readTLString();
                theme = ApiScheme.InputTheme.readObject(inputStream);
                if ((flags & 1) != 0) {
                    slug = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    title = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    document = ApiScheme.InputDocument.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    settings = new TLVector<ApiScheme.InputThemeSettings>(ApiScheme.InputThemeSettings.class);
                    settings.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "UpdateTheme{" +
                        "flags=" + flags +
                        ", format=" + format +
                        ", theme=" + theme +
                        ", slug=" + slug +
                        ", title=" + title +
                        ", document=" + document +
                        ", settings=" + settings +
                        '}';

            }
        }


        public static class SaveTheme extends TLMethod<Bool> {
            public static final int ID = 0xf257106c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.saveTheme";
            public ApiScheme.InputTheme theme;
            public ApiScheme.Bool unsave;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                theme.write(outputStream);

                unsave.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                theme = ApiScheme.InputTheme.readObject(inputStream);
                unsave = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveTheme{" +
                        "theme=" + theme +
                        ", unsave=" + unsave +
                        '}';

            }
        }


        public static class InstallTheme extends TLMethod<Bool> {
            public static final int ID = 0xc727bb3b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.installTheme";
            public int flags;
            public True dark = null;
            public ApiScheme.InputTheme theme = null;
            public String format = null;
            public ApiScheme.BaseTheme baseTheme = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = dark != null ? (flags | 1) : (flags & ~1);
                flags = theme != null ? (flags | 2) : (flags & ~2);
                flags = format != null ? (flags | 4) : (flags & ~4);
                flags = baseTheme != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && dark != null) {
                    dark.isBareType = true;
                    dark.write(outputStream);
                }

                if ((flags & 2) != 0 && theme != null) {
                    theme.write(outputStream);
                }

                if ((flags & 4) != 0 && format != null) {
                    outputStream.writeTLString(format);
                }

                if ((flags & 8) != 0 && baseTheme != null) {
                    baseTheme.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    dark = new True();
                    dark.isBareType = true;
                    dark.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    theme = ApiScheme.InputTheme.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    format = inputStream.readTLString();
                }

                if ((flags & 8) != 0) {
                    baseTheme = ApiScheme.BaseTheme.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "InstallTheme{" +
                        "flags=" + flags +
                        ", dark=" + dark +
                        ", theme=" + theme +
                        ", format=" + format +
                        ", baseTheme=" + baseTheme +
                        '}';

            }
        }


        public static class GetTheme extends TLMethod<Theme> {
            public static final int ID = 0x8d9d742b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getTheme";
            public String format;
            public ApiScheme.InputTheme theme;
            public long documentId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(format);
                theme.write(outputStream);

                outputStream.writeLong(documentId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                format = inputStream.readTLString();
                theme = ApiScheme.InputTheme.readObject(inputStream);
                documentId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetTheme{" +
                        "format=" + format +
                        ", theme=" + theme +
                        ", documentId=" + documentId +
                        '}';

            }
        }


        public static class GetThemes extends TLMethod<NsAccount.Themes> {
            public static final int ID = 0x7206e458;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getThemes";
            public String format;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(format);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                format = inputStream.readTLString();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetThemes{" +
                        "format=" + format +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class SetContentSettings extends TLMethod<Bool> {
            public static final int ID = 0xb574b16b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setContentSettings";
            public int flags;
            public True sensitiveEnabled = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = sensitiveEnabled != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && sensitiveEnabled != null) {
                    sensitiveEnabled.isBareType = true;
                    sensitiveEnabled.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    sensitiveEnabled = new True();
                    sensitiveEnabled.isBareType = true;
                    sensitiveEnabled.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SetContentSettings{" +
                        "flags=" + flags +
                        ", sensitiveEnabled=" + sensitiveEnabled +
                        '}';

            }
        }


        public static class GetContentSettings extends TLMethod<NsAccount.ContentSettings> {
            public static final int ID = 0x8b9b4dae;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getContentSettings";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetContentSettings{" +
                        '}';

            }
        }


        public static class GetMultiWallPapers extends TLMethod<TLVector<WallPaper>> {
            public static final int ID = 0x65ad71dc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getMultiWallPapers";
            public TLVector<ApiScheme.InputWallPaper> wallpapers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                wallpapers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                wallpapers = new TLVector<ApiScheme.InputWallPaper>(ApiScheme.InputWallPaper.class);
                wallpapers.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetMultiWallPapers{" +
                        "wallpapers=" + wallpapers +
                        '}';

            }
        }


        public static class GetGlobalPrivacySettings extends TLMethod<GlobalPrivacySettings> {
            public static final int ID = 0xeb2b4cf6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getGlobalPrivacySettings";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetGlobalPrivacySettings{" +
                        '}';

            }
        }


        public static class SetGlobalPrivacySettings extends TLMethod<GlobalPrivacySettings> {
            public static final int ID = 0x1edaaac2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setGlobalPrivacySettings";
            public ApiScheme.GlobalPrivacySettings settings;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                settings.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                settings = ApiScheme.GlobalPrivacySettings.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetGlobalPrivacySettings{" +
                        "settings=" + settings +
                        '}';

            }
        }


        public static class ReportProfilePhoto extends TLMethod<Bool> {
            public static final int ID = 0xfa8cc6f5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.reportProfilePhoto";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputPhoto photoId;
            public ApiScheme.ReportReason reason;
            public String message;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                photoId.write(outputStream);

                reason.write(outputStream);

                outputStream.writeTLString(message);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                photoId = ApiScheme.InputPhoto.readObject(inputStream);
                reason = ApiScheme.ReportReason.readObject(inputStream);
                message = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ReportProfilePhoto{" +
                        "peer=" + peer +
                        ", photoId=" + photoId +
                        ", reason=" + reason +
                        ", message=" + message +
                        '}';

            }
        }


        public static class ResetPassword extends TLMethod<NsAccount.ResetPasswordResult> {
            public static final int ID = 0x9308ce1b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.resetPassword";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ResetPassword{" +
                        '}';

            }
        }


        public static class DeclinePasswordReset extends TLMethod<Bool> {
            public static final int ID = 0x4c9409f6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.declinePasswordReset";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "DeclinePasswordReset{" +
                        '}';

            }
        }


        public static class GetChatThemes extends TLMethod<NsAccount.Themes> {
            public static final int ID = 0xd638de89;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getChatThemes";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetChatThemes{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class SetAuthorizationTTL extends TLMethod<Bool> {
            public static final int ID = 0xbf899aa0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.setAuthorizationTTL";
            public int authorizationTtlDays;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(authorizationTtlDays);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                authorizationTtlDays = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "SetAuthorizationTTL{" +
                        "authorizationTtlDays=" + authorizationTtlDays +
                        '}';

            }
        }


        public static class ChangeAuthorizationSettings extends TLMethod<Bool> {
            public static final int ID = 0x40f48462;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.changeAuthorizationSettings";
            public int flags;
            public long hash;
            public ApiScheme.Bool encryptedRequestsDisabled = null;
            public ApiScheme.Bool callRequestsDisabled = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = encryptedRequestsDisabled != null ? (flags | 1) : (flags & ~1);
                flags = callRequestsDisabled != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                outputStream.writeLong(hash);
                if ((flags & 1) != 0 && encryptedRequestsDisabled != null) {
                    encryptedRequestsDisabled.write(outputStream);
                }

                if ((flags & 2) != 0 && callRequestsDisabled != null) {
                    callRequestsDisabled.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                hash = inputStream.readLong();
                if ((flags & 1) != 0) {
                    encryptedRequestsDisabled = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    callRequestsDisabled = ApiScheme.Bool.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ChangeAuthorizationSettings{" +
                        "flags=" + flags +
                        ", hash=" + hash +
                        ", encryptedRequestsDisabled=" + encryptedRequestsDisabled +
                        ", callRequestsDisabled=" + callRequestsDisabled +
                        '}';

            }
        }


        public static class GetSavedRingtones extends TLMethod<NsAccount.SavedRingtones> {
            public static final int ID = 0xe1902288;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.getSavedRingtones";
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetSavedRingtones{" +
                        "hash=" + hash +
                        '}';

            }
        }


        public static class SaveRingtone extends TLMethod<NsAccount.SavedRingtone> {
            public static final int ID = 0x3dea5b03;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.saveRingtone";
            public ApiScheme.InputDocument id;
            public ApiScheme.Bool unsave;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);

                unsave.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputDocument.readObject(inputStream);
                unsave = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveRingtone{" +
                        "id=" + id +
                        ", unsave=" + unsave +
                        '}';

            }
        }


        public static class UploadRingtone extends TLMethod<Document> {
            public static final int ID = 0x831a83a2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "account.uploadRingtone";
            public ApiScheme.InputFile file;
            public String fileName;
            public String mimeType;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                file.write(outputStream);

                outputStream.writeTLString(fileName);
                outputStream.writeTLString(mimeType);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                file = ApiScheme.InputFile.readObject(inputStream);
                fileName = inputStream.readTLString();
                mimeType = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "UploadRingtone{" +
                        "file=" + file +
                        ", fileName=" + fileName +
                        ", mimeType=" + mimeType +
                        '}';

            }
        }


    }

    public static abstract class NsChannels {
        public static abstract class ChannelParticipants extends TLObject {
            public static ChannelParticipants readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsChannels.ChannelParticipants a = null;
                if (id == NsChannels.ChannelParticipants2.ID) {
                    a = new NsChannels.ChannelParticipants2();
                } else if (id == NsChannels.ChannelParticipantsNotModified.ID) {
                    a = new NsChannels.ChannelParticipantsNotModified();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ChannelParticipant extends TLObject {
            public static ChannelParticipant readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsChannels.ChannelParticipant a = null;
                if (id == NsChannels.ChannelParticipant2.ID) {
                    a = new NsChannels.ChannelParticipant2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class AdminLogResults extends TLObject {
            public static AdminLogResults readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsChannels.AdminLogResults a = null;
                if (id == NsChannels.AdminLogResults2.ID) {
                    a = new NsChannels.AdminLogResults2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SendAsPeers extends TLObject {
            public static SendAsPeers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsChannels.SendAsPeers a = null;
                if (id == NsChannels.SendAsPeers2.ID) {
                    a = new NsChannels.SendAsPeers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class ChannelParticipants2 extends NsChannels.ChannelParticipants {
            public static final int ID = 0x9ab0feaf;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "channels.channelParticipants";
            public int count;
            public TLVector<ApiScheme.ChannelParticipant> participants;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                participants.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                participants = new TLVector<ApiScheme.ChannelParticipant>(ApiScheme.ChannelParticipant.class);
                participants.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChannelParticipants{" +
                        "count=" + count +
                        ", participants=" + participants +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ChannelParticipantsNotModified extends NsChannels.ChannelParticipants {
            public static final int ID = 0xf0173fe9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "channels.channelParticipantsNotModified";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "ChannelParticipantsNotModified{" +
                        '}';

            }
        }


        public static class ChannelParticipant2 extends NsChannels.ChannelParticipant {
            public static final int ID = 0xdfb80317;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "channels.channelParticipant";
            public ApiScheme.ChannelParticipant participant;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                participant.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                participant = ApiScheme.ChannelParticipant.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "ChannelParticipant{" +
                        "participant=" + participant +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class AdminLogResults2 extends NsChannels.AdminLogResults {
            public static final int ID = 0xed8af74d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "channels.adminLogResults";
            public TLVector<ApiScheme.ChannelAdminLogEvent> events;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                events.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                events = new TLVector<ApiScheme.ChannelAdminLogEvent>(ApiScheme.ChannelAdminLogEvent.class);
                events.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "AdminLogResults{" +
                        "events=" + events +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class SendAsPeers2 extends NsChannels.SendAsPeers {
            public static final int ID = 0x8356cda9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "channels.sendAsPeers";
            public TLVector<ApiScheme.Peer> peers;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peers.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peers = new TLVector<ApiScheme.Peer>(ApiScheme.Peer.class);
                peers.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "SendAsPeers{" +
                        "peers=" + peers +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ReadHistory extends TLMethod<Bool> {
            public static final int ID = 0xcc104937;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.readHistory";
            public ApiScheme.InputChannel channel;
            public int maxId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeInt(maxId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                maxId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ReadHistory{" +
                        "channel=" + channel +
                        ", maxId=" + maxId +
                        '}';

            }
        }


        public static class DeleteMessages extends TLMethod<NsMessages.AffectedMessages> {
            public static final int ID = 0x84c1fd4e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.deleteMessages";
            public ApiScheme.InputChannel channel;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "DeleteMessages{" +
                        "channel=" + channel +
                        ", id=" + id +
                        '}';

            }
        }


        public static class ReportSpam extends TLMethod<Bool> {
            public static final int ID = 0xf44a8315;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.reportSpam";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputPeer participant;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                participant.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                participant = ApiScheme.InputPeer.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReportSpam{" +
                        "channel=" + channel +
                        ", participant=" + participant +
                        ", id=" + id +
                        '}';

            }
        }


        public static class GetMessages extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0xad8c9a23;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getMessages";
            public ApiScheme.InputChannel channel;
            public TLVector<ApiScheme.InputMessage> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                id = new TLVector<ApiScheme.InputMessage>(ApiScheme.InputMessage.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetMessages{" +
                        "channel=" + channel +
                        ", id=" + id +
                        '}';

            }
        }


        public static class GetParticipants extends TLMethod<NsChannels.ChannelParticipants> {
            public static final int ID = 0x77ced9d0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getParticipants";
            public ApiScheme.InputChannel channel;
            public ApiScheme.ChannelParticipantsFilter filter;
            public int offset;
            public int limit;
            public long hash;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                filter.write(outputStream);

                outputStream.writeInt(offset);
                outputStream.writeInt(limit);
                outputStream.writeLong(hash);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                filter = ApiScheme.ChannelParticipantsFilter.readObject(inputStream);
                offset = inputStream.readInt();
                limit = inputStream.readInt();
                hash = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "GetParticipants{" +
                        "channel=" + channel +
                        ", filter=" + filter +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        ", hash=" + hash +
                        '}';

            }
        }


        public static class GetParticipant extends TLMethod<NsChannels.ChannelParticipant> {
            public static final int ID = 0xa0ab6cc6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getParticipant";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputPeer participant;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                participant.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                participant = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetParticipant{" +
                        "channel=" + channel +
                        ", participant=" + participant +
                        '}';

            }
        }


        public static class GetChannels extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0xa7f6bbb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getChannels";
            public TLVector<ApiScheme.InputChannel> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<ApiScheme.InputChannel>(ApiScheme.InputChannel.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetChannels{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetFullChannel extends TLMethod<NsMessages.ChatFull> {
            public static final int ID = 0x8736a09;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getFullChannel";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetFullChannel{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class CreateChannel extends TLMethod<Updates> {
            public static final int ID = 0x3d5fb10f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.createChannel";
            public int flags;
            public True broadcast = null;
            public True megagroup = null;
            public True forImport = null;
            public String title;
            public String about;
            public ApiScheme.InputGeoPoint geoPoint = null;
            public String address = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = broadcast != null ? (flags | 1) : (flags & ~1);
                flags = megagroup != null ? (flags | 2) : (flags & ~2);
                flags = forImport != null ? (flags | 8) : (flags & ~8);
                flags = geoPoint != null ? (flags | 4) : (flags & ~4);
                flags = address != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && broadcast != null) {
                    broadcast.isBareType = true;
                    broadcast.write(outputStream);
                }

                if ((flags & 2) != 0 && megagroup != null) {
                    megagroup.isBareType = true;
                    megagroup.write(outputStream);
                }

                if ((flags & 8) != 0 && forImport != null) {
                    forImport.isBareType = true;
                    forImport.write(outputStream);
                }

                outputStream.writeTLString(title);
                outputStream.writeTLString(about);
                if ((flags & 4) != 0 && geoPoint != null) {
                    geoPoint.write(outputStream);
                }

                if ((flags & 4) != 0 && address != null) {
                    outputStream.writeTLString(address);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    broadcast = new True();
                    broadcast.isBareType = true;
                    broadcast.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    megagroup = new True();
                    megagroup.isBareType = true;
                    megagroup.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    forImport = new True();
                    forImport.isBareType = true;
                    forImport.read(inputStream);
                }

                title = inputStream.readTLString();
                about = inputStream.readTLString();
                if ((flags & 4) != 0) {
                    geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
                }

                if ((flags & 4) != 0) {
                    address = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "CreateChannel{" +
                        "flags=" + flags +
                        ", broadcast=" + broadcast +
                        ", megagroup=" + megagroup +
                        ", forImport=" + forImport +
                        ", title=" + title +
                        ", about=" + about +
                        ", geoPoint=" + geoPoint +
                        ", address=" + address +
                        '}';

            }
        }


        public static class EditAdmin extends TLMethod<Updates> {
            public static final int ID = 0xd33c8902;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editAdmin";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputUser userId;
            public ApiScheme.ChatAdminRights adminRights;
            public String rank;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                userId.write(outputStream);

                adminRights.write(outputStream);

                outputStream.writeTLString(rank);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                userId = ApiScheme.InputUser.readObject(inputStream);
                adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);
                rank = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditAdmin{" +
                        "channel=" + channel +
                        ", userId=" + userId +
                        ", adminRights=" + adminRights +
                        ", rank=" + rank +
                        '}';

            }
        }


        public static class EditTitle extends TLMethod<Updates> {
            public static final int ID = 0x566decd0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editTitle";
            public ApiScheme.InputChannel channel;
            public String title;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeTLString(title);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                title = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditTitle{" +
                        "channel=" + channel +
                        ", title=" + title +
                        '}';

            }
        }


        public static class EditPhoto extends TLMethod<Updates> {
            public static final int ID = 0xf12e57c9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editPhoto";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputChatPhoto photo;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                photo.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                photo = ApiScheme.InputChatPhoto.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditPhoto{" +
                        "channel=" + channel +
                        ", photo=" + photo +
                        '}';

            }
        }


        public static class CheckUsername extends TLMethod<Bool> {
            public static final int ID = 0x10e6bd2c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.checkUsername";
            public ApiScheme.InputChannel channel;
            public String username;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeTLString(username);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                username = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckUsername{" +
                        "channel=" + channel +
                        ", username=" + username +
                        '}';

            }
        }


        public static class UpdateUsername extends TLMethod<Bool> {
            public static final int ID = 0x3514b3de;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.updateUsername";
            public ApiScheme.InputChannel channel;
            public String username;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeTLString(username);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                username = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "UpdateUsername{" +
                        "channel=" + channel +
                        ", username=" + username +
                        '}';

            }
        }


        public static class JoinChannel extends TLMethod<Updates> {
            public static final int ID = 0x24b524c5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.joinChannel";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "JoinChannel{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class LeaveChannel extends TLMethod<Updates> {
            public static final int ID = 0xf836aa95;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.leaveChannel";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "LeaveChannel{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class InviteToChannel extends TLMethod<Updates> {
            public static final int ID = 0x199f3a6c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.inviteToChannel";
            public ApiScheme.InputChannel channel;
            public TLVector<ApiScheme.InputUser> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                users = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "InviteToChannel{" +
                        "channel=" + channel +
                        ", users=" + users +
                        '}';

            }
        }


        public static class DeleteChannel extends TLMethod<Updates> {
            public static final int ID = 0xc0111fe3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.deleteChannel";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DeleteChannel{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class ExportMessageLink extends TLMethod<ExportedMessageLink> {
            public static final int ID = 0xe63fadeb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.exportMessageLink";
            public int flags;
            public True grouped = null;
            public True thread = null;
            public ApiScheme.InputChannel channel;
            public int id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = grouped != null ? (flags | 1) : (flags & ~1);
                flags = thread != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && grouped != null) {
                    grouped.isBareType = true;
                    grouped.write(outputStream);
                }

                if ((flags & 2) != 0 && thread != null) {
                    thread.isBareType = true;
                    thread.write(outputStream);
                }

                channel.write(outputStream);

                outputStream.writeInt(id);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    grouped = new True();
                    grouped.isBareType = true;
                    grouped.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    thread = new True();
                    thread.isBareType = true;
                    thread.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);
                id = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ExportMessageLink{" +
                        "flags=" + flags +
                        ", grouped=" + grouped +
                        ", thread=" + thread +
                        ", channel=" + channel +
                        ", id=" + id +
                        '}';

            }
        }


        public static class ToggleSignatures extends TLMethod<Updates> {
            public static final int ID = 0x1f69b606;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.toggleSignatures";
            public ApiScheme.InputChannel channel;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleSignatures{" +
                        "channel=" + channel +
                        ", enabled=" + enabled +
                        '}';

            }
        }


        public static class GetAdminedPublicChannels extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0xf8b036af;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getAdminedPublicChannels";
            public int flags;
            public True byLocation = null;
            public True checkLimit = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = byLocation != null ? (flags | 1) : (flags & ~1);
                flags = checkLimit != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && byLocation != null) {
                    byLocation.isBareType = true;
                    byLocation.write(outputStream);
                }

                if ((flags & 2) != 0 && checkLimit != null) {
                    checkLimit.isBareType = true;
                    checkLimit.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    byLocation = new True();
                    byLocation.isBareType = true;
                    byLocation.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    checkLimit = new True();
                    checkLimit.isBareType = true;
                    checkLimit.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "GetAdminedPublicChannels{" +
                        "flags=" + flags +
                        ", byLocation=" + byLocation +
                        ", checkLimit=" + checkLimit +
                        '}';

            }
        }


        public static class EditBanned extends TLMethod<Updates> {
            public static final int ID = 0x96e6cd81;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editBanned";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputPeer participant;
            public ApiScheme.ChatBannedRights bannedRights;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                participant.write(outputStream);

                bannedRights.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                participant = ApiScheme.InputPeer.readObject(inputStream);
                bannedRights = ApiScheme.ChatBannedRights.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditBanned{" +
                        "channel=" + channel +
                        ", participant=" + participant +
                        ", bannedRights=" + bannedRights +
                        '}';

            }
        }


        public static class GetAdminLog extends TLMethod<NsChannels.AdminLogResults> {
            public static final int ID = 0x33ddf480;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getAdminLog";
            public int flags;
            public ApiScheme.InputChannel channel;
            public String q;
            public ApiScheme.ChannelAdminLogEventsFilter eventsFilter = null;
            public TLVector<ApiScheme.InputUser> admins = null;
            public long maxId;
            public long minId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = eventsFilter != null ? (flags | 1) : (flags & ~1);
                flags = admins != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                channel.write(outputStream);

                outputStream.writeTLString(q);
                if ((flags & 1) != 0 && eventsFilter != null) {
                    eventsFilter.write(outputStream);
                }

                if ((flags & 2) != 0 && admins != null) {
                    admins.write(outputStream);
                }

                outputStream.writeLong(maxId);
                outputStream.writeLong(minId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                channel = ApiScheme.InputChannel.readObject(inputStream);
                q = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    eventsFilter = ApiScheme.ChannelAdminLogEventsFilter.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    admins = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                    admins.read(inputStream);
                }

                maxId = inputStream.readLong();
                minId = inputStream.readLong();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetAdminLog{" +
                        "flags=" + flags +
                        ", channel=" + channel +
                        ", q=" + q +
                        ", eventsFilter=" + eventsFilter +
                        ", admins=" + admins +
                        ", maxId=" + maxId +
                        ", minId=" + minId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class SetStickers extends TLMethod<Bool> {
            public static final int ID = 0xea8ca4f9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.setStickers";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputStickerSet stickerset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                stickerset.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetStickers{" +
                        "channel=" + channel +
                        ", stickerset=" + stickerset +
                        '}';

            }
        }


        public static class ReadMessageContents extends TLMethod<Bool> {
            public static final int ID = 0xeab5dc38;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.readMessageContents";
            public ApiScheme.InputChannel channel;
            public TLVector<TLInt> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                id.isBareTypeItem = true;
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                id = new TLVector<TLInt>(TLInt.class);
                id.isBareTypeItem = true;
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "ReadMessageContents{" +
                        "channel=" + channel +
                        ", id=" + id +
                        '}';

            }
        }


        public static class DeleteHistory extends TLMethod<Updates> {
            public static final int ID = 0x9baa9647;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.deleteHistory";
            public int flags;
            public True forEveryone = null;
            public ApiScheme.InputChannel channel;
            public int maxId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = forEveryone != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && forEveryone != null) {
                    forEveryone.isBareType = true;
                    forEveryone.write(outputStream);
                }

                channel.write(outputStream);

                outputStream.writeInt(maxId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    forEveryone = new True();
                    forEveryone.isBareType = true;
                    forEveryone.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);
                maxId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DeleteHistory{" +
                        "flags=" + flags +
                        ", forEveryone=" + forEveryone +
                        ", channel=" + channel +
                        ", maxId=" + maxId +
                        '}';

            }
        }


        public static class TogglePreHistoryHidden extends TLMethod<Updates> {
            public static final int ID = 0xeabbb94c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.togglePreHistoryHidden";
            public ApiScheme.InputChannel channel;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "TogglePreHistoryHidden{" +
                        "channel=" + channel +
                        ", enabled=" + enabled +
                        '}';

            }
        }


        public static class GetLeftChannels extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0x8341ecc0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getLeftChannels";
            public int offset;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(offset);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                offset = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetLeftChannels{" +
                        "offset=" + offset +
                        '}';

            }
        }


        public static class GetGroupsForDiscussion extends TLMethod<NsMessages.Chats> {
            public static final int ID = 0xf5dad378;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getGroupsForDiscussion";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetGroupsForDiscussion{" +
                        '}';

            }
        }


        public static class SetDiscussionGroup extends TLMethod<Bool> {
            public static final int ID = 0x40582bb2;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.setDiscussionGroup";
            public ApiScheme.InputChannel broadcast;
            public ApiScheme.InputChannel group;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                broadcast.write(outputStream);

                group.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                broadcast = ApiScheme.InputChannel.readObject(inputStream);
                group = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetDiscussionGroup{" +
                        "broadcast=" + broadcast +
                        ", group=" + group +
                        '}';

            }
        }


        public static class EditCreator extends TLMethod<Updates> {
            public static final int ID = 0x8f38cd1f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editCreator";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputUser userId;
            public ApiScheme.InputCheckPasswordSRP password;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                userId.write(outputStream);

                password.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                userId = ApiScheme.InputUser.readObject(inputStream);
                password = ApiScheme.InputCheckPasswordSRP.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "EditCreator{" +
                        "channel=" + channel +
                        ", userId=" + userId +
                        ", password=" + password +
                        '}';

            }
        }


        public static class EditLocation extends TLMethod<Bool> {
            public static final int ID = 0x58e63f6d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.editLocation";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputGeoPoint geoPoint;
            public String address;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                geoPoint.write(outputStream);

                outputStream.writeTLString(address);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                geoPoint = ApiScheme.InputGeoPoint.readObject(inputStream);
                address = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditLocation{" +
                        "channel=" + channel +
                        ", geoPoint=" + geoPoint +
                        ", address=" + address +
                        '}';

            }
        }


        public static class ToggleSlowMode extends TLMethod<Updates> {
            public static final int ID = 0xedd49ef0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.toggleSlowMode";
            public ApiScheme.InputChannel channel;
            public int seconds;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeInt(seconds);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                seconds = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ToggleSlowMode{" +
                        "channel=" + channel +
                        ", seconds=" + seconds +
                        '}';

            }
        }


        public static class GetInactiveChannels extends TLMethod<NsMessages.InactiveChats> {
            public static final int ID = 0x11e831ee;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getInactiveChannels";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetInactiveChannels{" +
                        '}';

            }
        }


        public static class ConvertToGigagroup extends TLMethod<Updates> {
            public static final int ID = 0xb290c69;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.convertToGigagroup";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ConvertToGigagroup{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class ViewSponsoredMessage extends TLMethod<Bool> {
            public static final int ID = 0xbeaedb94;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.viewSponsoredMessage";
            public ApiScheme.InputChannel channel;
            public byte[] randomId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeTLBytes(randomId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                randomId = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "ViewSponsoredMessage{" +
                        "channel=" + channel +
                        ", randomId=" + randomId +
                        '}';

            }
        }


        public static class GetSponsoredMessages extends TLMethod<NsMessages.SponsoredMessages> {
            public static final int ID = 0xec210fbf;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getSponsoredMessages";
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetSponsoredMessages{" +
                        "channel=" + channel +
                        '}';

            }
        }


        public static class GetSendAs extends TLMethod<NsChannels.SendAsPeers> {
            public static final int ID = 0xdc770ee;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.getSendAs";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetSendAs{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class DeleteParticipantHistory extends TLMethod<NsMessages.AffectedHistory> {
            public static final int ID = 0x367544db;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.deleteParticipantHistory";
            public ApiScheme.InputChannel channel;
            public ApiScheme.InputPeer participant;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                participant.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                participant = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DeleteParticipantHistory{" +
                        "channel=" + channel +
                        ", participant=" + participant +
                        '}';

            }
        }


        public static class ToggleJoinToSend extends TLMethod<Updates> {
            public static final int ID = 0xe4cb9580;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.toggleJoinToSend";
            public ApiScheme.InputChannel channel;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleJoinToSend{" +
                        "channel=" + channel +
                        ", enabled=" + enabled +
                        '}';

            }
        }


        public static class ToggleJoinRequest extends TLMethod<Updates> {
            public static final int ID = 0x4c2985b6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "channels.toggleJoinRequest";
            public ApiScheme.InputChannel channel;
            public ApiScheme.Bool enabled;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                enabled.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                enabled = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleJoinRequest{" +
                        "channel=" + channel +
                        ", enabled=" + enabled +
                        '}';

            }
        }


    }

    public static abstract class NsPayments {
        public static abstract class PaymentForm extends TLObject {
            public static PaymentForm readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.PaymentForm a = null;
                if (id == NsPayments.PaymentForm2.ID) {
                    a = new NsPayments.PaymentForm2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ValidatedRequestedInfo extends TLObject {
            public static ValidatedRequestedInfo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.ValidatedRequestedInfo a = null;
                if (id == NsPayments.ValidatedRequestedInfo2.ID) {
                    a = new NsPayments.ValidatedRequestedInfo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PaymentResult extends TLObject {
            public static PaymentResult readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.PaymentResult a = null;
                if (id == NsPayments.PaymentResult2.ID) {
                    a = new NsPayments.PaymentResult2();
                } else if (id == NsPayments.PaymentVerificationNeeded.ID) {
                    a = new NsPayments.PaymentVerificationNeeded();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class PaymentReceipt extends TLObject {
            public static PaymentReceipt readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.PaymentReceipt a = null;
                if (id == NsPayments.PaymentReceipt2.ID) {
                    a = new NsPayments.PaymentReceipt2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class SavedInfo extends TLObject {
            public static SavedInfo readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.SavedInfo a = null;
                if (id == NsPayments.SavedInfo2.ID) {
                    a = new NsPayments.SavedInfo2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class BankCardData extends TLObject {
            public static BankCardData readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.BankCardData a = null;
                if (id == NsPayments.BankCardData2.ID) {
                    a = new NsPayments.BankCardData2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ExportedInvoice extends TLObject {
            public static ExportedInvoice readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPayments.ExportedInvoice a = null;
                if (id == NsPayments.ExportedInvoice2.ID) {
                    a = new NsPayments.ExportedInvoice2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class PaymentForm2 extends NsPayments.PaymentForm {
            public static final int ID = 0xa0058751;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.paymentForm";
            public int flags;
            public True canSaveCredentials = null;
            public True passwordMissing = null;
            public long formId;
            public long botId;
            public String title;
            public String description;
            public ApiScheme.WebDocument photo = null;
            public ApiScheme.Invoice invoice;
            public long providerId;
            public String url;
            public String nativeProvider = null;
            public ApiScheme.DataJSON nativeParams = null;
            public TLVector<ApiScheme.PaymentFormMethod> additionalMethods = null;
            public ApiScheme.PaymentRequestedInfo savedInfo = null;
            public TLVector<ApiScheme.PaymentSavedCredentials> savedCredentials = null;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = canSaveCredentials != null ? (flags | 4) : (flags & ~4);
                flags = passwordMissing != null ? (flags | 8) : (flags & ~8);
                flags = photo != null ? (flags | 32) : (flags & ~32);
                flags = nativeProvider != null ? (flags | 16) : (flags & ~16);
                flags = nativeParams != null ? (flags | 16) : (flags & ~16);
                flags = additionalMethods != null ? (flags | 64) : (flags & ~64);
                flags = savedInfo != null ? (flags | 1) : (flags & ~1);
                flags = savedCredentials != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 4) != 0 && canSaveCredentials != null) {
                    canSaveCredentials.isBareType = true;
                    canSaveCredentials.write(outputStream);
                }

                if ((flags & 8) != 0 && passwordMissing != null) {
                    passwordMissing.isBareType = true;
                    passwordMissing.write(outputStream);
                }

                outputStream.writeLong(formId);
                outputStream.writeLong(botId);
                outputStream.writeTLString(title);
                outputStream.writeTLString(description);
                if ((flags & 32) != 0 && photo != null) {
                    photo.write(outputStream);
                }

                invoice.write(outputStream);

                outputStream.writeLong(providerId);
                outputStream.writeTLString(url);
                if ((flags & 16) != 0 && nativeProvider != null) {
                    outputStream.writeTLString(nativeProvider);
                }

                if ((flags & 16) != 0 && nativeParams != null) {
                    nativeParams.write(outputStream);
                }

                if ((flags & 64) != 0 && additionalMethods != null) {
                    additionalMethods.write(outputStream);
                }

                if ((flags & 1) != 0 && savedInfo != null) {
                    savedInfo.write(outputStream);
                }

                if ((flags & 2) != 0 && savedCredentials != null) {
                    savedCredentials.write(outputStream);
                }

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 4) != 0) {
                    canSaveCredentials = new True();
                    canSaveCredentials.isBareType = true;
                    canSaveCredentials.read(inputStream);
                }

                if ((flags & 8) != 0) {
                    passwordMissing = new True();
                    passwordMissing.isBareType = true;
                    passwordMissing.read(inputStream);
                }

                formId = inputStream.readLong();
                botId = inputStream.readLong();
                title = inputStream.readTLString();
                description = inputStream.readTLString();
                if ((flags & 32) != 0) {
                    photo = ApiScheme.WebDocument.readObject(inputStream);
                }

                invoice = ApiScheme.Invoice.readObject(inputStream);
                providerId = inputStream.readLong();
                url = inputStream.readTLString();
                if ((flags & 16) != 0) {
                    nativeProvider = inputStream.readTLString();
                }

                if ((flags & 16) != 0) {
                    nativeParams = ApiScheme.DataJSON.readObject(inputStream);
                }

                if ((flags & 64) != 0) {
                    additionalMethods = new TLVector<ApiScheme.PaymentFormMethod>(ApiScheme.PaymentFormMethod.class);
                    additionalMethods.read(inputStream);
                }

                if ((flags & 1) != 0) {
                    savedInfo = ApiScheme.PaymentRequestedInfo.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    savedCredentials = new TLVector<ApiScheme.PaymentSavedCredentials>(ApiScheme.PaymentSavedCredentials.class);
                    savedCredentials.read(inputStream);
                }

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PaymentForm{" +
                        "flags=" + flags +
                        ", canSaveCredentials=" + canSaveCredentials +
                        ", passwordMissing=" + passwordMissing +
                        ", formId=" + formId +
                        ", botId=" + botId +
                        ", title=" + title +
                        ", description=" + description +
                        ", photo=" + photo +
                        ", invoice=" + invoice +
                        ", providerId=" + providerId +
                        ", url=" + url +
                        ", nativeProvider=" + nativeProvider +
                        ", nativeParams=" + nativeParams +
                        ", additionalMethods=" + additionalMethods +
                        ", savedInfo=" + savedInfo +
                        ", savedCredentials=" + savedCredentials +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ValidatedRequestedInfo2 extends NsPayments.ValidatedRequestedInfo {
            public static final int ID = 0xd1451883;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.validatedRequestedInfo";
            public int flags;
            public String id = null;
            public TLVector<ApiScheme.ShippingOption> shippingOptions = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = id != null ? (flags | 1) : (flags & ~1);
                flags = shippingOptions != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && id != null) {
                    outputStream.writeTLString(id);
                }

                if ((flags & 2) != 0 && shippingOptions != null) {
                    shippingOptions.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    id = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    shippingOptions = new TLVector<ApiScheme.ShippingOption>(ApiScheme.ShippingOption.class);
                    shippingOptions.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ValidatedRequestedInfo{" +
                        "flags=" + flags +
                        ", id=" + id +
                        ", shippingOptions=" + shippingOptions +
                        '}';

            }
        }


        public static class PaymentResult2 extends NsPayments.PaymentResult {
            public static final int ID = 0x4e5f810d;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.paymentResult";
            public ApiScheme.Updates updates;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                updates.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                updates = ApiScheme.Updates.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "PaymentResult{" +
                        "updates=" + updates +
                        '}';

            }
        }


        public static class PaymentVerificationNeeded extends NsPayments.PaymentResult {
            public static final int ID = 0xd8411139;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.paymentVerificationNeeded";
            public String url;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(url);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                url = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "PaymentVerificationNeeded{" +
                        "url=" + url +
                        '}';

            }
        }


        public static class PaymentReceipt2 extends NsPayments.PaymentReceipt {
            public static final int ID = 0x70c4fe03;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.paymentReceipt";
            public int flags;
            public int date;
            public long botId;
            public long providerId;
            public String title;
            public String description;
            public ApiScheme.WebDocument photo = null;
            public ApiScheme.Invoice invoice;
            public ApiScheme.PaymentRequestedInfo info = null;
            public ApiScheme.ShippingOption shipping = null;
            public Long tipAmount = null;
            public String currency;
            public long totalAmount;
            public String credentialsTitle;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = photo != null ? (flags | 4) : (flags & ~4);
                flags = info != null ? (flags | 1) : (flags & ~1);
                flags = shipping != null ? (flags | 2) : (flags & ~2);
                flags = tipAmount != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                outputStream.writeInt(date);
                outputStream.writeLong(botId);
                outputStream.writeLong(providerId);
                outputStream.writeTLString(title);
                outputStream.writeTLString(description);
                if ((flags & 4) != 0 && photo != null) {
                    photo.write(outputStream);
                }

                invoice.write(outputStream);

                if ((flags & 1) != 0 && info != null) {
                    info.write(outputStream);
                }

                if ((flags & 2) != 0 && shipping != null) {
                    shipping.write(outputStream);
                }

                if ((flags & 8) != 0 && tipAmount != null) {
                    outputStream.writeLong(tipAmount);
                }

                outputStream.writeTLString(currency);
                outputStream.writeLong(totalAmount);
                outputStream.writeTLString(credentialsTitle);
                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                date = inputStream.readInt();
                botId = inputStream.readLong();
                providerId = inputStream.readLong();
                title = inputStream.readTLString();
                description = inputStream.readTLString();
                if ((flags & 4) != 0) {
                    photo = ApiScheme.WebDocument.readObject(inputStream);
                }

                invoice = ApiScheme.Invoice.readObject(inputStream);
                if ((flags & 1) != 0) {
                    info = ApiScheme.PaymentRequestedInfo.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    shipping = ApiScheme.ShippingOption.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    tipAmount = inputStream.readLong();
                }

                currency = inputStream.readTLString();
                totalAmount = inputStream.readLong();
                credentialsTitle = inputStream.readTLString();
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PaymentReceipt{" +
                        "flags=" + flags +
                        ", date=" + date +
                        ", botId=" + botId +
                        ", providerId=" + providerId +
                        ", title=" + title +
                        ", description=" + description +
                        ", photo=" + photo +
                        ", invoice=" + invoice +
                        ", info=" + info +
                        ", shipping=" + shipping +
                        ", tipAmount=" + tipAmount +
                        ", currency=" + currency +
                        ", totalAmount=" + totalAmount +
                        ", credentialsTitle=" + credentialsTitle +
                        ", users=" + users +
                        '}';

            }
        }


        public static class SavedInfo2 extends NsPayments.SavedInfo {
            public static final int ID = 0xfb8fe43c;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.savedInfo";
            public int flags;
            public True hasSavedCredentials = null;
            public ApiScheme.PaymentRequestedInfo savedInfo = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = hasSavedCredentials != null ? (flags | 2) : (flags & ~2);
                flags = savedInfo != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && hasSavedCredentials != null) {
                    hasSavedCredentials.isBareType = true;
                    hasSavedCredentials.write(outputStream);
                }

                if ((flags & 1) != 0 && savedInfo != null) {
                    savedInfo.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    hasSavedCredentials = new True();
                    hasSavedCredentials.isBareType = true;
                    hasSavedCredentials.read(inputStream);
                }

                if ((flags & 1) != 0) {
                    savedInfo = ApiScheme.PaymentRequestedInfo.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "SavedInfo{" +
                        "flags=" + flags +
                        ", hasSavedCredentials=" + hasSavedCredentials +
                        ", savedInfo=" + savedInfo +
                        '}';

            }
        }


        public static class BankCardData2 extends NsPayments.BankCardData {
            public static final int ID = 0x3e24e573;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.bankCardData";
            public String title;
            public TLVector<ApiScheme.BankCardOpenUrl> openUrls;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(title);
                openUrls.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                title = inputStream.readTLString();
                openUrls = new TLVector<ApiScheme.BankCardOpenUrl>(ApiScheme.BankCardOpenUrl.class);
                openUrls.read(inputStream);


            }

            @Override
            public String toString() {
                return "BankCardData{" +
                        "title=" + title +
                        ", openUrls=" + openUrls +
                        '}';

            }
        }


        public static class ExportedInvoice2 extends NsPayments.ExportedInvoice {
            public static final int ID = 0xaed0cbd9;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "payments.exportedInvoice";
            public String url;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(url);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                url = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ExportedInvoice{" +
                        "url=" + url +
                        '}';

            }
        }


        public static class GetPaymentForm extends TLMethod<NsPayments.PaymentForm> {
            public static final int ID = 0x37148dbb;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.getPaymentForm";
            public int flags;
            public ApiScheme.InputInvoice invoice;
            public ApiScheme.DataJSON themeParams = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = themeParams != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                invoice.write(outputStream);

                if ((flags & 1) != 0 && themeParams != null) {
                    themeParams.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                invoice = ApiScheme.InputInvoice.readObject(inputStream);
                if ((flags & 1) != 0) {
                    themeParams = ApiScheme.DataJSON.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "GetPaymentForm{" +
                        "flags=" + flags +
                        ", invoice=" + invoice +
                        ", themeParams=" + themeParams +
                        '}';

            }
        }


        public static class GetPaymentReceipt extends TLMethod<NsPayments.PaymentReceipt> {
            public static final int ID = 0x2478d1cc;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.getPaymentReceipt";
            public ApiScheme.InputPeer peer;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetPaymentReceipt{" +
                        "peer=" + peer +
                        ", msgId=" + msgId +
                        '}';

            }
        }


        public static class ValidateRequestedInfo extends TLMethod<NsPayments.ValidatedRequestedInfo> {
            public static final int ID = 0xb6c8f12b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.validateRequestedInfo";
            public int flags;
            public True save = null;
            public ApiScheme.InputInvoice invoice;
            public ApiScheme.PaymentRequestedInfo info;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = save != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && save != null) {
                    save.isBareType = true;
                    save.write(outputStream);
                }

                invoice.write(outputStream);

                info.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    save = new True();
                    save.isBareType = true;
                    save.read(inputStream);
                }

                invoice = ApiScheme.InputInvoice.readObject(inputStream);
                info = ApiScheme.PaymentRequestedInfo.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ValidateRequestedInfo{" +
                        "flags=" + flags +
                        ", save=" + save +
                        ", invoice=" + invoice +
                        ", info=" + info +
                        '}';

            }
        }


        public static class SendPaymentForm extends TLMethod<NsPayments.PaymentResult> {
            public static final int ID = 0x2d03522f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.sendPaymentForm";
            public int flags;
            public long formId;
            public ApiScheme.InputInvoice invoice;
            public String requestedInfoId = null;
            public String shippingOptionId = null;
            public ApiScheme.InputPaymentCredentials credentials;
            public Long tipAmount = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = requestedInfoId != null ? (flags | 1) : (flags & ~1);
                flags = shippingOptionId != null ? (flags | 2) : (flags & ~2);
                flags = tipAmount != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                outputStream.writeLong(formId);
                invoice.write(outputStream);

                if ((flags & 1) != 0 && requestedInfoId != null) {
                    outputStream.writeTLString(requestedInfoId);
                }

                if ((flags & 2) != 0 && shippingOptionId != null) {
                    outputStream.writeTLString(shippingOptionId);
                }

                credentials.write(outputStream);

                if ((flags & 4) != 0 && tipAmount != null) {
                    outputStream.writeLong(tipAmount);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                formId = inputStream.readLong();
                invoice = ApiScheme.InputInvoice.readObject(inputStream);
                if ((flags & 1) != 0) {
                    requestedInfoId = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    shippingOptionId = inputStream.readTLString();
                }

                credentials = ApiScheme.InputPaymentCredentials.readObject(inputStream);
                if ((flags & 4) != 0) {
                    tipAmount = inputStream.readLong();
                }


            }

            @Override
            public String toString() {
                return "SendPaymentForm{" +
                        "flags=" + flags +
                        ", formId=" + formId +
                        ", invoice=" + invoice +
                        ", requestedInfoId=" + requestedInfoId +
                        ", shippingOptionId=" + shippingOptionId +
                        ", credentials=" + credentials +
                        ", tipAmount=" + tipAmount +
                        '}';

            }
        }


        public static class GetSavedInfo extends TLMethod<NsPayments.SavedInfo> {
            public static final int ID = 0x227d824b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.getSavedInfo";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetSavedInfo{" +
                        '}';

            }
        }


        public static class ClearSavedInfo extends TLMethod<Bool> {
            public static final int ID = 0xd83d70c1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.clearSavedInfo";
            public int flags;
            public True credentials = null;
            public True info = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = credentials != null ? (flags | 1) : (flags & ~1);
                flags = info != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && credentials != null) {
                    credentials.isBareType = true;
                    credentials.write(outputStream);
                }

                if ((flags & 2) != 0 && info != null) {
                    info.isBareType = true;
                    info.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    credentials = new True();
                    credentials.isBareType = true;
                    credentials.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    info = new True();
                    info.isBareType = true;
                    info.read(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ClearSavedInfo{" +
                        "flags=" + flags +
                        ", credentials=" + credentials +
                        ", info=" + info +
                        '}';

            }
        }


        public static class GetBankCardData extends TLMethod<NsPayments.BankCardData> {
            public static final int ID = 0x2e79d779;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.getBankCardData";
            public String number;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(number);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                number = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetBankCardData{" +
                        "number=" + number +
                        '}';

            }
        }


        public static class ExportInvoice extends TLMethod<NsPayments.ExportedInvoice> {
            public static final int ID = 0xf91b065;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.exportInvoice";
            public ApiScheme.InputMedia invoiceMedia;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                invoiceMedia.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                invoiceMedia = ApiScheme.InputMedia.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ExportInvoice{" +
                        "invoiceMedia=" + invoiceMedia +
                        '}';

            }
        }


        public static class AssignAppStoreTransaction extends TLMethod<Updates> {
            public static final int ID = 0x80ed747d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.assignAppStoreTransaction";
            public byte[] receipt;
            public ApiScheme.InputStorePaymentPurpose purpose;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLBytes(receipt);
                purpose.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                receipt = inputStream.readTLBytes();
                purpose = ApiScheme.InputStorePaymentPurpose.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AssignAppStoreTransaction{" +
                        "receipt=" + receipt +
                        ", purpose=" + purpose +
                        '}';

            }
        }


        public static class AssignPlayMarketTransaction extends TLMethod<Updates> {
            public static final int ID = 0xdffd50d3;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.assignPlayMarketTransaction";
            public ApiScheme.DataJSON receipt;
            public ApiScheme.InputStorePaymentPurpose purpose;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                receipt.write(outputStream);

                purpose.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                receipt = ApiScheme.DataJSON.readObject(inputStream);
                purpose = ApiScheme.InputStorePaymentPurpose.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AssignPlayMarketTransaction{" +
                        "receipt=" + receipt +
                        ", purpose=" + purpose +
                        '}';

            }
        }


        public static class CanPurchasePremium extends TLMethod<Bool> {
            public static final int ID = 0x9fc19eb6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.canPurchasePremium";
            public ApiScheme.InputStorePaymentPurpose purpose;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                purpose.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                purpose = ApiScheme.InputStorePaymentPurpose.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "CanPurchasePremium{" +
                        "purpose=" + purpose +
                        '}';

            }
        }


        public static class RequestRecurringPayment extends TLMethod<Updates> {
            public static final int ID = 0x146e958d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "payments.requestRecurringPayment";
            public ApiScheme.InputUser userId;
            public String recurringInitCharge;
            public ApiScheme.InputMedia invoiceMedia;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                outputStream.writeTLString(recurringInitCharge);
                invoiceMedia.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                recurringInitCharge = inputStream.readTLString();
                invoiceMedia = ApiScheme.InputMedia.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "RequestRecurringPayment{" +
                        "userId=" + userId +
                        ", recurringInitCharge=" + recurringInitCharge +
                        ", invoiceMedia=" + invoiceMedia +
                        '}';

            }
        }


    }

    public static abstract class NsPhone {
        public static abstract class PhoneCall extends TLObject {
            public static PhoneCall readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.PhoneCall a = null;
                if (id == NsPhone.PhoneCall2.ID) {
                    a = new NsPhone.PhoneCall2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class GroupCall extends TLObject {
            public static GroupCall readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.GroupCall a = null;
                if (id == NsPhone.GroupCall2.ID) {
                    a = new NsPhone.GroupCall2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class GroupParticipants extends TLObject {
            public static GroupParticipants readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.GroupParticipants a = null;
                if (id == NsPhone.GroupParticipants2.ID) {
                    a = new NsPhone.GroupParticipants2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class JoinAsPeers extends TLObject {
            public static JoinAsPeers readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.JoinAsPeers a = null;
                if (id == NsPhone.JoinAsPeers2.ID) {
                    a = new NsPhone.JoinAsPeers2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class ExportedGroupCallInvite extends TLObject {
            public static ExportedGroupCallInvite readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.ExportedGroupCallInvite a = null;
                if (id == NsPhone.ExportedGroupCallInvite2.ID) {
                    a = new NsPhone.ExportedGroupCallInvite2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class GroupCallStreamChannels extends TLObject {
            public static GroupCallStreamChannels readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.GroupCallStreamChannels a = null;
                if (id == NsPhone.GroupCallStreamChannels2.ID) {
                    a = new NsPhone.GroupCallStreamChannels2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class GroupCallStreamRtmpUrl extends TLObject {
            public static GroupCallStreamRtmpUrl readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsPhone.GroupCallStreamRtmpUrl a = null;
                if (id == NsPhone.GroupCallStreamRtmpUrl2.ID) {
                    a = new NsPhone.GroupCallStreamRtmpUrl2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class PhoneCall2 extends NsPhone.PhoneCall {
            public static final int ID = 0xec82e140;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.phoneCall";
            public ApiScheme.PhoneCall phoneCall;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                phoneCall.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                phoneCall = ApiScheme.PhoneCall.readObject(inputStream);
                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "PhoneCall{" +
                        "phoneCall=" + phoneCall +
                        ", users=" + users +
                        '}';

            }
        }


        public static class GroupCall2 extends NsPhone.GroupCall {
            public static final int ID = 0x9e727aad;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.groupCall";
            public ApiScheme.GroupCall call;
            public TLVector<ApiScheme.GroupCallParticipant> participants;
            public String participantsNextOffset;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                participants.write(outputStream);

                outputStream.writeTLString(participantsNextOffset);
                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.GroupCall.readObject(inputStream);
                participants = new TLVector<ApiScheme.GroupCallParticipant>(ApiScheme.GroupCallParticipant.class);
                participants.read(inputStream);

                participantsNextOffset = inputStream.readTLString();
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "GroupCall{" +
                        "call=" + call +
                        ", participants=" + participants +
                        ", participantsNextOffset=" + participantsNextOffset +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class GroupParticipants2 extends NsPhone.GroupParticipants {
            public static final int ID = 0xf47751b6;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.groupParticipants";
            public int count;
            public TLVector<ApiScheme.GroupCallParticipant> participants;
            public String nextOffset;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;
            public int version;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(count);
                participants.write(outputStream);

                outputStream.writeTLString(nextOffset);
                chats.write(outputStream);

                users.write(outputStream);

                outputStream.writeInt(version);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                count = inputStream.readInt();
                participants = new TLVector<ApiScheme.GroupCallParticipant>(ApiScheme.GroupCallParticipant.class);
                participants.read(inputStream);

                nextOffset = inputStream.readTLString();
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);

                version = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GroupParticipants{" +
                        "count=" + count +
                        ", participants=" + participants +
                        ", nextOffset=" + nextOffset +
                        ", chats=" + chats +
                        ", users=" + users +
                        ", version=" + version +
                        '}';

            }
        }


        public static class JoinAsPeers2 extends NsPhone.JoinAsPeers {
            public static final int ID = 0xafe5623f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.joinAsPeers";
            public TLVector<ApiScheme.Peer> peers;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peers.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peers = new TLVector<ApiScheme.Peer>(ApiScheme.Peer.class);
                peers.read(inputStream);

                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "JoinAsPeers{" +
                        "peers=" + peers +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class ExportedGroupCallInvite2 extends NsPhone.ExportedGroupCallInvite {
            public static final int ID = 0x204bd158;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.exportedGroupCallInvite";
            public String link;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(link);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                link = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ExportedGroupCallInvite{" +
                        "link=" + link +
                        '}';

            }
        }


        public static class GroupCallStreamChannels2 extends NsPhone.GroupCallStreamChannels {
            public static final int ID = 0xd0e482b2;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.groupCallStreamChannels";
            public TLVector<ApiScheme.GroupCallStreamChannel> channels;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channels.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channels = new TLVector<ApiScheme.GroupCallStreamChannel>(ApiScheme.GroupCallStreamChannel.class);
                channels.read(inputStream);


            }

            @Override
            public String toString() {
                return "GroupCallStreamChannels{" +
                        "channels=" + channels +
                        '}';

            }
        }


        public static class GroupCallStreamRtmpUrl2 extends NsPhone.GroupCallStreamRtmpUrl {
            public static final int ID = 0x2dbf3432;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "phone.groupCallStreamRtmpUrl";
            public String url;
            public String key;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(url);
                outputStream.writeTLString(key);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                url = inputStream.readTLString();
                key = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GroupCallStreamRtmpUrl{" +
                        "url=" + url +
                        ", key=" + key +
                        '}';

            }
        }


        public static class GetCallConfig extends TLMethod<DataJSON> {
            public static final int ID = 0x55451fa9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getCallConfig";


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {

            }

            @Override
            public String toString() {
                return "GetCallConfig{" +
                        '}';

            }
        }


        public static class RequestCall extends TLMethod<NsPhone.PhoneCall> {
            public static final int ID = 0x42ff96ed;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.requestCall";
            public int flags;
            public True video = null;
            public ApiScheme.InputUser userId;
            public int randomId;
            public byte[] gAHash;
            public ApiScheme.PhoneCallProtocol protocol;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = video != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && video != null) {
                    video.isBareType = true;
                    video.write(outputStream);
                }

                userId.write(outputStream);

                outputStream.writeInt(randomId);
                outputStream.writeTLBytes(gAHash);
                protocol.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    video = new True();
                    video.isBareType = true;
                    video.read(inputStream);
                }

                userId = ApiScheme.InputUser.readObject(inputStream);
                randomId = inputStream.readInt();
                gAHash = inputStream.readTLBytes();
                protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "RequestCall{" +
                        "flags=" + flags +
                        ", video=" + video +
                        ", userId=" + userId +
                        ", randomId=" + randomId +
                        ", gAHash=" + gAHash +
                        ", protocol=" + protocol +
                        '}';

            }
        }


        public static class AcceptCall extends TLMethod<NsPhone.PhoneCall> {
            public static final int ID = 0x3bd2b4a0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.acceptCall";
            public ApiScheme.InputPhoneCall peer;
            public byte[] gB;
            public ApiScheme.PhoneCallProtocol protocol;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLBytes(gB);
                protocol.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                gB = inputStream.readTLBytes();
                protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AcceptCall{" +
                        "peer=" + peer +
                        ", gB=" + gB +
                        ", protocol=" + protocol +
                        '}';

            }
        }


        public static class ConfirmCall extends TLMethod<NsPhone.PhoneCall> {
            public static final int ID = 0x2efe1722;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.confirmCall";
            public ApiScheme.InputPhoneCall peer;
            public byte[] gA;
            public long keyFingerprint;
            public ApiScheme.PhoneCallProtocol protocol;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLBytes(gA);
                outputStream.writeLong(keyFingerprint);
                protocol.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                gA = inputStream.readTLBytes();
                keyFingerprint = inputStream.readLong();
                protocol = ApiScheme.PhoneCallProtocol.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ConfirmCall{" +
                        "peer=" + peer +
                        ", gA=" + gA +
                        ", keyFingerprint=" + keyFingerprint +
                        ", protocol=" + protocol +
                        '}';

            }
        }


        public static class ReceivedCall extends TLMethod<Bool> {
            public static final int ID = 0x17d54f61;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.receivedCall";
            public ApiScheme.InputPhoneCall peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ReceivedCall{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class DiscardCall extends TLMethod<Updates> {
            public static final int ID = 0xb2cbc1c0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.discardCall";
            public int flags;
            public True video = null;
            public ApiScheme.InputPhoneCall peer;
            public int duration;
            public ApiScheme.PhoneCallDiscardReason reason;
            public long connectionId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = video != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && video != null) {
                    video.isBareType = true;
                    video.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(duration);
                reason.write(outputStream);

                outputStream.writeLong(connectionId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    video = new True();
                    video.isBareType = true;
                    video.read(inputStream);
                }

                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                duration = inputStream.readInt();
                reason = ApiScheme.PhoneCallDiscardReason.readObject(inputStream);
                connectionId = inputStream.readLong();

            }

            @Override
            public String toString() {
                return "DiscardCall{" +
                        "flags=" + flags +
                        ", video=" + video +
                        ", peer=" + peer +
                        ", duration=" + duration +
                        ", reason=" + reason +
                        ", connectionId=" + connectionId +
                        '}';

            }
        }


        public static class SetCallRating extends TLMethod<Updates> {
            public static final int ID = 0x59ead627;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.setCallRating";
            public int flags;
            public True userInitiative = null;
            public ApiScheme.InputPhoneCall peer;
            public int rating;
            public String comment;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = userInitiative != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && userInitiative != null) {
                    userInitiative.isBareType = true;
                    userInitiative.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(rating);
                outputStream.writeTLString(comment);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    userInitiative = new True();
                    userInitiative.isBareType = true;
                    userInitiative.read(inputStream);
                }

                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                rating = inputStream.readInt();
                comment = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SetCallRating{" +
                        "flags=" + flags +
                        ", userInitiative=" + userInitiative +
                        ", peer=" + peer +
                        ", rating=" + rating +
                        ", comment=" + comment +
                        '}';

            }
        }


        public static class SaveCallDebug extends TLMethod<Bool> {
            public static final int ID = 0x277add7e;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.saveCallDebug";
            public ApiScheme.InputPhoneCall peer;
            public ApiScheme.DataJSON debug;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                debug.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                debug = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveCallDebug{" +
                        "peer=" + peer +
                        ", debug=" + debug +
                        '}';

            }
        }


        public static class SendSignalingData extends TLMethod<Bool> {
            public static final int ID = 0xff7a9383;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.sendSignalingData";
            public ApiScheme.InputPhoneCall peer;
            public byte[] data;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                outputStream.writeTLBytes(data);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                data = inputStream.readTLBytes();

            }

            @Override
            public String toString() {
                return "SendSignalingData{" +
                        "peer=" + peer +
                        ", data=" + data +
                        '}';

            }
        }


        public static class CreateGroupCall extends TLMethod<Updates> {
            public static final int ID = 0x48cdc6d8;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.createGroupCall";
            public int flags;
            public True rtmpStream = null;
            public ApiScheme.InputPeer peer;
            public int randomId;
            public String title = null;
            public Integer scheduleDate = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = rtmpStream != null ? (flags | 4) : (flags & ~4);
                flags = title != null ? (flags | 1) : (flags & ~1);
                flags = scheduleDate != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 4) != 0 && rtmpStream != null) {
                    rtmpStream.isBareType = true;
                    rtmpStream.write(outputStream);
                }

                peer.write(outputStream);

                outputStream.writeInt(randomId);
                if ((flags & 1) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }

                if ((flags & 2) != 0 && scheduleDate != null) {
                    outputStream.writeInt(scheduleDate);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 4) != 0) {
                    rtmpStream = new True();
                    rtmpStream.isBareType = true;
                    rtmpStream.read(inputStream);
                }

                peer = ApiScheme.InputPeer.readObject(inputStream);
                randomId = inputStream.readInt();
                if ((flags & 1) != 0) {
                    title = inputStream.readTLString();
                }

                if ((flags & 2) != 0) {
                    scheduleDate = inputStream.readInt();
                }


            }

            @Override
            public String toString() {
                return "CreateGroupCall{" +
                        "flags=" + flags +
                        ", rtmpStream=" + rtmpStream +
                        ", peer=" + peer +
                        ", randomId=" + randomId +
                        ", title=" + title +
                        ", scheduleDate=" + scheduleDate +
                        '}';

            }
        }


        public static class JoinGroupCall extends TLMethod<Updates> {
            public static final int ID = 0xb132ff7b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.joinGroupCall";
            public int flags;
            public True muted = null;
            public True videoStopped = null;
            public ApiScheme.InputGroupCall call;
            public ApiScheme.InputPeer joinAs;
            public String inviteHash = null;
            public ApiScheme.DataJSON params;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = muted != null ? (flags | 1) : (flags & ~1);
                flags = videoStopped != null ? (flags | 4) : (flags & ~4);
                flags = inviteHash != null ? (flags | 2) : (flags & ~2);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && muted != null) {
                    muted.isBareType = true;
                    muted.write(outputStream);
                }

                if ((flags & 4) != 0 && videoStopped != null) {
                    videoStopped.isBareType = true;
                    videoStopped.write(outputStream);
                }

                call.write(outputStream);

                joinAs.write(outputStream);

                if ((flags & 2) != 0 && inviteHash != null) {
                    outputStream.writeTLString(inviteHash);
                }

                params.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    muted = new True();
                    muted.isBareType = true;
                    muted.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    videoStopped = new True();
                    videoStopped.isBareType = true;
                    videoStopped.read(inputStream);
                }

                call = ApiScheme.InputGroupCall.readObject(inputStream);
                joinAs = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 2) != 0) {
                    inviteHash = inputStream.readTLString();
                }

                params = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "JoinGroupCall{" +
                        "flags=" + flags +
                        ", muted=" + muted +
                        ", videoStopped=" + videoStopped +
                        ", call=" + call +
                        ", joinAs=" + joinAs +
                        ", inviteHash=" + inviteHash +
                        ", params=" + params +
                        '}';

            }
        }


        public static class LeaveGroupCall extends TLMethod<Updates> {
            public static final int ID = 0x500377f9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.leaveGroupCall";
            public ApiScheme.InputGroupCall call;
            public int source;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                outputStream.writeInt(source);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                source = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "LeaveGroupCall{" +
                        "call=" + call +
                        ", source=" + source +
                        '}';

            }
        }


        public static class InviteToGroupCall extends TLMethod<Updates> {
            public static final int ID = 0x7b393160;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.inviteToGroupCall";
            public ApiScheme.InputGroupCall call;
            public TLVector<ApiScheme.InputUser> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                users = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "InviteToGroupCall{" +
                        "call=" + call +
                        ", users=" + users +
                        '}';

            }
        }


        public static class DiscardGroupCall extends TLMethod<Updates> {
            public static final int ID = 0x7a777135;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.discardGroupCall";
            public ApiScheme.InputGroupCall call;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "DiscardGroupCall{" +
                        "call=" + call +
                        '}';

            }
        }


        public static class ToggleGroupCallSettings extends TLMethod<Updates> {
            public static final int ID = 0x74bbb43d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.toggleGroupCallSettings";
            public int flags;
            public True resetInviteHash = null;
            public ApiScheme.InputGroupCall call;
            public ApiScheme.Bool joinMuted = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = resetInviteHash != null ? (flags | 2) : (flags & ~2);
                flags = joinMuted != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 2) != 0 && resetInviteHash != null) {
                    resetInviteHash.isBareType = true;
                    resetInviteHash.write(outputStream);
                }

                call.write(outputStream);

                if ((flags & 1) != 0 && joinMuted != null) {
                    joinMuted.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 2) != 0) {
                    resetInviteHash = new True();
                    resetInviteHash.isBareType = true;
                    resetInviteHash.read(inputStream);
                }

                call = ApiScheme.InputGroupCall.readObject(inputStream);
                if ((flags & 1) != 0) {
                    joinMuted = ApiScheme.Bool.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ToggleGroupCallSettings{" +
                        "flags=" + flags +
                        ", resetInviteHash=" + resetInviteHash +
                        ", call=" + call +
                        ", joinMuted=" + joinMuted +
                        '}';

            }
        }


        public static class GetGroupCall extends TLMethod<NsPhone.GroupCall> {
            public static final int ID = 0x41845db;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getGroupCall";
            public ApiScheme.InputGroupCall call;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetGroupCall{" +
                        "call=" + call +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetGroupParticipants extends TLMethod<NsPhone.GroupParticipants> {
            public static final int ID = 0xc558d8ab;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getGroupParticipants";
            public ApiScheme.InputGroupCall call;
            public TLVector<ApiScheme.InputPeer> ids;
            public TLVector<TLInt> sources;
            public String offset;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                ids.write(outputStream);

                sources.isBareTypeItem = true;
                sources.write(outputStream);

                outputStream.writeTLString(offset);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                ids = new TLVector<ApiScheme.InputPeer>(ApiScheme.InputPeer.class);
                ids.read(inputStream);

                sources = new TLVector<TLInt>(TLInt.class);
                sources.isBareTypeItem = true;
                sources.read(inputStream);

                offset = inputStream.readTLString();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetGroupParticipants{" +
                        "call=" + call +
                        ", ids=" + ids +
                        ", sources=" + sources +
                        ", offset=" + offset +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class CheckGroupCall extends TLMethod<TLVector<TLInt>> {
            public static final int ID = 0xb59cf977;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.checkGroupCall";
            public ApiScheme.InputGroupCall call;
            public TLVector<TLInt> sources;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                sources.isBareTypeItem = true;
                sources.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                sources = new TLVector<TLInt>(TLInt.class);
                sources.isBareTypeItem = true;
                sources.read(inputStream);


            }

            @Override
            public String toString() {
                return "CheckGroupCall{" +
                        "call=" + call +
                        ", sources=" + sources +
                        '}';

            }
        }


        public static class ToggleGroupCallRecord extends TLMethod<Updates> {
            public static final int ID = 0xf128c708;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.toggleGroupCallRecord";
            public int flags;
            public True start = null;
            public True video = null;
            public ApiScheme.InputGroupCall call;
            public String title = null;
            public ApiScheme.Bool videoPortrait = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = start != null ? (flags | 1) : (flags & ~1);
                flags = video != null ? (flags | 4) : (flags & ~4);
                flags = title != null ? (flags | 2) : (flags & ~2);
                flags = videoPortrait != null ? (flags | 4) : (flags & ~4);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && start != null) {
                    start.isBareType = true;
                    start.write(outputStream);
                }

                if ((flags & 4) != 0 && video != null) {
                    video.isBareType = true;
                    video.write(outputStream);
                }

                call.write(outputStream);

                if ((flags & 2) != 0 && title != null) {
                    outputStream.writeTLString(title);
                }

                if ((flags & 4) != 0 && videoPortrait != null) {
                    videoPortrait.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    start = new True();
                    start.isBareType = true;
                    start.read(inputStream);
                }

                if ((flags & 4) != 0) {
                    video = new True();
                    video.isBareType = true;
                    video.read(inputStream);
                }

                call = ApiScheme.InputGroupCall.readObject(inputStream);
                if ((flags & 2) != 0) {
                    title = inputStream.readTLString();
                }

                if ((flags & 4) != 0) {
                    videoPortrait = ApiScheme.Bool.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "ToggleGroupCallRecord{" +
                        "flags=" + flags +
                        ", start=" + start +
                        ", video=" + video +
                        ", call=" + call +
                        ", title=" + title +
                        ", videoPortrait=" + videoPortrait +
                        '}';

            }
        }


        public static class EditGroupCallParticipant extends TLMethod<Updates> {
            public static final int ID = 0xa5273abf;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.editGroupCallParticipant";
            public int flags;
            public ApiScheme.InputGroupCall call;
            public ApiScheme.InputPeer participant;
            public ApiScheme.Bool muted = null;
            public Integer volume = null;
            public ApiScheme.Bool raiseHand = null;
            public ApiScheme.Bool videoStopped = null;
            public ApiScheme.Bool videoPaused = null;
            public ApiScheme.Bool presentationPaused = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = muted != null ? (flags | 1) : (flags & ~1);
                flags = volume != null ? (flags | 2) : (flags & ~2);
                flags = raiseHand != null ? (flags | 4) : (flags & ~4);
                flags = videoStopped != null ? (flags | 8) : (flags & ~8);
                flags = videoPaused != null ? (flags | 16) : (flags & ~16);
                flags = presentationPaused != null ? (flags | 32) : (flags & ~32);
                outputStream.writeInt(flags);
                call.write(outputStream);

                participant.write(outputStream);

                if ((flags & 1) != 0 && muted != null) {
                    muted.write(outputStream);
                }

                if ((flags & 2) != 0 && volume != null) {
                    outputStream.writeInt(volume);
                }

                if ((flags & 4) != 0 && raiseHand != null) {
                    raiseHand.write(outputStream);
                }

                if ((flags & 8) != 0 && videoStopped != null) {
                    videoStopped.write(outputStream);
                }

                if ((flags & 16) != 0 && videoPaused != null) {
                    videoPaused.write(outputStream);
                }

                if ((flags & 32) != 0 && presentationPaused != null) {
                    presentationPaused.write(outputStream);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                participant = ApiScheme.InputPeer.readObject(inputStream);
                if ((flags & 1) != 0) {
                    muted = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 2) != 0) {
                    volume = inputStream.readInt();
                }

                if ((flags & 4) != 0) {
                    raiseHand = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 8) != 0) {
                    videoStopped = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 16) != 0) {
                    videoPaused = ApiScheme.Bool.readObject(inputStream);
                }

                if ((flags & 32) != 0) {
                    presentationPaused = ApiScheme.Bool.readObject(inputStream);
                }


            }

            @Override
            public String toString() {
                return "EditGroupCallParticipant{" +
                        "flags=" + flags +
                        ", call=" + call +
                        ", participant=" + participant +
                        ", muted=" + muted +
                        ", volume=" + volume +
                        ", raiseHand=" + raiseHand +
                        ", videoStopped=" + videoStopped +
                        ", videoPaused=" + videoPaused +
                        ", presentationPaused=" + presentationPaused +
                        '}';

            }
        }


        public static class EditGroupCallTitle extends TLMethod<Updates> {
            public static final int ID = 0x1ca6ac0a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.editGroupCallTitle";
            public ApiScheme.InputGroupCall call;
            public String title;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                outputStream.writeTLString(title);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                title = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "EditGroupCallTitle{" +
                        "call=" + call +
                        ", title=" + title +
                        '}';

            }
        }


        public static class GetGroupCallJoinAs extends TLMethod<NsPhone.JoinAsPeers> {
            public static final int ID = 0xef7c213a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getGroupCallJoinAs";
            public ApiScheme.InputPeer peer;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetGroupCallJoinAs{" +
                        "peer=" + peer +
                        '}';

            }
        }


        public static class ExportGroupCallInvite extends TLMethod<NsPhone.ExportedGroupCallInvite> {
            public static final int ID = 0xe6aa647f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.exportGroupCallInvite";
            public int flags;
            public True canSelfUnmute = null;
            public ApiScheme.InputGroupCall call;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = canSelfUnmute != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && canSelfUnmute != null) {
                    canSelfUnmute.isBareType = true;
                    canSelfUnmute.write(outputStream);
                }

                call.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    canSelfUnmute = new True();
                    canSelfUnmute.isBareType = true;
                    canSelfUnmute.read(inputStream);
                }

                call = ApiScheme.InputGroupCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ExportGroupCallInvite{" +
                        "flags=" + flags +
                        ", canSelfUnmute=" + canSelfUnmute +
                        ", call=" + call +
                        '}';

            }
        }


        public static class ToggleGroupCallStartSubscription extends TLMethod<Updates> {
            public static final int ID = 0x219c34e6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.toggleGroupCallStartSubscription";
            public ApiScheme.InputGroupCall call;
            public ApiScheme.Bool subscribed;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                subscribed.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                subscribed = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "ToggleGroupCallStartSubscription{" +
                        "call=" + call +
                        ", subscribed=" + subscribed +
                        '}';

            }
        }


        public static class StartScheduledGroupCall extends TLMethod<Updates> {
            public static final int ID = 0x5680e342;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.startScheduledGroupCall";
            public ApiScheme.InputGroupCall call;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "StartScheduledGroupCall{" +
                        "call=" + call +
                        '}';

            }
        }


        public static class SaveDefaultGroupCallJoinAs extends TLMethod<Bool> {
            public static final int ID = 0x575e1f8c;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.saveDefaultGroupCallJoinAs";
            public ApiScheme.InputPeer peer;
            public ApiScheme.InputPeer joinAs;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                joinAs.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                joinAs = ApiScheme.InputPeer.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveDefaultGroupCallJoinAs{" +
                        "peer=" + peer +
                        ", joinAs=" + joinAs +
                        '}';

            }
        }


        public static class JoinGroupCallPresentation extends TLMethod<Updates> {
            public static final int ID = 0xcbea6bc4;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.joinGroupCallPresentation";
            public ApiScheme.InputGroupCall call;
            public ApiScheme.DataJSON params;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);

                params.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);
                params = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "JoinGroupCallPresentation{" +
                        "call=" + call +
                        ", params=" + params +
                        '}';

            }
        }


        public static class LeaveGroupCallPresentation extends TLMethod<Updates> {
            public static final int ID = 0x1c50d144;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.leaveGroupCallPresentation";
            public ApiScheme.InputGroupCall call;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "LeaveGroupCallPresentation{" +
                        "call=" + call +
                        '}';

            }
        }


        public static class GetGroupCallStreamChannels extends TLMethod<NsPhone.GroupCallStreamChannels> {
            public static final int ID = 0x1ab21940;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getGroupCallStreamChannels";
            public ApiScheme.InputGroupCall call;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                call.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                call = ApiScheme.InputGroupCall.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetGroupCallStreamChannels{" +
                        "call=" + call +
                        '}';

            }
        }


        public static class GetGroupCallStreamRtmpUrl extends TLMethod<NsPhone.GroupCallStreamRtmpUrl> {
            public static final int ID = 0xdeb3abbf;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.getGroupCallStreamRtmpUrl";
            public ApiScheme.InputPeer peer;
            public ApiScheme.Bool revoke;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                revoke.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPeer.readObject(inputStream);
                revoke = ApiScheme.Bool.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetGroupCallStreamRtmpUrl{" +
                        "peer=" + peer +
                        ", revoke=" + revoke +
                        '}';

            }
        }


        public static class SaveCallLog extends TLMethod<Bool> {
            public static final int ID = 0x41248786;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "phone.saveCallLog";
            public ApiScheme.InputPhoneCall peer;
            public ApiScheme.InputFile file;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                peer.write(outputStream);

                file.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                peer = ApiScheme.InputPhoneCall.readObject(inputStream);
                file = ApiScheme.InputFile.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SaveCallLog{" +
                        "peer=" + peer +
                        ", file=" + file +
                        '}';

            }
        }


    }

    public static abstract class NsStats {
        public static abstract class BroadcastStats extends TLObject {
            public static BroadcastStats readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsStats.BroadcastStats a = null;
                if (id == NsStats.BroadcastStats2.ID) {
                    a = new NsStats.BroadcastStats2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class MegagroupStats extends TLObject {
            public static MegagroupStats readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsStats.MegagroupStats a = null;
                if (id == NsStats.MegagroupStats2.ID) {
                    a = new NsStats.MegagroupStats2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static abstract class MessageStats extends TLObject {
            public static MessageStats readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsStats.MessageStats a = null;
                if (id == NsStats.MessageStats2.ID) {
                    a = new NsStats.MessageStats2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class BroadcastStats2 extends NsStats.BroadcastStats {
            public static final int ID = 0xbdf78394;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "stats.broadcastStats";
            public ApiScheme.StatsDateRangeDays period;
            public ApiScheme.StatsAbsValueAndPrev followers;
            public ApiScheme.StatsAbsValueAndPrev viewsPerPost;
            public ApiScheme.StatsAbsValueAndPrev sharesPerPost;
            public ApiScheme.StatsPercentValue enabledNotifications;
            public ApiScheme.StatsGraph growthGraph;
            public ApiScheme.StatsGraph followersGraph;
            public ApiScheme.StatsGraph muteGraph;
            public ApiScheme.StatsGraph topHoursGraph;
            public ApiScheme.StatsGraph interactionsGraph;
            public ApiScheme.StatsGraph ivInteractionsGraph;
            public ApiScheme.StatsGraph viewsBySourceGraph;
            public ApiScheme.StatsGraph newFollowersBySourceGraph;
            public ApiScheme.StatsGraph languagesGraph;
            public TLVector<ApiScheme.MessageInteractionCounters> recentMessageInteractions;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                period.write(outputStream);

                followers.write(outputStream);

                viewsPerPost.write(outputStream);

                sharesPerPost.write(outputStream);

                enabledNotifications.write(outputStream);

                growthGraph.write(outputStream);

                followersGraph.write(outputStream);

                muteGraph.write(outputStream);

                topHoursGraph.write(outputStream);

                interactionsGraph.write(outputStream);

                ivInteractionsGraph.write(outputStream);

                viewsBySourceGraph.write(outputStream);

                newFollowersBySourceGraph.write(outputStream);

                languagesGraph.write(outputStream);

                recentMessageInteractions.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                period = ApiScheme.StatsDateRangeDays.readObject(inputStream);
                followers = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                viewsPerPost = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                sharesPerPost = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                enabledNotifications = ApiScheme.StatsPercentValue.readObject(inputStream);
                growthGraph = ApiScheme.StatsGraph.readObject(inputStream);
                followersGraph = ApiScheme.StatsGraph.readObject(inputStream);
                muteGraph = ApiScheme.StatsGraph.readObject(inputStream);
                topHoursGraph = ApiScheme.StatsGraph.readObject(inputStream);
                interactionsGraph = ApiScheme.StatsGraph.readObject(inputStream);
                ivInteractionsGraph = ApiScheme.StatsGraph.readObject(inputStream);
                viewsBySourceGraph = ApiScheme.StatsGraph.readObject(inputStream);
                newFollowersBySourceGraph = ApiScheme.StatsGraph.readObject(inputStream);
                languagesGraph = ApiScheme.StatsGraph.readObject(inputStream);
                recentMessageInteractions = new TLVector<ApiScheme.MessageInteractionCounters>(ApiScheme.MessageInteractionCounters.class);
                recentMessageInteractions.read(inputStream);


            }

            @Override
            public String toString() {
                return "BroadcastStats{" +
                        "period=" + period +
                        ", followers=" + followers +
                        ", viewsPerPost=" + viewsPerPost +
                        ", sharesPerPost=" + sharesPerPost +
                        ", enabledNotifications=" + enabledNotifications +
                        ", growthGraph=" + growthGraph +
                        ", followersGraph=" + followersGraph +
                        ", muteGraph=" + muteGraph +
                        ", topHoursGraph=" + topHoursGraph +
                        ", interactionsGraph=" + interactionsGraph +
                        ", ivInteractionsGraph=" + ivInteractionsGraph +
                        ", viewsBySourceGraph=" + viewsBySourceGraph +
                        ", newFollowersBySourceGraph=" + newFollowersBySourceGraph +
                        ", languagesGraph=" + languagesGraph +
                        ", recentMessageInteractions=" + recentMessageInteractions +
                        '}';

            }
        }


        public static class MegagroupStats2 extends NsStats.MegagroupStats {
            public static final int ID = 0xef7ff916;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "stats.megagroupStats";
            public ApiScheme.StatsDateRangeDays period;
            public ApiScheme.StatsAbsValueAndPrev members;
            public ApiScheme.StatsAbsValueAndPrev messages;
            public ApiScheme.StatsAbsValueAndPrev viewers;
            public ApiScheme.StatsAbsValueAndPrev posters;
            public ApiScheme.StatsGraph growthGraph;
            public ApiScheme.StatsGraph membersGraph;
            public ApiScheme.StatsGraph newMembersBySourceGraph;
            public ApiScheme.StatsGraph languagesGraph;
            public ApiScheme.StatsGraph messagesGraph;
            public ApiScheme.StatsGraph actionsGraph;
            public ApiScheme.StatsGraph topHoursGraph;
            public ApiScheme.StatsGraph weekdaysGraph;
            public TLVector<ApiScheme.StatsGroupTopPoster> topPosters;
            public TLVector<ApiScheme.StatsGroupTopAdmin> topAdmins;
            public TLVector<ApiScheme.StatsGroupTopInviter> topInviters;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                period.write(outputStream);

                members.write(outputStream);

                messages.write(outputStream);

                viewers.write(outputStream);

                posters.write(outputStream);

                growthGraph.write(outputStream);

                membersGraph.write(outputStream);

                newMembersBySourceGraph.write(outputStream);

                languagesGraph.write(outputStream);

                messagesGraph.write(outputStream);

                actionsGraph.write(outputStream);

                topHoursGraph.write(outputStream);

                weekdaysGraph.write(outputStream);

                topPosters.write(outputStream);

                topAdmins.write(outputStream);

                topInviters.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                period = ApiScheme.StatsDateRangeDays.readObject(inputStream);
                members = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                messages = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                viewers = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                posters = ApiScheme.StatsAbsValueAndPrev.readObject(inputStream);
                growthGraph = ApiScheme.StatsGraph.readObject(inputStream);
                membersGraph = ApiScheme.StatsGraph.readObject(inputStream);
                newMembersBySourceGraph = ApiScheme.StatsGraph.readObject(inputStream);
                languagesGraph = ApiScheme.StatsGraph.readObject(inputStream);
                messagesGraph = ApiScheme.StatsGraph.readObject(inputStream);
                actionsGraph = ApiScheme.StatsGraph.readObject(inputStream);
                topHoursGraph = ApiScheme.StatsGraph.readObject(inputStream);
                weekdaysGraph = ApiScheme.StatsGraph.readObject(inputStream);
                topPosters = new TLVector<ApiScheme.StatsGroupTopPoster>(ApiScheme.StatsGroupTopPoster.class);
                topPosters.read(inputStream);

                topAdmins = new TLVector<ApiScheme.StatsGroupTopAdmin>(ApiScheme.StatsGroupTopAdmin.class);
                topAdmins.read(inputStream);

                topInviters = new TLVector<ApiScheme.StatsGroupTopInviter>(ApiScheme.StatsGroupTopInviter.class);
                topInviters.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "MegagroupStats{" +
                        "period=" + period +
                        ", members=" + members +
                        ", messages=" + messages +
                        ", viewers=" + viewers +
                        ", posters=" + posters +
                        ", growthGraph=" + growthGraph +
                        ", membersGraph=" + membersGraph +
                        ", newMembersBySourceGraph=" + newMembersBySourceGraph +
                        ", languagesGraph=" + languagesGraph +
                        ", messagesGraph=" + messagesGraph +
                        ", actionsGraph=" + actionsGraph +
                        ", topHoursGraph=" + topHoursGraph +
                        ", weekdaysGraph=" + weekdaysGraph +
                        ", topPosters=" + topPosters +
                        ", topAdmins=" + topAdmins +
                        ", topInviters=" + topInviters +
                        ", users=" + users +
                        '}';

            }
        }


        public static class MessageStats2 extends NsStats.MessageStats {
            public static final int ID = 0x8999f295;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "stats.messageStats";
            public ApiScheme.StatsGraph viewsGraph;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                viewsGraph.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                viewsGraph = ApiScheme.StatsGraph.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "MessageStats{" +
                        "viewsGraph=" + viewsGraph +
                        '}';

            }
        }


        public static class GetBroadcastStats extends TLMethod<NsStats.BroadcastStats> {
            public static final int ID = 0xab42441a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stats.getBroadcastStats";
            public int flags;
            public True dark = null;
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = dark != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && dark != null) {
                    dark.isBareType = true;
                    dark.write(outputStream);
                }

                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    dark = new True();
                    dark.isBareType = true;
                    dark.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetBroadcastStats{" +
                        "flags=" + flags +
                        ", dark=" + dark +
                        ", channel=" + channel +
                        '}';

            }
        }


        public static class LoadAsyncGraph extends TLMethod<StatsGraph> {
            public static final int ID = 0x621d5fa0;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stats.loadAsyncGraph";
            public int flags;
            public String token;
            public Long x = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = x != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                outputStream.writeTLString(token);
                if ((flags & 1) != 0 && x != null) {
                    outputStream.writeLong(x);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                token = inputStream.readTLString();
                if ((flags & 1) != 0) {
                    x = inputStream.readLong();
                }


            }

            @Override
            public String toString() {
                return "LoadAsyncGraph{" +
                        "flags=" + flags +
                        ", token=" + token +
                        ", x=" + x +
                        '}';

            }
        }


        public static class GetMegagroupStats extends TLMethod<NsStats.MegagroupStats> {
            public static final int ID = 0xdcdf8607;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stats.getMegagroupStats";
            public int flags;
            public True dark = null;
            public ApiScheme.InputChannel channel;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = dark != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && dark != null) {
                    dark.isBareType = true;
                    dark.write(outputStream);
                }

                channel.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    dark = new True();
                    dark.isBareType = true;
                    dark.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetMegagroupStats{" +
                        "flags=" + flags +
                        ", dark=" + dark +
                        ", channel=" + channel +
                        '}';

            }
        }


        public static class GetMessagePublicForwards extends TLMethod<NsMessages.Messages> {
            public static final int ID = 0x5630281b;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stats.getMessagePublicForwards";
            public ApiScheme.InputChannel channel;
            public int msgId;
            public int offsetRate;
            public ApiScheme.InputPeer offsetPeer;
            public int offsetId;
            public int limit;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                channel.write(outputStream);

                outputStream.writeInt(msgId);
                outputStream.writeInt(offsetRate);
                offsetPeer.write(outputStream);

                outputStream.writeInt(offsetId);
                outputStream.writeInt(limit);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                channel = ApiScheme.InputChannel.readObject(inputStream);
                msgId = inputStream.readInt();
                offsetRate = inputStream.readInt();
                offsetPeer = ApiScheme.InputPeer.readObject(inputStream);
                offsetId = inputStream.readInt();
                limit = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetMessagePublicForwards{" +
                        "channel=" + channel +
                        ", msgId=" + msgId +
                        ", offsetRate=" + offsetRate +
                        ", offsetPeer=" + offsetPeer +
                        ", offsetId=" + offsetId +
                        ", limit=" + limit +
                        '}';

            }
        }


        public static class GetMessageStats extends TLMethod<NsStats.MessageStats> {
            public static final int ID = 0xb6e0a3f5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stats.getMessageStats";
            public int flags;
            public True dark = null;
            public ApiScheme.InputChannel channel;
            public int msgId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = dark != null ? (flags | 1) : (flags & ~1);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && dark != null) {
                    dark.isBareType = true;
                    dark.write(outputStream);
                }

                channel.write(outputStream);

                outputStream.writeInt(msgId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    dark = new True();
                    dark.isBareType = true;
                    dark.read(inputStream);
                }

                channel = ApiScheme.InputChannel.readObject(inputStream);
                msgId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetMessageStats{" +
                        "flags=" + flags +
                        ", dark=" + dark +
                        ", channel=" + channel +
                        ", msgId=" + msgId +
                        '}';

            }
        }


    }

    public static abstract class NsStickers {
        public static abstract class SuggestedShortName extends TLObject {
            public static SuggestedShortName readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsStickers.SuggestedShortName a = null;
                if (id == NsStickers.SuggestedShortName2.ID) {
                    a = new NsStickers.SuggestedShortName2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class SuggestedShortName2 extends NsStickers.SuggestedShortName {
            public static final int ID = 0x85fea03f;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "stickers.suggestedShortName";
            public String shortName;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(shortName);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                shortName = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SuggestedShortName{" +
                        "shortName=" + shortName +
                        '}';

            }
        }


        public static class CreateStickerSet extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0x9021ab67;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.createStickerSet";
            public int flags;
            public True masks = null;
            public True animated = null;
            public True videos = null;
            public ApiScheme.InputUser userId;
            public String title;
            public String shortName;
            public ApiScheme.InputDocument thumb = null;
            public TLVector<ApiScheme.InputStickerSetItem> stickers;
            public String software = null;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                flags = masks != null ? (flags | 1) : (flags & ~1);
                flags = animated != null ? (flags | 2) : (flags & ~2);
                flags = videos != null ? (flags | 16) : (flags & ~16);
                flags = thumb != null ? (flags | 4) : (flags & ~4);
                flags = software != null ? (flags | 8) : (flags & ~8);
                outputStream.writeInt(flags);
                if ((flags & 1) != 0 && masks != null) {
                    masks.isBareType = true;
                    masks.write(outputStream);
                }

                if ((flags & 2) != 0 && animated != null) {
                    animated.isBareType = true;
                    animated.write(outputStream);
                }

                if ((flags & 16) != 0 && videos != null) {
                    videos.isBareType = true;
                    videos.write(outputStream);
                }

                userId.write(outputStream);

                outputStream.writeTLString(title);
                outputStream.writeTLString(shortName);
                if ((flags & 4) != 0 && thumb != null) {
                    thumb.write(outputStream);
                }

                stickers.write(outputStream);

                if ((flags & 8) != 0 && software != null) {
                    outputStream.writeTLString(software);
                }


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                flags = inputStream.readInt();
                if ((flags & 1) != 0) {
                    masks = new True();
                    masks.isBareType = true;
                    masks.read(inputStream);
                }

                if ((flags & 2) != 0) {
                    animated = new True();
                    animated.isBareType = true;
                    animated.read(inputStream);
                }

                if ((flags & 16) != 0) {
                    videos = new True();
                    videos.isBareType = true;
                    videos.read(inputStream);
                }

                userId = ApiScheme.InputUser.readObject(inputStream);
                title = inputStream.readTLString();
                shortName = inputStream.readTLString();
                if ((flags & 4) != 0) {
                    thumb = ApiScheme.InputDocument.readObject(inputStream);
                }

                stickers = new TLVector<ApiScheme.InputStickerSetItem>(ApiScheme.InputStickerSetItem.class);
                stickers.read(inputStream);

                if ((flags & 8) != 0) {
                    software = inputStream.readTLString();
                }


            }

            @Override
            public String toString() {
                return "CreateStickerSet{" +
                        "flags=" + flags +
                        ", masks=" + masks +
                        ", animated=" + animated +
                        ", videos=" + videos +
                        ", userId=" + userId +
                        ", title=" + title +
                        ", shortName=" + shortName +
                        ", thumb=" + thumb +
                        ", stickers=" + stickers +
                        ", software=" + software +
                        '}';

            }
        }


        public static class RemoveStickerFromSet extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0xf7760f51;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.removeStickerFromSet";
            public ApiScheme.InputDocument sticker;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                sticker.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                sticker = ApiScheme.InputDocument.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "RemoveStickerFromSet{" +
                        "sticker=" + sticker +
                        '}';

            }
        }


        public static class ChangeStickerPosition extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0xffb6d4ca;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.changeStickerPosition";
            public ApiScheme.InputDocument sticker;
            public int position;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                sticker.write(outputStream);

                outputStream.writeInt(position);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                sticker = ApiScheme.InputDocument.readObject(inputStream);
                position = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "ChangeStickerPosition{" +
                        "sticker=" + sticker +
                        ", position=" + position +
                        '}';

            }
        }


        public static class AddStickerToSet extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0x8653febe;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.addStickerToSet";
            public ApiScheme.InputStickerSet stickerset;
            public ApiScheme.InputStickerSetItem sticker;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                stickerset.write(outputStream);

                sticker.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
                sticker = ApiScheme.InputStickerSetItem.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AddStickerToSet{" +
                        "stickerset=" + stickerset +
                        ", sticker=" + sticker +
                        '}';

            }
        }


        public static class SetStickerSetThumb extends TLMethod<NsMessages.StickerSet> {
            public static final int ID = 0x9a364e30;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.setStickerSetThumb";
            public ApiScheme.InputStickerSet stickerset;
            public ApiScheme.InputDocument thumb;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                stickerset.write(outputStream);

                thumb.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                stickerset = ApiScheme.InputStickerSet.readObject(inputStream);
                thumb = ApiScheme.InputDocument.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetStickerSetThumb{" +
                        "stickerset=" + stickerset +
                        ", thumb=" + thumb +
                        '}';

            }
        }


        public static class CheckShortName extends TLMethod<Bool> {
            public static final int ID = 0x284b3639;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.checkShortName";
            public String shortName;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(shortName);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                shortName = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "CheckShortName{" +
                        "shortName=" + shortName +
                        '}';

            }
        }


        public static class SuggestShortName extends TLMethod<NsStickers.SuggestedShortName> {
            public static final int ID = 0x4dafc503;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "stickers.suggestShortName";
            public String title;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(title);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                title = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "SuggestShortName{" +
                        "title=" + title +
                        '}';

            }
        }


    }

    public static abstract class NsUsers {
        public static abstract class UserFull extends TLObject {
            public static UserFull readObject(TLInputStream inputStream) throws Exception {
                int id = inputStream.readInt();
                inputStream.position(inputStream.position() - 4);
                ApiScheme.NsUsers.UserFull a = null;
                if (id == NsUsers.UserFull2.ID) {
                    a = new NsUsers.UserFull2();
                }
                if (a != null) {
                    a.read(inputStream);
                }
                return a;
            }
        }

        public static class UserFull2 extends NsUsers.UserFull {
            public static final int ID = 0x3b6d152e;
            public static final boolean IS_CONSTRUCTOR = true;
            public static final String NAME = "users.userFull";
            public ApiScheme.UserFull fullUser;
            public TLVector<ApiScheme.Chat> chats;
            public TLVector<ApiScheme.User> users;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                fullUser.write(outputStream);

                chats.write(outputStream);

                users.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                fullUser = ApiScheme.UserFull.readObject(inputStream);
                chats = new TLVector<ApiScheme.Chat>(ApiScheme.Chat.class);
                chats.read(inputStream);

                users = new TLVector<ApiScheme.User>(ApiScheme.User.class);
                users.read(inputStream);


            }

            @Override
            public String toString() {
                return "UserFull{" +
                        "fullUser=" + fullUser +
                        ", chats=" + chats +
                        ", users=" + users +
                        '}';

            }
        }


        public static class GetUsers extends TLMethod<TLVector<User>> {
            public static final int ID = 0xd91a548;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "users.getUsers";
            public TLVector<ApiScheme.InputUser> id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = new TLVector<ApiScheme.InputUser>(ApiScheme.InputUser.class);
                id.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetUsers{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class GetFullUser extends TLMethod<NsUsers.UserFull> {
            public static final int ID = 0xb60f5918;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "users.getFullUser";
            public ApiScheme.InputUser id;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetFullUser{" +
                        "id=" + id +
                        '}';

            }
        }


        public static class SetSecureValueErrors extends TLMethod<Bool> {
            public static final int ID = 0x90c894b5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "users.setSecureValueErrors";
            public ApiScheme.InputUser id;
            public TLVector<ApiScheme.SecureValueError> errors;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                id.write(outputStream);

                errors.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                id = ApiScheme.InputUser.readObject(inputStream);
                errors = new TLVector<ApiScheme.SecureValueError>(ApiScheme.SecureValueError.class);
                errors.read(inputStream);


            }

            @Override
            public String toString() {
                return "SetSecureValueErrors{" +
                        "id=" + id +
                        ", errors=" + errors +
                        '}';

            }
        }


    }

    public static abstract class NsBots {

        public static class SendCustomRequest extends TLMethod<DataJSON> {
            public static final int ID = 0xaa2769ed;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.sendCustomRequest";
            public String customMethod;
            public ApiScheme.DataJSON params;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(customMethod);
                params.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                customMethod = inputStream.readTLString();
                params = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SendCustomRequest{" +
                        "customMethod=" + customMethod +
                        ", params=" + params +
                        '}';

            }
        }


        public static class AnswerWebhookJSONQuery extends TLMethod<Bool> {
            public static final int ID = 0xe6213f4d;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.answerWebhookJSONQuery";
            public long queryId;
            public ApiScheme.DataJSON data;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeLong(queryId);
                data.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                queryId = inputStream.readLong();
                data = ApiScheme.DataJSON.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "AnswerWebhookJSONQuery{" +
                        "queryId=" + queryId +
                        ", data=" + data +
                        '}';

            }
        }


        public static class SetBotCommands extends TLMethod<Bool> {
            public static final int ID = 0x517165a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.setBotCommands";
            public ApiScheme.BotCommandScope scope;
            public String langCode;
            public TLVector<ApiScheme.BotCommand> commands;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                scope.write(outputStream);

                outputStream.writeTLString(langCode);
                commands.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                scope = ApiScheme.BotCommandScope.readObject(inputStream);
                langCode = inputStream.readTLString();
                commands = new TLVector<ApiScheme.BotCommand>(ApiScheme.BotCommand.class);
                commands.read(inputStream);


            }

            @Override
            public String toString() {
                return "SetBotCommands{" +
                        "scope=" + scope +
                        ", langCode=" + langCode +
                        ", commands=" + commands +
                        '}';

            }
        }


        public static class ResetBotCommands extends TLMethod<Bool> {
            public static final int ID = 0x3d8de0f9;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.resetBotCommands";
            public ApiScheme.BotCommandScope scope;
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                scope.write(outputStream);

                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                scope = ApiScheme.BotCommandScope.readObject(inputStream);
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "ResetBotCommands{" +
                        "scope=" + scope +
                        ", langCode=" + langCode +
                        '}';

            }
        }


        public static class GetBotCommands extends TLMethod<TLVector<BotCommand>> {
            public static final int ID = 0xe34c0dd6;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.getBotCommands";
            public ApiScheme.BotCommandScope scope;
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                scope.write(outputStream);

                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                scope = ApiScheme.BotCommandScope.readObject(inputStream);
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetBotCommands{" +
                        "scope=" + scope +
                        ", langCode=" + langCode +
                        '}';

            }
        }


        public static class SetBotMenuButton extends TLMethod<Bool> {
            public static final int ID = 0x4504d54f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.setBotMenuButton";
            public ApiScheme.InputUser userId;
            public ApiScheme.BotMenuButton button;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);

                button.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);
                button = ApiScheme.BotMenuButton.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetBotMenuButton{" +
                        "userId=" + userId +
                        ", button=" + button +
                        '}';

            }
        }


        public static class GetBotMenuButton extends TLMethod<BotMenuButton> {
            public static final int ID = 0x9c60eb28;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.getBotMenuButton";
            public ApiScheme.InputUser userId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                userId.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                userId = ApiScheme.InputUser.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "GetBotMenuButton{" +
                        "userId=" + userId +
                        '}';

            }
        }


        public static class SetBotBroadcastDefaultAdminRights extends TLMethod<Bool> {
            public static final int ID = 0x788464e1;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.setBotBroadcastDefaultAdminRights";
            public ApiScheme.ChatAdminRights adminRights;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                adminRights.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetBotBroadcastDefaultAdminRights{" +
                        "adminRights=" + adminRights +
                        '}';

            }
        }


        public static class SetBotGroupDefaultAdminRights extends TLMethod<Bool> {
            public static final int ID = 0x925ec9ea;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "bots.setBotGroupDefaultAdminRights";
            public ApiScheme.ChatAdminRights adminRights;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                adminRights.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                adminRights = ApiScheme.ChatAdminRights.readObject(inputStream);

            }

            @Override
            public String toString() {
                return "SetBotGroupDefaultAdminRights{" +
                        "adminRights=" + adminRights +
                        '}';

            }
        }


    }

    public static abstract class NsLangpack {

        public static class GetLangPack extends TLMethod<LangPackDifference> {
            public static final int ID = 0xf2f2330a;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "langpack.getLangPack";
            public String langPack;
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langPack);
                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langPack = inputStream.readTLString();
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetLangPack{" +
                        "langPack=" + langPack +
                        ", langCode=" + langCode +
                        '}';

            }
        }


        public static class GetStrings extends TLMethod<TLVector<LangPackString>> {
            public static final int ID = 0xefea3803;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "langpack.getStrings";
            public String langPack;
            public String langCode;
            public TLVector<TLString> keys;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langPack);
                outputStream.writeTLString(langCode);
                keys.isBareTypeItem = true;
                keys.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langPack = inputStream.readTLString();
                langCode = inputStream.readTLString();
                keys = new TLVector<TLString>(TLString.class);
                keys.isBareTypeItem = true;
                keys.read(inputStream);


            }

            @Override
            public String toString() {
                return "GetStrings{" +
                        "langPack=" + langPack +
                        ", langCode=" + langCode +
                        ", keys=" + keys +
                        '}';

            }
        }


        public static class GetDifference extends TLMethod<LangPackDifference> {
            public static final int ID = 0xcd984aa5;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "langpack.getDifference";
            public String langPack;
            public String langCode;
            public int fromVersion;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langPack);
                outputStream.writeTLString(langCode);
                outputStream.writeInt(fromVersion);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langPack = inputStream.readTLString();
                langCode = inputStream.readTLString();
                fromVersion = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "GetDifference{" +
                        "langPack=" + langPack +
                        ", langCode=" + langCode +
                        ", fromVersion=" + fromVersion +
                        '}';

            }
        }


        public static class GetLanguages extends TLMethod<TLVector<LangPackLanguage>> {
            public static final int ID = 0x42c6978f;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "langpack.getLanguages";
            public String langPack;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langPack);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langPack = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetLanguages{" +
                        "langPack=" + langPack +
                        '}';

            }
        }


        public static class GetLanguage extends TLMethod<LangPackLanguage> {
            public static final int ID = 0x6a596502;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "langpack.getLanguage";
            public String langPack;
            public String langCode;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeTLString(langPack);
                outputStream.writeTLString(langCode);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                langPack = inputStream.readTLString();
                langCode = inputStream.readTLString();

            }

            @Override
            public String toString() {
                return "GetLanguage{" +
                        "langPack=" + langPack +
                        ", langCode=" + langCode +
                        '}';

            }
        }


    }

    public static abstract class NsFolders {

        public static class EditPeerFolders extends TLMethod<Updates> {
            public static final int ID = 0x6847d0ab;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "folders.editPeerFolders";
            public TLVector<ApiScheme.InputFolderPeer> folderPeers;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                folderPeers.write(outputStream);


            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                folderPeers = new TLVector<ApiScheme.InputFolderPeer>(ApiScheme.InputFolderPeer.class);
                folderPeers.read(inputStream);


            }

            @Override
            public String toString() {
                return "EditPeerFolders{" +
                        "folderPeers=" + folderPeers +
                        '}';

            }
        }


        public static class DeleteFolder extends TLMethod<Updates> {
            public static final int ID = 0x1c295881;
            public static final boolean IS_CONSTRUCTOR = false;
            public static final String NAME = "folders.deleteFolder";
            public int folderId;


            @Override
            public int getId() {
                return ID;
            }

            @Override
            public boolean isConstructor() {
                return IS_CONSTRUCTOR;
            }

            @Override
            public String getName() {
                return NAME;
            }

            @Override
            protected void writeParams(TLOutputStream outputStream) throws Exception {
                outputStream.writeInt(folderId);

            }

            @Override
            protected void readParams(TLInputStream inputStream) throws Exception {
                folderId = inputStream.readInt();

            }

            @Override
            public String toString() {
                return "DeleteFolder{" +
                        "folderId=" + folderId +
                        '}';

            }
        }


    }


}

